// Space scenario class declarations
// Automatically generated by schema2cpp - DO NOT EDIT!

#ifndef _STASCHEMA_H_
#define _STASCHEMA_H_

class QDomElement;
#include "stascenarioutil.h"
#include <QSharedPointer>

class ScenarioObject
{
    public:
    virtual bool load(const QDomElement& e, QDomElement* nextElement)
    {
        *nextElement = e.firstChildElement();
        return true;
    }

    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const
    {
        QDomElement e = doc.createElement("Object");
        e.setTagName("tns:" + elementName);
        return e;
        ;
    }
    virtual QString elementName() const = 0;
    virtual QList<QSharedPointer<ScenarioObject> > children() const = 0;
};

// Forward declarations

class ScenarioElementIdentifierType;
class ScenarioPropagationPositionType;
class ScenarioPropagationAttitudeType;
class ScenarioAbstractTrajectoryType;
class ScenarioAbstractPayloadType;
class ScenarioPayloadSet;
class ScenarioInitialPositionType;
class ScenarioInitialAttitudeType;
class ScenarioInitialAttitudeUsingQuaternionsType;
class ScenarioParticipantType;
class ScenarioTimeLine;
class ScenarioPropagation;
class ScenarioEnvironmentType;
class ScenarioCentralBodyType;
class ScenarioGravityModel;
class ScenarioPerturbationsForceType;
class ScenarioPerturbationsTorqueType;
class ScenarioTrajectoryStoppingConditionType;
class ScenarioAbstract3DOFPositionType;
class ScenarioAbstract6DOFPositionType;
class ScenarioGroundPositionType;
class ScenarioStateVectorType;
class ScenarioKeplerianElementsType;
class ScenarioSphericalCoordinatesType;
class ScenarioAbstract6DOFAttitudeType;
class ScenarioAbstract8DOFAttitudeType;
class ScenarioEulerType;
class ScenarioQuaternionType;
class ScenarioAbstract12DOFStateType;
class ScenarioState12DOF;
class ScenarioAbstract14DOFStateType;
class ScenarioState14DOF;
class ScenarioTelescopeType;
class ScenarioOpticalProperties;
class ScenarioRadarType;
class ScenarioRadarProperties;
class ScenarioCoverageType;
class ScenarioAntennaType;
class ScenarioPointingDirection;
class ScenarioEMproperties;
class ScenarioBudgetType;
class ScenarioPower;
class ScenarioSize;
class ScenarioTemperatureRange;
class ScenarioTransmitter;
class ScenarioModulation;
class ScenarioReceiver;
class ScenarioSystemTemperature;
class ScenarioAeroCoefFileType;
class ScenarioOptVarDouble;
class ScenarioOptVarInt;
class ScenarioOptVarBool;
class ScenarioOptVarString;
class ScenarioOptimization;
class ScenarioOutputFiles;
class ScenarioGroundStation;
class ScenarioGroundStationEnvironment;
class ScenarioRain;
class ScenarioLaunchPad;
class ScenarioPoint;
class ScenarioRegion;
class ScenarioLocationType;
class ScenarioLV;
class ScenarioLVProgramType;
class ScenarioLVMissionType;
class ScenarioLVSystemType;
class ScenarioLVPropulsionSystemType;
class ScenarioLVGeometryType;
class ScenarioLVAerodynamicsType;
class ScenarioLVComponentWeightsType;
class ScenarioLVSystemWeightsType;
class ScenarioLVComponentCostsType;
class ScenarioLVSystemCostsType;
class ScenarioLVComponentReliabilityType;
class ScenarioLVSystemReliabilityType;
class ScenarioLVTrajectoryType;
class ScenarioLVProgramCostFactorsType;
class ScenarioLVPayloadType;
class ScenarioLVLaunchSiteType;
class ScenarioLVTargetOrbitType;
class ScenarioLVArchitectureType;
class ScenarioLVPlFairingType;
class ScenarioLVLowerStageType;
class ScenarioLVUpperStageType;
class ScenarioLVBoostersType;
class ScenarioLVSystemConstraintsType;
class ScenarioLVPropulsionSystemSystemType;
class ScenarioLVPropulsionSystemLiquidTanksType;
class ScenarioLVPropulsionSystemSolidGrainType;
class ScenarioLVPropulsionSystemFeedSystemType;
class ScenarioLVPropulsionSystemCombustionChamberType;
class ScenarioLVPropulsionSystemNozzleType;
class ScenarioLVPropulsionSystemPerformanceType;
class ScenarioLVDevelopmentCostsType;
class ScenarioLVProductionCostsType;
class ScenarioLVTotalProgramCostsType;
class ScenarioLVDirectOperationsCostsType;
class ScenarioLVIndirectOperationsCostsType;
class ScenarioLVSeparationType;
class ScenarioLVPropulsionReliabilityType;
class ScenarioLVTakeoffReliabilityType;
class ScenarioLVTakeOffType;
class ScenarioLVIgnitionsType;
class ScenarioLVAtmosphericFlightType;
class ScenarioLVExoatmosphericFlightType;
class ScenarioLVTrajectoryConstraintsType;
class ScenarioREV;
class ScenarioREVProgramType;
class ScenarioREVMissionType;
class ScenarioREVTrajectoryPlanType;
class ScenarioEntryArcType;
class ScenarioREVFinalStateType;
class ScenarioREVFinalPositionStateType;
class ScenarioREVDispersionAnalysisType;
class ScenarioEntryCharacteristicsType;
class ScenarioREVConstraintsViolationType;
class ScenarioREVPayloadType;
class ScenarioREVGeometryType;
class ScenariocapsuleShape;
class ScenarioprobeShape;
class ScenariobiconicShape;
class ScenariosphereconeShape;
class ScenarioREVConstraintsType;
class ScenarioREVSystemType;
class ScenarioParachutes;
class ScenarioParachute;
class ScenarioParachuteAerodynamics;
class ScenarioREVStructureType;
class ScenarioREVAeroThermodynamicsType;
class ScenarioREVTPS;
class ScenarioREVSecondaryPropulsionType;
class ScenarioREVOMSType;
class ScenarioREVRCSType;
class ScenarioREVComponentsMassType;
class ScenarioREVComponentsType;
class ScenarioCoGLongPosition;
class ScenarioREVWeights;
class ScenarioInertialMatrix;
class ScenarioREVSystemCostsType;
class ScenarioREVCostsType;
class ScenarioREVSubsystemsRefurbishmentCostsType;
class ScenarioREVSubsystemsProductionCostsType;
class ScenarioREVSubsystemsDevelopCostsType;
class ScenarioREVReliabilityType;
class ScenarioREVSubsystemsReliablityType;
class ScenarioSC;
class ScenarioSCProgram;
class ScenarioSCMission;
class ScenarioTrajectoryPlan;
class ScenarioLoiteringType;
class ScenarioLoiteringTLEType;
class ScenarioLagrangianType;
class ScenarioFlyByType;
class ScenarioExternalType;
class ScenarioDeltaVType;
class ScenarioRendezVousManoeuvreType;
class ScenarioSCSystemType;
class ScenarioSystemBudgets;
class ScenarioMassOfSystem;
class ScenarioPowerOfSystem;
class ScenarioLink;
class ScenarioSCAerodynamics;
class ScenarioPropulsion;
class ScenarioStructure;
class ScenarioSizing;
class ScenarioMomentsOfInertia;
class ScenarioSecondMomentsOfInertia;
class ScenarioNaturalFrequency;
class ScenarioTCS;
class ScenarioTemperature;
class ScenarioCoatingArea;
class ScenarioColdSurface;
class ScenarioColdCoating;
class ScenarioHotSurface;
class ScenarioHotCoating;
class ScenarioEPS;
class ScenarioSolarArray;
class ScenarioBatteryType;
class ScenarioTTC;
class ScenarioTTCAntenna;
class ScenarioAOCS;
class ScenarioOBDH;
class ScenarioTransmitterPayloadType;
class ScenarioReceiverPayloadType;
class ScenarioOpticalPayloadType;
class ScenarioRadarPayloadType;
class SpaceScenario;


// Space scenario class definitions

// Automatically generated by schema2cpp - DO NOT EDIT!

#include <QDomElement>
#include <QDomDocument>
// ScenarioElementIdentifierType
class ScenarioElementIdentifierType : public ScenarioObject
{
public:
    ScenarioElementIdentifierType();
    static ScenarioElementIdentifierType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "ElementIdentifierType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QString Name() const
    { return m_Name; }
    void setName(QString Name)
    { m_Name = Name; }
    int theOrder() const
    { return m_theOrder; }
    void setTheOrder(int theOrder)
    { m_theOrder = theOrder; }
    QString modelName() const
    { return m_modelName; }
    void setModelName(QString modelName)
    { m_modelName = modelName; }
    QString colorName() const
    { return m_colorName; }
    void setColorName(QString colorName)
    { m_colorName = colorName; }

private:
    QString m_Name;
    int m_theOrder;
    QString m_modelName;
    QString m_colorName;
};


// ScenarioPropagationPositionType
class ScenarioPropagationPositionType : public ScenarioObject
{
public:
    ScenarioPropagationPositionType();
    static ScenarioPropagationPositionType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "PropagationPositionType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QString propagator() const
    { return m_propagator; }
    void setPropagator(QString propagator)
    { m_propagator = propagator; }
    QString integrator() const
    { return m_integrator; }
    void setIntegrator(QString integrator)
    { m_integrator = integrator; }
    double timeStep() const
    { return m_timeStep; }
    void setTimeStep(double timeStep)
    { m_timeStep = timeStep; }

private:
    QString m_propagator;
    QString m_integrator;
    double m_timeStep;
};


// ScenarioPropagationAttitudeType
class ScenarioPropagationAttitudeType : public ScenarioObject
{
public:
    ScenarioPropagationAttitudeType();
    static ScenarioPropagationAttitudeType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "PropagationAttitudeType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QString propagator() const
    { return m_propagator; }
    void setPropagator(QString propagator)
    { m_propagator = propagator; }
    QString integrator() const
    { return m_integrator; }
    void setIntegrator(QString integrator)
    { m_integrator = integrator; }
    double timeStep() const
    { return m_timeStep; }
    void setTimeStep(double timeStep)
    { m_timeStep = timeStep; }

private:
    QString m_propagator;
    QString m_integrator;
    double m_timeStep;
};


// ScenarioAbstractTrajectoryType
class ScenarioAbstractTrajectoryType : public ScenarioObject
{
public:
    ScenarioAbstractTrajectoryType();
    static ScenarioAbstractTrajectoryType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "AbstractTrajectoryType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioElementIdentifierType> ElementIdentifier() const
    { return m_ElementIdentifier; }
    void setElementIdentifier(QSharedPointer<ScenarioElementIdentifierType> ElementIdentifier)
    { m_ElementIdentifier = ElementIdentifier; }

private:
    QSharedPointer<ScenarioElementIdentifierType> m_ElementIdentifier;
};


// ScenarioAbstractPayloadType
class ScenarioAbstractPayloadType : public ScenarioObject
{
public:
    ScenarioAbstractPayloadType();
    static ScenarioAbstractPayloadType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "AbstractPayloadType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioBudgetType> Budget() const
    { return m_Budget; }
    void setBudget(QSharedPointer<ScenarioBudgetType> Budget)
    { m_Budget = Budget; }

private:
    QSharedPointer<ScenarioBudgetType> m_Budget;
};


// ScenarioPayloadSet
class ScenarioPayloadSet : public ScenarioObject
{
public:
    ScenarioPayloadSet();
    static ScenarioPayloadSet* create(const QDomElement& e);
    virtual QString elementName() const
    { return "PayloadSet"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    const QList<QSharedPointer<ScenarioAbstractPayloadType> >& AbstractPayload() const
    { return m_AbstractPayload; }
    QList<QSharedPointer<ScenarioAbstractPayloadType> >& AbstractPayload()
    { return m_AbstractPayload; }
    void setAbstractPayload(QList<QSharedPointer<ScenarioAbstractPayloadType> > AbstractPayload)
    { m_AbstractPayload = AbstractPayload; }

private:
    QList<QSharedPointer<ScenarioAbstractPayloadType> > m_AbstractPayload;
};


// ScenarioInitialPositionType
class ScenarioInitialPositionType : public ScenarioObject
{
public:
    ScenarioInitialPositionType();
    static ScenarioInitialPositionType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "InitialPositionType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QString CoordinateSystem() const
    { return m_CoordinateSystem; }
    void setCoordinateSystem(QString CoordinateSystem)
    { m_CoordinateSystem = CoordinateSystem; }
    QSharedPointer<ScenarioAbstract6DOFPositionType> Abstract6DOFPosition() const
    { return m_Abstract6DOFPosition; }
    void setAbstract6DOFPosition(QSharedPointer<ScenarioAbstract6DOFPositionType> Abstract6DOFPosition)
    { m_Abstract6DOFPosition = Abstract6DOFPosition; }

private:
    QString m_CoordinateSystem;
    QSharedPointer<ScenarioAbstract6DOFPositionType> m_Abstract6DOFPosition;
};


// ScenarioInitialAttitudeType
class ScenarioInitialAttitudeType : public ScenarioObject
{
public:
    ScenarioInitialAttitudeType();
    static ScenarioInitialAttitudeType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "InitialAttitudeType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QString CoordinateSystem() const
    { return m_CoordinateSystem; }
    void setCoordinateSystem(QString CoordinateSystem)
    { m_CoordinateSystem = CoordinateSystem; }
    QSharedPointer<ScenarioAbstract6DOFAttitudeType> Abstract6DOFAttitude() const
    { return m_Abstract6DOFAttitude; }
    void setAbstract6DOFAttitude(QSharedPointer<ScenarioAbstract6DOFAttitudeType> Abstract6DOFAttitude)
    { m_Abstract6DOFAttitude = Abstract6DOFAttitude; }

private:
    QString m_CoordinateSystem;
    QSharedPointer<ScenarioAbstract6DOFAttitudeType> m_Abstract6DOFAttitude;
};


// ScenarioInitialAttitudeUsingQuaternionsType
class ScenarioInitialAttitudeUsingQuaternionsType : public ScenarioObject
{
public:
    ScenarioInitialAttitudeUsingQuaternionsType();
    static ScenarioInitialAttitudeUsingQuaternionsType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "InitialAttitudeUsingQuaternionsType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QString CoordinateSystem() const
    { return m_CoordinateSystem; }
    void setCoordinateSystem(QString CoordinateSystem)
    { m_CoordinateSystem = CoordinateSystem; }
    QSharedPointer<ScenarioAbstract8DOFAttitudeType> Abstract8DOFAttitude() const
    { return m_Abstract8DOFAttitude; }
    void setAbstract8DOFAttitude(QSharedPointer<ScenarioAbstract8DOFAttitudeType> Abstract8DOFAttitude)
    { m_Abstract8DOFAttitude = Abstract8DOFAttitude; }

private:
    QString m_CoordinateSystem;
    QSharedPointer<ScenarioAbstract8DOFAttitudeType> m_Abstract8DOFAttitude;
};


// ScenarioParticipantType
class ScenarioParticipantType : public ScenarioObject
{
public:
    ScenarioParticipantType();
    static ScenarioParticipantType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "ParticipantType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QString Name() const
    { return m_Name; }
    void setName(QString Name)
    { m_Name = Name; }

private:
    QString m_Name;
};


// ScenarioTimeLine
class ScenarioTimeLine : public ScenarioObject
{
public:
    ScenarioTimeLine();
    static ScenarioTimeLine* create(const QDomElement& e);
    virtual QString elementName() const
    { return "TimeLine"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QDateTime StartTime() const
    { return m_StartTime; }
    void setStartTime(QDateTime StartTime)
    { m_StartTime = StartTime; }
    double StepTime() const
    { return m_StepTime; }
    void setStepTime(double StepTime)
    { m_StepTime = StepTime; }
    QDateTime EndTime() const
    { return m_EndTime; }
    void setEndTime(QDateTime EndTime)
    { m_EndTime = EndTime; }

private:
    QDateTime m_StartTime;
    double m_StepTime;
    QDateTime m_EndTime;
};


// ScenarioPropagation
class ScenarioPropagation : public ScenarioObject
{
public:
    ScenarioPropagation();
    static ScenarioPropagation* create(const QDomElement& e);
    virtual QString elementName() const
    { return "Propagation"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QString propagator() const
    { return m_propagator; }
    void setPropagator(QString propagator)
    { m_propagator = propagator; }

private:
    QString m_propagator;
};


// ScenarioEnvironmentType
class ScenarioEnvironmentType : public ScenarioObject
{
public:
    ScenarioEnvironmentType();
    static ScenarioEnvironmentType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "EnvironmentType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioCentralBodyType> CentralBody() const
    { return m_CentralBody; }
    void setCentralBody(QSharedPointer<ScenarioCentralBodyType> CentralBody)
    { m_CentralBody = CentralBody; }
    QSharedPointer<ScenarioPerturbationsForceType> PerturbationsToCentralBody() const
    { return m_PerturbationsToCentralBody; }
    void setPerturbationsToCentralBody(QSharedPointer<ScenarioPerturbationsForceType> PerturbationsToCentralBody)
    { m_PerturbationsToCentralBody = PerturbationsToCentralBody; }

private:
    QSharedPointer<ScenarioCentralBodyType> m_CentralBody;
    QSharedPointer<ScenarioPerturbationsForceType> m_PerturbationsToCentralBody;
};


// ScenarioCentralBodyType
class ScenarioCentralBodyType : public ScenarioObject
{
public:
    ScenarioCentralBodyType();
    static ScenarioCentralBodyType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "CentralBodyType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QString Name() const
    { return m_Name; }
    void setName(QString Name)
    { m_Name = Name; }
    QSharedPointer<ScenarioGravityModel> GravityModel() const
    { return m_GravityModel; }
    void setGravityModel(QSharedPointer<ScenarioGravityModel> GravityModel)
    { m_GravityModel = GravityModel; }
    QString AtmosphereModel() const
    { return m_AtmosphereModel; }
    void setAtmosphereModel(QString AtmosphereModel)
    { m_AtmosphereModel = AtmosphereModel; }
    QString MagneticModel() const
    { return m_MagneticModel; }
    void setMagneticModel(QString MagneticModel)
    { m_MagneticModel = MagneticModel; }
    bool Ellipticity() const
    { return m_Ellipticity; }
    void setEllipticity(bool Ellipticity)
    { m_Ellipticity = Ellipticity; }

private:
    QString m_Name;
    QSharedPointer<ScenarioGravityModel> m_GravityModel;
    QString m_AtmosphereModel;
    QString m_MagneticModel;
    bool m_Ellipticity;
};


// ScenarioGravityModel
class ScenarioGravityModel : public ScenarioObject
{
public:
    ScenarioGravityModel();
    static ScenarioGravityModel* create(const QDomElement& e);
    virtual QString elementName() const
    { return "GravityModel"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QString modelName() const
    { return m_modelName; }
    void setModelName(QString modelName)
    { m_modelName = modelName; }
    int numberOfZonals() const
    { return m_numberOfZonals; }
    void setNumberOfZonals(int numberOfZonals)
    { m_numberOfZonals = numberOfZonals; }
    int numberOfTesserals() const
    { return m_numberOfTesserals; }
    void setNumberOfTesserals(int numberOfTesserals)
    { m_numberOfTesserals = numberOfTesserals; }

private:
    QString m_modelName;
    int m_numberOfZonals;
    int m_numberOfTesserals;
};


// ScenarioPerturbationsForceType
class ScenarioPerturbationsForceType : public ScenarioObject
{
public:
    ScenarioPerturbationsForceType();
    static ScenarioPerturbationsForceType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "PerturbationsForceType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    bool gravityEffets() const
    { return m_gravityEffets; }
    void setGravityEffets(bool gravityEffets)
    { m_gravityEffets = gravityEffets; }
    bool atmosphereDrag() const
    { return m_atmosphereDrag; }
    void setAtmosphereDrag(bool atmosphereDrag)
    { m_atmosphereDrag = atmosphereDrag; }
    bool solarPressure() const
    { return m_solarPressure; }
    void setSolarPressure(bool solarPressure)
    { m_solarPressure = solarPressure; }
    bool albedo() const
    { return m_albedo; }
    void setAlbedo(bool albedo)
    { m_albedo = albedo; }
    bool IR() const
    { return m_IR; }
    void setIR(bool IR)
    { m_IR = IR; }
    int Cr() const
    { return m_Cr; }
    void setCr(int Cr)
    { m_Cr = Cr; }
    bool thirdBody() const
    { return m_thirdBody; }
    void setThirdBody(bool thirdBody)
    { m_thirdBody = thirdBody; }
    const QList<QString>& perturbingBody() const
    { return m_perturbingBody; }
    QList<QString>& perturbingBody()
    { return m_perturbingBody; }
    void setPerturbingBody(QList<QString> perturbingBody)
    { m_perturbingBody = perturbingBody; }
    double dailyF10_7() const
    { return m_dailyF10_7; }
    void setDailyF10_7(double dailyF10_7)
    { m_dailyF10_7 = dailyF10_7; }
    double averageF10_7() const
    { return m_averageF10_7; }
    void setAverageF10_7(double averageF10_7)
    { m_averageF10_7 = averageF10_7; }
    double geomagneticIndex() const
    { return m_geomagneticIndex; }
    void setGeomagneticIndex(double geomagneticIndex)
    { m_geomagneticIndex = geomagneticIndex; }

private:
    bool m_gravityEffets;
    bool m_atmosphereDrag;
    bool m_solarPressure;
    bool m_albedo;
    bool m_IR;
    int m_Cr;
    bool m_thirdBody;
    QList<QString> m_perturbingBody;
    double m_dailyF10_7;
    double m_averageF10_7;
    double m_geomagneticIndex;
};


// ScenarioPerturbationsTorqueType
class ScenarioPerturbationsTorqueType : public ScenarioObject
{
public:
    ScenarioPerturbationsTorqueType();
    static ScenarioPerturbationsTorqueType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "PerturbationsTorqueType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    bool micrometeoroids() const
    { return m_micrometeoroids; }
    void setMicrometeoroids(bool micrometeoroids)
    { m_micrometeoroids = micrometeoroids; }
    bool microvibrations() const
    { return m_microvibrations; }
    void setMicrovibrations(bool microvibrations)
    { m_microvibrations = microvibrations; }

private:
    bool m_micrometeoroids;
    bool m_microvibrations;
};


// ScenarioTrajectoryStoppingConditionType
class ScenarioTrajectoryStoppingConditionType : public ScenarioObject
{
public:
    ScenarioTrajectoryStoppingConditionType();
    static ScenarioTrajectoryStoppingConditionType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "TrajectoryStoppingConditionType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QString ConditionIdentifier() const
    { return m_ConditionIdentifier; }
    void setConditionIdentifier(QString ConditionIdentifier)
    { m_ConditionIdentifier = ConditionIdentifier; }
    double ConditionValue() const
    { return m_ConditionValue; }
    void setConditionValue(double ConditionValue)
    { m_ConditionValue = ConditionValue; }
    QSharedPointer<ScenarioCentralBodyType> ConditionBody() const
    { return m_ConditionBody; }
    void setConditionBody(QSharedPointer<ScenarioCentralBodyType> ConditionBody)
    { m_ConditionBody = ConditionBody; }
    double ConditionTolerance() const
    { return m_ConditionTolerance; }
    void setConditionTolerance(double ConditionTolerance)
    { m_ConditionTolerance = ConditionTolerance; }

private:
    QString m_ConditionIdentifier;
    double m_ConditionValue;
    QSharedPointer<ScenarioCentralBodyType> m_ConditionBody;
    double m_ConditionTolerance;
};


// ScenarioAbstract3DOFPositionType
class ScenarioAbstract3DOFPositionType : public ScenarioObject
{
public:
    ScenarioAbstract3DOFPositionType();
    static ScenarioAbstract3DOFPositionType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "Abstract3DOFPositionType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;

private:
};


// ScenarioAbstract6DOFPositionType
class ScenarioAbstract6DOFPositionType : public ScenarioObject
{
public:
    ScenarioAbstract6DOFPositionType();
    static ScenarioAbstract6DOFPositionType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "Abstract6DOFPositionType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;

private:
};


// ScenarioGroundPositionType
class ScenarioGroundPositionType : public ScenarioAbstract3DOFPositionType
{
public:
    ScenarioGroundPositionType();
    static ScenarioGroundPositionType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "GroundPositionType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double latitude() const
    { return m_latitude; }
    void setLatitude(double latitude)
    { m_latitude = latitude; }
    double longitude() const
    { return m_longitude; }
    void setLongitude(double longitude)
    { m_longitude = longitude; }
    double altitude() const
    { return m_altitude; }
    void setAltitude(double altitude)
    { m_altitude = altitude; }

private:
    double m_latitude;
    double m_longitude;
    double m_altitude;
};


// ScenarioStateVectorType
class ScenarioStateVectorType : public ScenarioAbstract6DOFPositionType
{
public:
    ScenarioStateVectorType();
    static ScenarioStateVectorType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "StateVectorType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double x() const
    { return m_x; }
    void setX(double x)
    { m_x = x; }
    double y() const
    { return m_y; }
    void setY(double y)
    { m_y = y; }
    double z() const
    { return m_z; }
    void setZ(double z)
    { m_z = z; }
    double vx() const
    { return m_vx; }
    void setVx(double vx)
    { m_vx = vx; }
    double vy() const
    { return m_vy; }
    void setVy(double vy)
    { m_vy = vy; }
    double vz() const
    { return m_vz; }
    void setVz(double vz)
    { m_vz = vz; }

private:
    double m_x;
    double m_y;
    double m_z;
    double m_vx;
    double m_vy;
    double m_vz;
};


// ScenarioKeplerianElementsType
class ScenarioKeplerianElementsType : public ScenarioAbstract6DOFPositionType
{
public:
    ScenarioKeplerianElementsType();
    static ScenarioKeplerianElementsType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "KeplerianElementsType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double semiMajorAxis() const
    { return m_semiMajorAxis; }
    void setSemiMajorAxis(double semiMajorAxis)
    { m_semiMajorAxis = semiMajorAxis; }
    double eccentricity() const
    { return m_eccentricity; }
    void setEccentricity(double eccentricity)
    { m_eccentricity = eccentricity; }
    double inclination() const
    { return m_inclination; }
    void setInclination(double inclination)
    { m_inclination = inclination; }
    double RAAN() const
    { return m_RAAN; }
    void setRAAN(double RAAN)
    { m_RAAN = RAAN; }
    double argumentOfPeriapsis() const
    { return m_argumentOfPeriapsis; }
    void setArgumentOfPeriapsis(double argumentOfPeriapsis)
    { m_argumentOfPeriapsis = argumentOfPeriapsis; }
    double trueAnomaly() const
    { return m_trueAnomaly; }
    void setTrueAnomaly(double trueAnomaly)
    { m_trueAnomaly = trueAnomaly; }

private:
    double m_semiMajorAxis;
    double m_eccentricity;
    double m_inclination;
    double m_RAAN;
    double m_argumentOfPeriapsis;
    double m_trueAnomaly;
};


// ScenarioSphericalCoordinatesType
class ScenarioSphericalCoordinatesType : public ScenarioAbstract6DOFPositionType
{
public:
    ScenarioSphericalCoordinatesType();
    static ScenarioSphericalCoordinatesType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "SphericalCoordinatesType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double radialDistance() const
    { return m_radialDistance; }
    void setRadialDistance(double radialDistance)
    { m_radialDistance = radialDistance; }
    double longitude() const
    { return m_longitude; }
    void setLongitude(double longitude)
    { m_longitude = longitude; }
    double latitude() const
    { return m_latitude; }
    void setLatitude(double latitude)
    { m_latitude = latitude; }
    double flightPathVelocity() const
    { return m_flightPathVelocity; }
    void setFlightPathVelocity(double flightPathVelocity)
    { m_flightPathVelocity = flightPathVelocity; }
    double flightPathAngle() const
    { return m_flightPathAngle; }
    void setFlightPathAngle(double flightPathAngle)
    { m_flightPathAngle = flightPathAngle; }
    double headingAngle() const
    { return m_headingAngle; }
    void setHeadingAngle(double headingAngle)
    { m_headingAngle = headingAngle; }

private:
    double m_radialDistance;
    double m_longitude;
    double m_latitude;
    double m_flightPathVelocity;
    double m_flightPathAngle;
    double m_headingAngle;
};


// ScenarioAbstract6DOFAttitudeType
class ScenarioAbstract6DOFAttitudeType : public ScenarioObject
{
public:
    ScenarioAbstract6DOFAttitudeType();
    static ScenarioAbstract6DOFAttitudeType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "Abstract6DOFAttitudeType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;

private:
};


// ScenarioAbstract8DOFAttitudeType
class ScenarioAbstract8DOFAttitudeType : public ScenarioObject
{
public:
    ScenarioAbstract8DOFAttitudeType();
    static ScenarioAbstract8DOFAttitudeType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "Abstract8DOFAttitudeType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;

private:
};


// ScenarioEulerType
class ScenarioEulerType : public ScenarioAbstract6DOFAttitudeType
{
public:
    ScenarioEulerType();
    static ScenarioEulerType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "EulerType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double phi() const
    { return m_phi; }
    void setPhi(double phi)
    { m_phi = phi; }
    double theta() const
    { return m_theta; }
    void setTheta(double theta)
    { m_theta = theta; }
    double psi() const
    { return m_psi; }
    void setPsi(double psi)
    { m_psi = psi; }
    double phiDot() const
    { return m_phiDot; }
    void setPhiDot(double phiDot)
    { m_phiDot = phiDot; }
    double thetaDot() const
    { return m_thetaDot; }
    void setThetaDot(double thetaDot)
    { m_thetaDot = thetaDot; }
    double psiDot() const
    { return m_psiDot; }
    void setPsiDot(double psiDot)
    { m_psiDot = psiDot; }

private:
    double m_phi;
    double m_theta;
    double m_psi;
    double m_phiDot;
    double m_thetaDot;
    double m_psiDot;
};


// ScenarioQuaternionType
class ScenarioQuaternionType : public ScenarioAbstract8DOFAttitudeType
{
public:
    ScenarioQuaternionType();
    static ScenarioQuaternionType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "QuaternionType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double q1() const
    { return m_q1; }
    void setQ1(double q1)
    { m_q1 = q1; }
    double q2() const
    { return m_q2; }
    void setQ2(double q2)
    { m_q2 = q2; }
    double q3() const
    { return m_q3; }
    void setQ3(double q3)
    { m_q3 = q3; }
    double q4() const
    { return m_q4; }
    void setQ4(double q4)
    { m_q4 = q4; }
    double q1Dot() const
    { return m_q1Dot; }
    void setQ1Dot(double q1Dot)
    { m_q1Dot = q1Dot; }
    double q2Dot() const
    { return m_q2Dot; }
    void setQ2Dot(double q2Dot)
    { m_q2Dot = q2Dot; }
    double q3Dot() const
    { return m_q3Dot; }
    void setQ3Dot(double q3Dot)
    { m_q3Dot = q3Dot; }
    double q4Dot() const
    { return m_q4Dot; }
    void setQ4Dot(double q4Dot)
    { m_q4Dot = q4Dot; }

private:
    double m_q1;
    double m_q2;
    double m_q3;
    double m_q4;
    double m_q1Dot;
    double m_q2Dot;
    double m_q3Dot;
    double m_q4Dot;
};


// ScenarioAbstract12DOFStateType
class ScenarioAbstract12DOFStateType : public ScenarioObject
{
public:
    ScenarioAbstract12DOFStateType();
    static ScenarioAbstract12DOFStateType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "Abstract12DOFStateType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;

private:
};


// ScenarioState12DOF
class ScenarioState12DOF : public ScenarioAbstract12DOFStateType
{
public:
    ScenarioState12DOF();
    static ScenarioState12DOF* create(const QDomElement& e);
    virtual QString elementName() const
    { return "State12DOF"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioAbstract6DOFPositionType> Abstract6DOFPosition() const
    { return m_Abstract6DOFPosition; }
    void setAbstract6DOFPosition(QSharedPointer<ScenarioAbstract6DOFPositionType> Abstract6DOFPosition)
    { m_Abstract6DOFPosition = Abstract6DOFPosition; }
    QSharedPointer<ScenarioAbstract6DOFAttitudeType> Abstract6DOFAttitude() const
    { return m_Abstract6DOFAttitude; }
    void setAbstract6DOFAttitude(QSharedPointer<ScenarioAbstract6DOFAttitudeType> Abstract6DOFAttitude)
    { m_Abstract6DOFAttitude = Abstract6DOFAttitude; }

private:
    QSharedPointer<ScenarioAbstract6DOFPositionType> m_Abstract6DOFPosition;
    QSharedPointer<ScenarioAbstract6DOFAttitudeType> m_Abstract6DOFAttitude;
};


// ScenarioAbstract14DOFStateType
class ScenarioAbstract14DOFStateType : public ScenarioObject
{
public:
    ScenarioAbstract14DOFStateType();
    static ScenarioAbstract14DOFStateType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "Abstract14DOFStateType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;

private:
};


// ScenarioState14DOF
class ScenarioState14DOF : public ScenarioAbstract14DOFStateType
{
public:
    ScenarioState14DOF();
    static ScenarioState14DOF* create(const QDomElement& e);
    virtual QString elementName() const
    { return "State14DOF"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioAbstract6DOFPositionType> Abstract6DOFPosition() const
    { return m_Abstract6DOFPosition; }
    void setAbstract6DOFPosition(QSharedPointer<ScenarioAbstract6DOFPositionType> Abstract6DOFPosition)
    { m_Abstract6DOFPosition = Abstract6DOFPosition; }
    QSharedPointer<ScenarioAbstract8DOFAttitudeType> Abstract8DOFAttitude() const
    { return m_Abstract8DOFAttitude; }
    void setAbstract8DOFAttitude(QSharedPointer<ScenarioAbstract8DOFAttitudeType> Abstract8DOFAttitude)
    { m_Abstract8DOFAttitude = Abstract8DOFAttitude; }

private:
    QSharedPointer<ScenarioAbstract6DOFPositionType> m_Abstract6DOFPosition;
    QSharedPointer<ScenarioAbstract8DOFAttitudeType> m_Abstract8DOFAttitude;
};


// ScenarioTelescopeType
class ScenarioTelescopeType : public ScenarioObject
{
public:
    ScenarioTelescopeType();
    static ScenarioTelescopeType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "TelescopeType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioOpticalProperties> OpticalProperties() const
    { return m_OpticalProperties; }
    void setOpticalProperties(QSharedPointer<ScenarioOpticalProperties> OpticalProperties)
    { m_OpticalProperties = OpticalProperties; }

private:
    QSharedPointer<ScenarioOpticalProperties> m_OpticalProperties;
};


// ScenarioOpticalProperties
class ScenarioOpticalProperties : public ScenarioObject
{
public:
    ScenarioOpticalProperties();
    static ScenarioOpticalProperties* create(const QDomElement& e);
    virtual QString elementName() const
    { return "OpticalProperties"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double Diameter() const
    { return m_Diameter; }
    void setDiameter(double Diameter)
    { m_Diameter = Diameter; }
    double Efficiency() const
    { return m_Efficiency; }
    void setEfficiency(double Efficiency)
    { m_Efficiency = Efficiency; }

private:
    double m_Diameter;
    double m_Efficiency;
};


// ScenarioRadarType
class ScenarioRadarType : public ScenarioObject
{
public:
    ScenarioRadarType();
    static ScenarioRadarType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "RadarType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioRadarProperties> RadarProperties() const
    { return m_RadarProperties; }
    void setRadarProperties(QSharedPointer<ScenarioRadarProperties> RadarProperties)
    { m_RadarProperties = RadarProperties; }

private:
    QSharedPointer<ScenarioRadarProperties> m_RadarProperties;
};


// ScenarioRadarProperties
class ScenarioRadarProperties : public ScenarioObject
{
public:
    ScenarioRadarProperties();
    static ScenarioRadarProperties* create(const QDomElement& e);
    virtual QString elementName() const
    { return "RadarProperties"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double GainMax() const
    { return m_GainMax; }
    void setGainMax(double GainMax)
    { m_GainMax = GainMax; }
    QString Polarisation() const
    { return m_Polarisation; }
    void setPolarisation(QString Polarisation)
    { m_Polarisation = Polarisation; }
    double TiltAngle() const
    { return m_TiltAngle; }
    void setTiltAngle(double TiltAngle)
    { m_TiltAngle = TiltAngle; }
    double AreaEff() const
    { return m_AreaEff; }
    void setAreaEff(double AreaEff)
    { m_AreaEff = AreaEff; }
    double Diameter() const
    { return m_Diameter; }
    void setDiameter(double Diameter)
    { m_Diameter = Diameter; }
    double Efficiency() const
    { return m_Efficiency; }
    void setEfficiency(double Efficiency)
    { m_Efficiency = Efficiency; }
    double AngularBeamWidth() const
    { return m_AngularBeamWidth; }
    void setAngularBeamWidth(double AngularBeamWidth)
    { m_AngularBeamWidth = AngularBeamWidth; }

private:
    double m_GainMax;
    QString m_Polarisation;
    double m_TiltAngle;
    double m_AreaEff;
    double m_Diameter;
    double m_Efficiency;
    double m_AngularBeamWidth;
};


// ScenarioCoverageType
class ScenarioCoverageType : public ScenarioObject
{
public:
    ScenarioCoverageType();
    static ScenarioCoverageType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "CoverageType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QString FrustumShape() const
    { return m_FrustumShape; }
    void setFrustumShape(QString FrustumShape)
    { m_FrustumShape = FrustumShape; }
    double FrustumAngle1() const
    { return m_FrustumAngle1; }
    void setFrustumAngle1(double FrustumAngle1)
    { m_FrustumAngle1 = FrustumAngle1; }
    double FrustumAngle2() const
    { return m_FrustumAngle2; }
    void setFrustumAngle2(double FrustumAngle2)
    { m_FrustumAngle2 = FrustumAngle2; }

private:
    QString m_FrustumShape;
    double m_FrustumAngle1;
    double m_FrustumAngle2;
};


// ScenarioAntennaType
class ScenarioAntennaType : public ScenarioObject
{
public:
    ScenarioAntennaType();
    static ScenarioAntennaType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "AntennaType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioPointingDirection> PointingDirection() const
    { return m_PointingDirection; }
    void setPointingDirection(QSharedPointer<ScenarioPointingDirection> PointingDirection)
    { m_PointingDirection = PointingDirection; }
    QSharedPointer<ScenarioEMproperties> EMproperties() const
    { return m_EMproperties; }
    void setEMproperties(QSharedPointer<ScenarioEMproperties> EMproperties)
    { m_EMproperties = EMproperties; }
    QSharedPointer<ScenarioCoverageType> Coverage() const
    { return m_Coverage; }
    void setCoverage(QSharedPointer<ScenarioCoverageType> Coverage)
    { m_Coverage = Coverage; }

private:
    QSharedPointer<ScenarioPointingDirection> m_PointingDirection;
    QSharedPointer<ScenarioEMproperties> m_EMproperties;
    QSharedPointer<ScenarioCoverageType> m_Coverage;
};


// ScenarioPointingDirection
class ScenarioPointingDirection : public ScenarioObject
{
public:
    ScenarioPointingDirection();
    static ScenarioPointingDirection* create(const QDomElement& e);
    virtual QString elementName() const
    { return "PointingDirection"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QString referenceSystem() const
    { return m_referenceSystem; }
    void setReferenceSystem(QString referenceSystem)
    { m_referenceSystem = referenceSystem; }
    double azimuth() const
    { return m_azimuth; }
    void setAzimuth(double azimuth)
    { m_azimuth = azimuth; }
    double elevation() const
    { return m_elevation; }
    void setElevation(double elevation)
    { m_elevation = elevation; }
    double azimuthDot() const
    { return m_azimuthDot; }
    void setAzimuthDot(double azimuthDot)
    { m_azimuthDot = azimuthDot; }
    double elevationDot() const
    { return m_elevationDot; }
    void setElevationDot(double elevationDot)
    { m_elevationDot = elevationDot; }
    double coneAngle() const
    { return m_coneAngle; }
    void setConeAngle(double coneAngle)
    { m_coneAngle = coneAngle; }
    int coneShape() const
    { return m_coneShape; }
    void setConeShape(int coneShape)
    { m_coneShape = coneShape; }

private:
    QString m_referenceSystem;
    double m_azimuth;
    double m_elevation;
    double m_azimuthDot;
    double m_elevationDot;
    double m_coneAngle;
    int m_coneShape;
};


// ScenarioEMproperties
class ScenarioEMproperties : public ScenarioObject
{
public:
    ScenarioEMproperties();
    static ScenarioEMproperties* create(const QDomElement& e);
    virtual QString elementName() const
    { return "EMproperties"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double GainMax() const
    { return m_GainMax; }
    void setGainMax(double GainMax)
    { m_GainMax = GainMax; }
    QString Polarisation() const
    { return m_Polarisation; }
    void setPolarisation(QString Polarisation)
    { m_Polarisation = Polarisation; }
    double TiltAngle() const
    { return m_TiltAngle; }
    void setTiltAngle(double TiltAngle)
    { m_TiltAngle = TiltAngle; }
    double AreaEff() const
    { return m_AreaEff; }
    void setAreaEff(double AreaEff)
    { m_AreaEff = AreaEff; }
    double Diameter() const
    { return m_Diameter; }
    void setDiameter(double Diameter)
    { m_Diameter = Diameter; }
    double Efficiency() const
    { return m_Efficiency; }
    void setEfficiency(double Efficiency)
    { m_Efficiency = Efficiency; }
    double AngularBeamWidth() const
    { return m_AngularBeamWidth; }
    void setAngularBeamWidth(double AngularBeamWidth)
    { m_AngularBeamWidth = AngularBeamWidth; }
    double BandWidth() const
    { return m_BandWidth; }
    void setBandWidth(double BandWidth)
    { m_BandWidth = BandWidth; }
    QString BeamType() const
    { return m_BeamType; }
    void setBeamType(QString BeamType)
    { m_BeamType = BeamType; }

private:
    double m_GainMax;
    QString m_Polarisation;
    double m_TiltAngle;
    double m_AreaEff;
    double m_Diameter;
    double m_Efficiency;
    double m_AngularBeamWidth;
    double m_BandWidth;
    QString m_BeamType;
};


// ScenarioBudgetType
class ScenarioBudgetType : public ScenarioObject
{
public:
    ScenarioBudgetType();
    static ScenarioBudgetType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "BudgetType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double Mass() const
    { return m_Mass; }
    void setMass(double Mass)
    { m_Mass = Mass; }
    QSharedPointer<ScenarioPower> Power() const
    { return m_Power; }
    void setPower(QSharedPointer<ScenarioPower> Power)
    { m_Power = Power; }
    QSharedPointer<ScenarioSize> Size() const
    { return m_Size; }
    void setSize(QSharedPointer<ScenarioSize> Size)
    { m_Size = Size; }
    QSharedPointer<ScenarioTemperatureRange> TemperatureRange() const
    { return m_TemperatureRange; }
    void setTemperatureRange(QSharedPointer<ScenarioTemperatureRange> TemperatureRange)
    { m_TemperatureRange = TemperatureRange; }
    double DataRate() const
    { return m_DataRate; }
    void setDataRate(double DataRate)
    { m_DataRate = DataRate; }
    double FrequencyBand() const
    { return m_FrequencyBand; }
    void setFrequencyBand(double FrequencyBand)
    { m_FrequencyBand = FrequencyBand; }

private:
    double m_Mass;
    QSharedPointer<ScenarioPower> m_Power;
    QSharedPointer<ScenarioSize> m_Size;
    QSharedPointer<ScenarioTemperatureRange> m_TemperatureRange;
    double m_DataRate;
    double m_FrequencyBand;
};


// ScenarioPower
class ScenarioPower : public ScenarioObject
{
public:
    ScenarioPower();
    static ScenarioPower* create(const QDomElement& e);
    virtual QString elementName() const
    { return "Power"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double powerConsumptionInEclipse() const
    { return m_powerConsumptionInEclipse; }
    void setPowerConsumptionInEclipse(double powerConsumptionInEclipse)
    { m_powerConsumptionInEclipse = powerConsumptionInEclipse; }
    double powerConsumptionInDaylight() const
    { return m_powerConsumptionInDaylight; }
    void setPowerConsumptionInDaylight(double powerConsumptionInDaylight)
    { m_powerConsumptionInDaylight = powerConsumptionInDaylight; }
    double powerOnPercentageInEclipse() const
    { return m_powerOnPercentageInEclipse; }
    void setPowerOnPercentageInEclipse(double powerOnPercentageInEclipse)
    { m_powerOnPercentageInEclipse = powerOnPercentageInEclipse; }
    double powerOnPercentageInDaylight() const
    { return m_powerOnPercentageInDaylight; }
    void setPowerOnPercentageInDaylight(double powerOnPercentageInDaylight)
    { m_powerOnPercentageInDaylight = powerOnPercentageInDaylight; }

private:
    double m_powerConsumptionInEclipse;
    double m_powerConsumptionInDaylight;
    double m_powerOnPercentageInEclipse;
    double m_powerOnPercentageInDaylight;
};


// ScenarioSize
class ScenarioSize : public ScenarioObject
{
public:
    ScenarioSize();
    static ScenarioSize* create(const QDomElement& e);
    virtual QString elementName() const
    { return "Size"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double Width() const
    { return m_Width; }
    void setWidth(double Width)
    { m_Width = Width; }
    double Length() const
    { return m_Length; }
    void setLength(double Length)
    { m_Length = Length; }
    double Height() const
    { return m_Height; }
    void setHeight(double Height)
    { m_Height = Height; }

private:
    double m_Width;
    double m_Length;
    double m_Height;
};


// ScenarioTemperatureRange
class ScenarioTemperatureRange : public ScenarioObject
{
public:
    ScenarioTemperatureRange();
    static ScenarioTemperatureRange* create(const QDomElement& e);
    virtual QString elementName() const
    { return "TemperatureRange"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double MinimumTemperature() const
    { return m_MinimumTemperature; }
    void setMinimumTemperature(double MinimumTemperature)
    { m_MinimumTemperature = MinimumTemperature; }
    double MaximumTemperature() const
    { return m_MaximumTemperature; }
    void setMaximumTemperature(double MaximumTemperature)
    { m_MaximumTemperature = MaximumTemperature; }

private:
    double m_MinimumTemperature;
    double m_MaximumTemperature;
};


// ScenarioTransmitter
class ScenarioTransmitter : public ScenarioAntennaType
{
public:
    ScenarioTransmitter();
    static ScenarioTransmitter* create(const QDomElement& e);
    virtual QString elementName() const
    { return "Transmitter"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    bool ObservationChecked() const
    { return m_ObservationChecked; }
    void setObservationChecked(bool ObservationChecked)
    { m_ObservationChecked = ObservationChecked; }
    double FedderLossTx() const
    { return m_FedderLossTx; }
    void setFedderLossTx(double FedderLossTx)
    { m_FedderLossTx = FedderLossTx; }
    double DepointingLossTx() const
    { return m_DepointingLossTx; }
    void setDepointingLossTx(double DepointingLossTx)
    { m_DepointingLossTx = DepointingLossTx; }
    double TransmittingPower() const
    { return m_TransmittingPower; }
    void setTransmittingPower(double TransmittingPower)
    { m_TransmittingPower = TransmittingPower; }
    QSharedPointer<ScenarioModulation> Modulation() const
    { return m_Modulation; }
    void setModulation(QSharedPointer<ScenarioModulation> Modulation)
    { m_Modulation = Modulation; }

private:
    bool m_ObservationChecked;
    double m_FedderLossTx;
    double m_DepointingLossTx;
    double m_TransmittingPower;
    QSharedPointer<ScenarioModulation> m_Modulation;
};


// ScenarioModulation
class ScenarioModulation : public ScenarioObject
{
public:
    ScenarioModulation();
    static ScenarioModulation* create(const QDomElement& e);
    virtual QString elementName() const
    { return "Modulation"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QString ModulationType() const
    { return m_ModulationType; }
    void setModulationType(QString ModulationType)
    { m_ModulationType = ModulationType; }
    double DataRate() const
    { return m_DataRate; }
    void setDataRate(double DataRate)
    { m_DataRate = DataRate; }

private:
    QString m_ModulationType;
    double m_DataRate;
};


// ScenarioReceiver
class ScenarioReceiver : public ScenarioAntennaType
{
public:
    ScenarioReceiver();
    static ScenarioReceiver* create(const QDomElement& e);
    virtual QString elementName() const
    { return "Receiver"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double GoverT() const
    { return m_GoverT; }
    void setGoverT(double GoverT)
    { m_GoverT = GoverT; }
    double FeederLossRx() const
    { return m_FeederLossRx; }
    void setFeederLossRx(double FeederLossRx)
    { m_FeederLossRx = FeederLossRx; }
    double DepointingLossRx() const
    { return m_DepointingLossRx; }
    void setDepointingLossRx(double DepointingLossRx)
    { m_DepointingLossRx = DepointingLossRx; }
    QSharedPointer<ScenarioSystemTemperature> SystemTemperature() const
    { return m_SystemTemperature; }
    void setSystemTemperature(QSharedPointer<ScenarioSystemTemperature> SystemTemperature)
    { m_SystemTemperature = SystemTemperature; }

private:
    double m_GoverT;
    double m_FeederLossRx;
    double m_DepointingLossRx;
    QSharedPointer<ScenarioSystemTemperature> m_SystemTemperature;
};


// ScenarioSystemTemperature
class ScenarioSystemTemperature : public ScenarioObject
{
public:
    ScenarioSystemTemperature();
    static ScenarioSystemTemperature* create(const QDomElement& e);
    virtual QString elementName() const
    { return "SystemTemperature"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QString choiceTantenna() const
    { return m_choiceTantenna; }
    void setChoiceTantenna(QString choiceTantenna)
    { m_choiceTantenna = choiceTantenna; }
    double Tantenna() const
    { return m_Tantenna; }
    void setTantenna(double Tantenna)
    { m_Tantenna = Tantenna; }
    double RxNoiseFigure() const
    { return m_RxNoiseFigure; }
    void setRxNoiseFigure(double RxNoiseFigure)
    { m_RxNoiseFigure = RxNoiseFigure; }
    double ThermoFeeder() const
    { return m_ThermoFeeder; }
    void setThermoFeeder(double ThermoFeeder)
    { m_ThermoFeeder = ThermoFeeder; }
    double ThermoReveicer() const
    { return m_ThermoReveicer; }
    void setThermoReveicer(double ThermoReveicer)
    { m_ThermoReveicer = ThermoReveicer; }
    double TotalSystemTemp() const
    { return m_TotalSystemTemp; }
    void setTotalSystemTemp(double TotalSystemTemp)
    { m_TotalSystemTemp = TotalSystemTemp; }

private:
    QString m_choiceTantenna;
    double m_Tantenna;
    double m_RxNoiseFigure;
    double m_ThermoFeeder;
    double m_ThermoReveicer;
    double m_TotalSystemTemp;
};


// ScenarioAeroCoefFileType
class ScenarioAeroCoefFileType : public ScenarioObject
{
public:
    ScenarioAeroCoefFileType();
    static ScenarioAeroCoefFileType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "AeroCoefFileType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QString FileLocation() const
    { return m_FileLocation; }
    void setFileLocation(QString FileLocation)
    { m_FileLocation = FileLocation; }
    QString CoefName() const
    { return m_CoefName; }
    void setCoefName(QString CoefName)
    { m_CoefName = CoefName; }
    int NumberOfIndepVars() const
    { return m_NumberOfIndepVars; }
    void setNumberOfIndepVars(int NumberOfIndepVars)
    { m_NumberOfIndepVars = NumberOfIndepVars; }
    const QList<QString>& IndepVarNames() const
    { return m_IndepVarNames; }
    QList<QString>& IndepVarNames()
    { return m_IndepVarNames; }
    void setIndepVarNames(QList<QString> IndepVarNames)
    { m_IndepVarNames = IndepVarNames; }
    const QList<int>& IndepVarDiscretizationPoints() const
    { return m_IndepVarDiscretizationPoints; }
    QList<int>& IndepVarDiscretizationPoints()
    { return m_IndepVarDiscretizationPoints; }
    void setIndepVarDiscretizationPoints(QList<int> IndepVarDiscretizationPoints)
    { m_IndepVarDiscretizationPoints = IndepVarDiscretizationPoints; }
    const QList<double>& IndepVarMin() const
    { return m_IndepVarMin; }
    QList<double>& IndepVarMin()
    { return m_IndepVarMin; }
    void setIndepVarMin(QList<double> IndepVarMin)
    { m_IndepVarMin = IndepVarMin; }
    const QList<double>& IndepVarMax() const
    { return m_IndepVarMax; }
    QList<double>& IndepVarMax()
    { return m_IndepVarMax; }
    void setIndepVarMax(QList<double> IndepVarMax)
    { m_IndepVarMax = IndepVarMax; }

private:
    QString m_FileLocation;
    QString m_CoefName;
    int m_NumberOfIndepVars;
    QList<QString> m_IndepVarNames;
    QList<int> m_IndepVarDiscretizationPoints;
    QList<double> m_IndepVarMin;
    QList<double> m_IndepVarMax;
};


// ScenarioOptVarDouble
class ScenarioOptVarDouble : public ScenarioObject
{
public:
    ScenarioOptVarDouble();
    static ScenarioOptVarDouble* create(const QDomElement& e);
    virtual QString elementName() const
    { return "OptVarDouble"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double min() const
    { return m_min; }
    void setMin(double min)
    { m_min = min; }
    double value() const
    { return m_value; }
    void setValue(double value)
    { m_value = value; }
    double max() const
    { return m_max; }
    void setMax(double max)
    { m_max = max; }

private:
    double m_min;
    double m_value;
    double m_max;
};


// ScenarioOptVarInt
class ScenarioOptVarInt : public ScenarioObject
{
public:
    ScenarioOptVarInt();
    static ScenarioOptVarInt* create(const QDomElement& e);
    virtual QString elementName() const
    { return "OptVarInt"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    const QList<int>& list() const
    { return m_list; }
    QList<int>& list()
    { return m_list; }
    void setList(QList<int> list)
    { m_list = list; }
    int value() const
    { return m_value; }
    void setValue(int value)
    { m_value = value; }

private:
    QList<int> m_list;
    int m_value;
};


// ScenarioOptVarBool
class ScenarioOptVarBool : public ScenarioObject
{
public:
    ScenarioOptVarBool();
    static ScenarioOptVarBool* create(const QDomElement& e);
    virtual QString elementName() const
    { return "OptVarBool"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    bool value() const
    { return m_value; }
    void setValue(bool value)
    { m_value = value; }

private:
    bool m_value;
};


// ScenarioOptVarString
class ScenarioOptVarString : public ScenarioObject
{
public:
    ScenarioOptVarString();
    static ScenarioOptVarString* create(const QDomElement& e);
    virtual QString elementName() const
    { return "OptVarString"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    const QList<QString>& list() const
    { return m_list; }
    QList<QString>& list()
    { return m_list; }
    void setList(QList<QString> list)
    { m_list = list; }
    QString value() const
    { return m_value; }
    void setValue(QString value)
    { m_value = value; }

private:
    QList<QString> m_list;
    QString m_value;
};


// ScenarioOptimization
class ScenarioOptimization : public ScenarioObject
{
public:
    ScenarioOptimization();
    static ScenarioOptimization* create(const QDomElement& e);
    virtual QString elementName() const
    { return "Optimization"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    int nVariables() const
    { return m_nVariables; }
    void setNVariables(int nVariables)
    { m_nVariables = nVariables; }
    const QList<QString>& variables() const
    { return m_variables; }
    QList<QString>& variables()
    { return m_variables; }
    void setVariables(QList<QString> variables)
    { m_variables = variables; }
    const QList<double>& variablesMatrix() const
    { return m_variablesMatrix; }
    QList<double>& variablesMatrix()
    { return m_variablesMatrix; }
    void setVariablesMatrix(QList<double> variablesMatrix)
    { m_variablesMatrix = variablesMatrix; }
    int nObjectives() const
    { return m_nObjectives; }
    void setNObjectives(int nObjectives)
    { m_nObjectives = nObjectives; }
    const QList<QString>& objectives() const
    { return m_objectives; }
    QList<QString>& objectives()
    { return m_objectives; }
    void setObjectives(QList<QString> objectives)
    { m_objectives = objectives; }
    const QList<double>& objectivesMatrix() const
    { return m_objectivesMatrix; }
    QList<double>& objectivesMatrix()
    { return m_objectivesMatrix; }
    void setObjectivesMatrix(QList<double> objectivesMatrix)
    { m_objectivesMatrix = objectivesMatrix; }
    int nConstraints() const
    { return m_nConstraints; }
    void setNConstraints(int nConstraints)
    { m_nConstraints = nConstraints; }
    const QList<QString>& constraints() const
    { return m_constraints; }
    QList<QString>& constraints()
    { return m_constraints; }
    void setConstraints(QList<QString> constraints)
    { m_constraints = constraints; }
    const QList<double>& constraintsMatrix() const
    { return m_constraintsMatrix; }
    QList<double>& constraintsMatrix()
    { return m_constraintsMatrix; }
    void setConstraintsMatrix(QList<double> constraintsMatrix)
    { m_constraintsMatrix = constraintsMatrix; }
    QString algorithm() const
    { return m_algorithm; }
    void setAlgorithm(QString algorithm)
    { m_algorithm = algorithm; }
    const QList<double>& algorithmParameters() const
    { return m_algorithmParameters; }
    QList<double>& algorithmParameters()
    { return m_algorithmParameters; }
    void setAlgorithmParameters(QList<double> algorithmParameters)
    { m_algorithmParameters = algorithmParameters; }

private:
    int m_nVariables;
    QList<QString> m_variables;
    QList<double> m_variablesMatrix;
    int m_nObjectives;
    QList<QString> m_objectives;
    QList<double> m_objectivesMatrix;
    int m_nConstraints;
    QList<QString> m_constraints;
    QList<double> m_constraintsMatrix;
    QString m_algorithm;
    QList<double> m_algorithmParameters;
};


// ScenarioOutputFiles
class ScenarioOutputFiles : public ScenarioObject
{
public:
    ScenarioOutputFiles();
    static ScenarioOutputFiles* create(const QDomElement& e);
    virtual QString elementName() const
    { return "OutputFiles"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QString paretoFrontVarsFileName() const
    { return m_paretoFrontVarsFileName; }
    void setParetoFrontVarsFileName(QString paretoFrontVarsFileName)
    { m_paretoFrontVarsFileName = paretoFrontVarsFileName; }
    QString paretoFrontCstrsFileName() const
    { return m_paretoFrontCstrsFileName; }
    void setParetoFrontCstrsFileName(QString paretoFrontCstrsFileName)
    { m_paretoFrontCstrsFileName = paretoFrontCstrsFileName; }
    QString paretoFrontObjsFileName() const
    { return m_paretoFrontObjsFileName; }
    void setParetoFrontObjsFileName(QString paretoFrontObjsFileName)
    { m_paretoFrontObjsFileName = paretoFrontObjsFileName; }
    QString geometryFileName() const
    { return m_geometryFileName; }
    void setGeometryFileName(QString geometryFileName)
    { m_geometryFileName = geometryFileName; }
    QString trajPostionFileName() const
    { return m_trajPostionFileName; }
    void setTrajPostionFileName(QString trajPostionFileName)
    { m_trajPostionFileName = trajPostionFileName; }
    QString trajAttitudeFileName() const
    { return m_trajAttitudeFileName; }
    void setTrajAttitudeFileName(QString trajAttitudeFileName)
    { m_trajAttitudeFileName = trajAttitudeFileName; }
    QString trajMiscFileName() const
    { return m_trajMiscFileName; }
    void setTrajMiscFileName(QString trajMiscFileName)
    { m_trajMiscFileName = trajMiscFileName; }
    QString successProbabilityFileName() const
    { return m_successProbabilityFileName; }
    void setSuccessProbabilityFileName(QString successProbabilityFileName)
    { m_successProbabilityFileName = successProbabilityFileName; }

private:
    QString m_paretoFrontVarsFileName;
    QString m_paretoFrontCstrsFileName;
    QString m_paretoFrontObjsFileName;
    QString m_geometryFileName;
    QString m_trajPostionFileName;
    QString m_trajAttitudeFileName;
    QString m_trajMiscFileName;
    QString m_successProbabilityFileName;
};


// ScenarioGroundStation
class ScenarioGroundStation : public ScenarioParticipantType
{
public:
    ScenarioGroundStation();
    static ScenarioGroundStation* create(const QDomElement& e);
    virtual QString elementName() const
    { return "GroundStation"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioElementIdentifierType> ElementIdentifier() const
    { return m_ElementIdentifier; }
    void setElementIdentifier(QSharedPointer<ScenarioElementIdentifierType> ElementIdentifier)
    { m_ElementIdentifier = ElementIdentifier; }
    QSharedPointer<ScenarioLocationType> Location() const
    { return m_Location; }
    void setLocation(QSharedPointer<ScenarioLocationType> Location)
    { m_Location = Location; }
    QSharedPointer<ScenarioPayloadSet> PayloadSet() const
    { return m_PayloadSet; }
    void setPayloadSet(QSharedPointer<ScenarioPayloadSet> PayloadSet)
    { m_PayloadSet = PayloadSet; }
    QSharedPointer<ScenarioGroundStationEnvironment> GroundStationEnvironment() const
    { return m_GroundStationEnvironment; }
    void setGroundStationEnvironment(QSharedPointer<ScenarioGroundStationEnvironment> GroundStationEnvironment)
    { m_GroundStationEnvironment = GroundStationEnvironment; }

private:
    QSharedPointer<ScenarioElementIdentifierType> m_ElementIdentifier;
    QSharedPointer<ScenarioLocationType> m_Location;
    QSharedPointer<ScenarioPayloadSet> m_PayloadSet;
    QSharedPointer<ScenarioGroundStationEnvironment> m_GroundStationEnvironment;
};


// ScenarioGroundStationEnvironment
class ScenarioGroundStationEnvironment : public ScenarioObject
{
public:
    ScenarioGroundStationEnvironment();
    static ScenarioGroundStationEnvironment* create(const QDomElement& e);
    virtual QString elementName() const
    { return "GroundStationEnvironment"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioRain> Rain() const
    { return m_Rain; }
    void setRain(QSharedPointer<ScenarioRain> Rain)
    { m_Rain = Rain; }
    double OxygenAtt() const
    { return m_OxygenAtt; }
    void setOxygenAtt(double OxygenAtt)
    { m_OxygenAtt = OxygenAtt; }
    QString OxChoice() const
    { return m_OxChoice; }
    void setOxChoice(QString OxChoice)
    { m_OxChoice = OxChoice; }
    double WaterVapourAtt() const
    { return m_WaterVapourAtt; }
    void setWaterVapourAtt(double WaterVapourAtt)
    { m_WaterVapourAtt = WaterVapourAtt; }
    QString WaterVapourChoice() const
    { return m_WaterVapourChoice; }
    void setWaterVapourChoice(QString WaterVapourChoice)
    { m_WaterVapourChoice = WaterVapourChoice; }

private:
    QSharedPointer<ScenarioRain> m_Rain;
    double m_OxygenAtt;
    QString m_OxChoice;
    double m_WaterVapourAtt;
    QString m_WaterVapourChoice;
};


// ScenarioRain
class ScenarioRain : public ScenarioObject
{
public:
    ScenarioRain();
    static ScenarioRain* create(const QDomElement& e);
    virtual QString elementName() const
    { return "Rain"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double PercentageExceededLimit() const
    { return m_PercentageExceededLimit; }
    void setPercentageExceededLimit(double PercentageExceededLimit)
    { m_PercentageExceededLimit = PercentageExceededLimit; }
    QString RainChoice() const
    { return m_RainChoice; }
    void setRainChoice(QString RainChoice)
    { m_RainChoice = RainChoice; }

private:
    double m_PercentageExceededLimit;
    QString m_RainChoice;
};


// ScenarioLaunchPad
class ScenarioLaunchPad : public ScenarioParticipantType
{
public:
    ScenarioLaunchPad();
    static ScenarioLaunchPad* create(const QDomElement& e);
    virtual QString elementName() const
    { return "LaunchPad"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioElementIdentifierType> ElementIdentifier() const
    { return m_ElementIdentifier; }
    void setElementIdentifier(QSharedPointer<ScenarioElementIdentifierType> ElementIdentifier)
    { m_ElementIdentifier = ElementIdentifier; }
    QSharedPointer<ScenarioLocationType> Location() const
    { return m_Location; }
    void setLocation(QSharedPointer<ScenarioLocationType> Location)
    { m_Location = Location; }
    QSharedPointer<ScenarioPayloadSet> PayloadSet() const
    { return m_PayloadSet; }
    void setPayloadSet(QSharedPointer<ScenarioPayloadSet> PayloadSet)
    { m_PayloadSet = PayloadSet; }
    double clearingAltitude() const
    { return m_clearingAltitude; }
    void setClearingAltitude(double clearingAltitude)
    { m_clearingAltitude = clearingAltitude; }

private:
    QSharedPointer<ScenarioElementIdentifierType> m_ElementIdentifier;
    QSharedPointer<ScenarioLocationType> m_Location;
    QSharedPointer<ScenarioPayloadSet> m_PayloadSet;
    double m_clearingAltitude;
};


// ScenarioPoint
class ScenarioPoint : public ScenarioParticipantType
{
public:
    ScenarioPoint();
    static ScenarioPoint* create(const QDomElement& e);
    virtual QString elementName() const
    { return "Point"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioElementIdentifierType> ElementIdentifier() const
    { return m_ElementIdentifier; }
    void setElementIdentifier(QSharedPointer<ScenarioElementIdentifierType> ElementIdentifier)
    { m_ElementIdentifier = ElementIdentifier; }
    QSharedPointer<ScenarioLocationType> Location() const
    { return m_Location; }
    void setLocation(QSharedPointer<ScenarioLocationType> Location)
    { m_Location = Location; }
    QSharedPointer<ScenarioPayloadSet> PayloadSet() const
    { return m_PayloadSet; }
    void setPayloadSet(QSharedPointer<ScenarioPayloadSet> PayloadSet)
    { m_PayloadSet = PayloadSet; }

private:
    QSharedPointer<ScenarioElementIdentifierType> m_ElementIdentifier;
    QSharedPointer<ScenarioLocationType> m_Location;
    QSharedPointer<ScenarioPayloadSet> m_PayloadSet;
};


// ScenarioRegion
class ScenarioRegion : public ScenarioParticipantType
{
public:
    ScenarioRegion();
    static ScenarioRegion* create(const QDomElement& e);
    virtual QString elementName() const
    { return "Region"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioElementIdentifierType> ElementIdentifier() const
    { return m_ElementIdentifier; }
    void setElementIdentifier(QSharedPointer<ScenarioElementIdentifierType> ElementIdentifier)
    { m_ElementIdentifier = ElementIdentifier; }
    QString CentralBody() const
    { return m_CentralBody; }
    void setCentralBody(QString CentralBody)
    { m_CentralBody = CentralBody; }
    const QList<double>& Boundary() const
    { return m_Boundary; }
    QList<double>& Boundary()
    { return m_Boundary; }
    void setBoundary(QList<double> Boundary)
    { m_Boundary = Boundary; }

private:
    QSharedPointer<ScenarioElementIdentifierType> m_ElementIdentifier;
    QString m_CentralBody;
    QList<double> m_Boundary;
};


// ScenarioLocationType
class ScenarioLocationType : public ScenarioObject
{
public:
    ScenarioLocationType();
    static ScenarioLocationType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "LocationType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QString CentralBody() const
    { return m_CentralBody; }
    void setCentralBody(QString CentralBody)
    { m_CentralBody = CentralBody; }
    QSharedPointer<ScenarioAbstract3DOFPositionType> Abstract3DOFPosition() const
    { return m_Abstract3DOFPosition; }
    void setAbstract3DOFPosition(QSharedPointer<ScenarioAbstract3DOFPositionType> Abstract3DOFPosition)
    { m_Abstract3DOFPosition = Abstract3DOFPosition; }

private:
    QString m_CentralBody;
    QSharedPointer<ScenarioAbstract3DOFPositionType> m_Abstract3DOFPosition;
};


// ScenarioLV
class ScenarioLV : public ScenarioParticipantType
{
public:
    ScenarioLV();
    static ScenarioLV* create(const QDomElement& e);
    virtual QString elementName() const
    { return "LV"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioLVProgramType> Program() const
    { return m_Program; }
    void setProgram(QSharedPointer<ScenarioLVProgramType> Program)
    { m_Program = Program; }
    QSharedPointer<ScenarioLVMissionType> Mission() const
    { return m_Mission; }
    void setMission(QSharedPointer<ScenarioLVMissionType> Mission)
    { m_Mission = Mission; }
    QSharedPointer<ScenarioLVSystemType> System() const
    { return m_System; }
    void setSystem(QSharedPointer<ScenarioLVSystemType> System)
    { m_System = System; }
    QSharedPointer<ScenarioOptimization> Optimization() const
    { return m_Optimization; }
    void setOptimization(QSharedPointer<ScenarioOptimization> Optimization)
    { m_Optimization = Optimization; }
    QSharedPointer<ScenarioOutputFiles> OutputFiles() const
    { return m_OutputFiles; }
    void setOutputFiles(QSharedPointer<ScenarioOutputFiles> OutputFiles)
    { m_OutputFiles = OutputFiles; }
    QString Appearance() const
    { return m_Appearance; }
    void setAppearance(QString Appearance)
    { m_Appearance = Appearance; }

private:
    QSharedPointer<ScenarioLVProgramType> m_Program;
    QSharedPointer<ScenarioLVMissionType> m_Mission;
    QSharedPointer<ScenarioLVSystemType> m_System;
    QSharedPointer<ScenarioOptimization> m_Optimization;
    QSharedPointer<ScenarioOutputFiles> m_OutputFiles;
    QString m_Appearance;
};


// ScenarioLVProgramType
class ScenarioLVProgramType : public ScenarioObject
{
public:
    ScenarioLVProgramType();
    static ScenarioLVProgramType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "LVProgramType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    int nLaunches() const
    { return m_nLaunches; }
    void setNLaunches(int nLaunches)
    { m_nLaunches = nLaunches; }
    double nYearsOps() const
    { return m_nYearsOps; }
    void setNYearsOps(double nYearsOps)
    { m_nYearsOps = nYearsOps; }
    int nLaunchesPerYear() const
    { return m_nLaunchesPerYear; }
    void setNLaunchesPerYear(int nLaunchesPerYear)
    { m_nLaunchesPerYear = nLaunchesPerYear; }
    QSharedPointer<ScenarioLVProgramCostFactorsType> ProgramCostFactors() const
    { return m_ProgramCostFactors; }
    void setProgramCostFactors(QSharedPointer<ScenarioLVProgramCostFactorsType> ProgramCostFactors)
    { m_ProgramCostFactors = ProgramCostFactors; }

private:
    int m_nLaunches;
    double m_nYearsOps;
    int m_nLaunchesPerYear;
    QSharedPointer<ScenarioLVProgramCostFactorsType> m_ProgramCostFactors;
};


// ScenarioLVMissionType
class ScenarioLVMissionType : public ScenarioObject
{
public:
    ScenarioLVMissionType();
    static ScenarioLVMissionType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "LVMissionType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioLVPayloadType> Payload() const
    { return m_Payload; }
    void setPayload(QSharedPointer<ScenarioLVPayloadType> Payload)
    { m_Payload = Payload; }
    QSharedPointer<ScenarioEnvironmentType> Environment() const
    { return m_Environment; }
    void setEnvironment(QSharedPointer<ScenarioEnvironmentType> Environment)
    { m_Environment = Environment; }
    QSharedPointer<ScenarioLVLaunchSiteType> LaunchSite() const
    { return m_LaunchSite; }
    void setLaunchSite(QSharedPointer<ScenarioLVLaunchSiteType> LaunchSite)
    { m_LaunchSite = LaunchSite; }
    QSharedPointer<ScenarioLVTargetOrbitType> TargetOrbit() const
    { return m_TargetOrbit; }
    void setTargetOrbit(QSharedPointer<ScenarioLVTargetOrbitType> TargetOrbit)
    { m_TargetOrbit = TargetOrbit; }
    QSharedPointer<ScenarioLVTrajectoryType> Trajectory() const
    { return m_Trajectory; }
    void setTrajectory(QSharedPointer<ScenarioLVTrajectoryType> Trajectory)
    { m_Trajectory = Trajectory; }

private:
    QSharedPointer<ScenarioLVPayloadType> m_Payload;
    QSharedPointer<ScenarioEnvironmentType> m_Environment;
    QSharedPointer<ScenarioLVLaunchSiteType> m_LaunchSite;
    QSharedPointer<ScenarioLVTargetOrbitType> m_TargetOrbit;
    QSharedPointer<ScenarioLVTrajectoryType> m_Trajectory;
};


// ScenarioLVSystemType
class ScenarioLVSystemType : public ScenarioObject
{
public:
    ScenarioLVSystemType();
    static ScenarioLVSystemType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "LVSystemType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioLVArchitectureType> Architecture() const
    { return m_Architecture; }
    void setArchitecture(QSharedPointer<ScenarioLVArchitectureType> Architecture)
    { m_Architecture = Architecture; }
    QSharedPointer<ScenarioLVPlFairingType> PlFairing() const
    { return m_PlFairing; }
    void setPlFairing(QSharedPointer<ScenarioLVPlFairingType> PlFairing)
    { m_PlFairing = PlFairing; }
    const QList<QSharedPointer<ScenarioLVLowerStageType> >& LowerStage() const
    { return m_LowerStage; }
    QList<QSharedPointer<ScenarioLVLowerStageType> >& LowerStage()
    { return m_LowerStage; }
    void setLowerStage(QList<QSharedPointer<ScenarioLVLowerStageType> > LowerStage)
    { m_LowerStage = LowerStage; }
    QSharedPointer<ScenarioLVUpperStageType> UpperStage() const
    { return m_UpperStage; }
    void setUpperStage(QSharedPointer<ScenarioLVUpperStageType> UpperStage)
    { m_UpperStage = UpperStage; }
    const QList<QSharedPointer<ScenarioLVBoostersType> >& Boosters() const
    { return m_Boosters; }
    QList<QSharedPointer<ScenarioLVBoostersType> >& Boosters()
    { return m_Boosters; }
    void setBoosters(QList<QSharedPointer<ScenarioLVBoostersType> > Boosters)
    { m_Boosters = Boosters; }
    QSharedPointer<ScenarioLVSystemWeightsType> SystemWeights() const
    { return m_SystemWeights; }
    void setSystemWeights(QSharedPointer<ScenarioLVSystemWeightsType> SystemWeights)
    { m_SystemWeights = SystemWeights; }
    QSharedPointer<ScenarioLVSystemCostsType> SystemCosts() const
    { return m_SystemCosts; }
    void setSystemCosts(QSharedPointer<ScenarioLVSystemCostsType> SystemCosts)
    { m_SystemCosts = SystemCosts; }
    QSharedPointer<ScenarioLVSystemReliabilityType> SystemReliability() const
    { return m_SystemReliability; }
    void setSystemReliability(QSharedPointer<ScenarioLVSystemReliabilityType> SystemReliability)
    { m_SystemReliability = SystemReliability; }
    QSharedPointer<ScenarioLVAerodynamicsType> Aerodynamics() const
    { return m_Aerodynamics; }
    void setAerodynamics(QSharedPointer<ScenarioLVAerodynamicsType> Aerodynamics)
    { m_Aerodynamics = Aerodynamics; }
    QSharedPointer<ScenarioLVSystemConstraintsType> SystemConstraints() const
    { return m_SystemConstraints; }
    void setSystemConstraints(QSharedPointer<ScenarioLVSystemConstraintsType> SystemConstraints)
    { m_SystemConstraints = SystemConstraints; }

private:
    QSharedPointer<ScenarioLVArchitectureType> m_Architecture;
    QSharedPointer<ScenarioLVPlFairingType> m_PlFairing;
    QList<QSharedPointer<ScenarioLVLowerStageType> > m_LowerStage;
    QSharedPointer<ScenarioLVUpperStageType> m_UpperStage;
    QList<QSharedPointer<ScenarioLVBoostersType> > m_Boosters;
    QSharedPointer<ScenarioLVSystemWeightsType> m_SystemWeights;
    QSharedPointer<ScenarioLVSystemCostsType> m_SystemCosts;
    QSharedPointer<ScenarioLVSystemReliabilityType> m_SystemReliability;
    QSharedPointer<ScenarioLVAerodynamicsType> m_Aerodynamics;
    QSharedPointer<ScenarioLVSystemConstraintsType> m_SystemConstraints;
};


// ScenarioLVPropulsionSystemType
class ScenarioLVPropulsionSystemType : public ScenarioObject
{
public:
    ScenarioLVPropulsionSystemType();
    static ScenarioLVPropulsionSystemType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "LVPropulsionSystemType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioLVPropulsionSystemSystemType> System() const
    { return m_System; }
    void setSystem(QSharedPointer<ScenarioLVPropulsionSystemSystemType> System)
    { m_System = System; }
    QSharedPointer<ScenarioLVPropulsionSystemLiquidTanksType> LiquidTanks() const
    { return m_LiquidTanks; }
    void setLiquidTanks(QSharedPointer<ScenarioLVPropulsionSystemLiquidTanksType> LiquidTanks)
    { m_LiquidTanks = LiquidTanks; }
    QSharedPointer<ScenarioLVPropulsionSystemSolidGrainType> SolidGrain() const
    { return m_SolidGrain; }
    void setSolidGrain(QSharedPointer<ScenarioLVPropulsionSystemSolidGrainType> SolidGrain)
    { m_SolidGrain = SolidGrain; }
    QSharedPointer<ScenarioLVPropulsionSystemFeedSystemType> FeedSystem() const
    { return m_FeedSystem; }
    void setFeedSystem(QSharedPointer<ScenarioLVPropulsionSystemFeedSystemType> FeedSystem)
    { m_FeedSystem = FeedSystem; }
    QSharedPointer<ScenarioLVPropulsionSystemCombustionChamberType> CombustionChamber() const
    { return m_CombustionChamber; }
    void setCombustionChamber(QSharedPointer<ScenarioLVPropulsionSystemCombustionChamberType> CombustionChamber)
    { m_CombustionChamber = CombustionChamber; }
    QSharedPointer<ScenarioLVPropulsionSystemNozzleType> Nozzle() const
    { return m_Nozzle; }
    void setNozzle(QSharedPointer<ScenarioLVPropulsionSystemNozzleType> Nozzle)
    { m_Nozzle = Nozzle; }
    QSharedPointer<ScenarioLVPropulsionSystemPerformanceType> Performance() const
    { return m_Performance; }
    void setPerformance(QSharedPointer<ScenarioLVPropulsionSystemPerformanceType> Performance)
    { m_Performance = Performance; }

private:
    QSharedPointer<ScenarioLVPropulsionSystemSystemType> m_System;
    QSharedPointer<ScenarioLVPropulsionSystemLiquidTanksType> m_LiquidTanks;
    QSharedPointer<ScenarioLVPropulsionSystemSolidGrainType> m_SolidGrain;
    QSharedPointer<ScenarioLVPropulsionSystemFeedSystemType> m_FeedSystem;
    QSharedPointer<ScenarioLVPropulsionSystemCombustionChamberType> m_CombustionChamber;
    QSharedPointer<ScenarioLVPropulsionSystemNozzleType> m_Nozzle;
    QSharedPointer<ScenarioLVPropulsionSystemPerformanceType> m_Performance;
};


// ScenarioLVGeometryType
class ScenarioLVGeometryType : public ScenarioObject
{
public:
    ScenarioLVGeometryType();
    static ScenarioLVGeometryType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "LVGeometryType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioOptVarBool> diameterEqualToUpper() const
    { return m_diameterEqualToUpper; }
    void setDiameterEqualToUpper(QSharedPointer<ScenarioOptVarBool> diameterEqualToUpper)
    { m_diameterEqualToUpper = diameterEqualToUpper; }
    QSharedPointer<ScenarioOptVarDouble> lengthOverDiam() const
    { return m_lengthOverDiam; }
    void setLengthOverDiam(QSharedPointer<ScenarioOptVarDouble> lengthOverDiam)
    { m_lengthOverDiam = lengthOverDiam; }
    double length() const
    { return m_length; }
    void setLength(double length)
    { m_length = length; }
    double diameter() const
    { return m_diameter; }
    void setDiameter(double diameter)
    { m_diameter = diameter; }
    double volume() const
    { return m_volume; }
    void setVolume(double volume)
    { m_volume = volume; }
    double baseLongPosition() const
    { return m_baseLongPosition; }
    void setBaseLongPosition(double baseLongPosition)
    { m_baseLongPosition = baseLongPosition; }
    QString noseShape() const
    { return m_noseShape; }
    void setNoseShape(QString noseShape)
    { m_noseShape = noseShape; }
    double noseLength() const
    { return m_noseLength; }
    void setNoseLength(double noseLength)
    { m_noseLength = noseLength; }
    double adapterLength() const
    { return m_adapterLength; }
    void setAdapterLength(double adapterLength)
    { m_adapterLength = adapterLength; }
    double intertankLength() const
    { return m_intertankLength; }
    void setIntertankLength(double intertankLength)
    { m_intertankLength = intertankLength; }
    double interstageLength() const
    { return m_interstageLength; }
    void setInterstageLength(double interstageLength)
    { m_interstageLength = interstageLength; }
    double enginesGimbalClearenceCstrViolation() const
    { return m_enginesGimbalClearenceCstrViolation; }
    void setEnginesGimbalClearenceCstrViolation(double enginesGimbalClearenceCstrViolation)
    { m_enginesGimbalClearenceCstrViolation = enginesGimbalClearenceCstrViolation; }
    double geometryInterferenceCstrViolation() const
    { return m_geometryInterferenceCstrViolation; }
    void setGeometryInterferenceCstrViolation(double geometryInterferenceCstrViolation)
    { m_geometryInterferenceCstrViolation = geometryInterferenceCstrViolation; }

private:
    QSharedPointer<ScenarioOptVarBool> m_diameterEqualToUpper;
    QSharedPointer<ScenarioOptVarDouble> m_lengthOverDiam;
    double m_length;
    double m_diameter;
    double m_volume;
    double m_baseLongPosition;
    QString m_noseShape;
    double m_noseLength;
    double m_adapterLength;
    double m_intertankLength;
    double m_interstageLength;
    double m_enginesGimbalClearenceCstrViolation;
    double m_geometryInterferenceCstrViolation;
};


// ScenarioLVAerodynamicsType
class ScenarioLVAerodynamicsType : public ScenarioObject
{
public:
    ScenarioLVAerodynamicsType();
    static ScenarioLVAerodynamicsType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "LVAerodynamicsType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    bool userDefinedAero() const
    { return m_userDefinedAero; }
    void setUserDefinedAero(bool userDefinedAero)
    { m_userDefinedAero = userDefinedAero; }
    double referenceArea() const
    { return m_referenceArea; }
    void setReferenceArea(double referenceArea)
    { m_referenceArea = referenceArea; }
    double referenceLength() const
    { return m_referenceLength; }
    void setReferenceLength(double referenceLength)
    { m_referenceLength = referenceLength; }
    QSharedPointer<ScenarioAeroCoefFileType> cl() const
    { return m_cl; }
    void setCl(QSharedPointer<ScenarioAeroCoefFileType> cl)
    { m_cl = cl; }
    QSharedPointer<ScenarioAeroCoefFileType> cd() const
    { return m_cd; }
    void setCd(QSharedPointer<ScenarioAeroCoefFileType> cd)
    { m_cd = cd; }
    QSharedPointer<ScenarioAeroCoefFileType> cm() const
    { return m_cm; }
    void setCm(QSharedPointer<ScenarioAeroCoefFileType> cm)
    { m_cm = cm; }

private:
    bool m_userDefinedAero;
    double m_referenceArea;
    double m_referenceLength;
    QSharedPointer<ScenarioAeroCoefFileType> m_cl;
    QSharedPointer<ScenarioAeroCoefFileType> m_cd;
    QSharedPointer<ScenarioAeroCoefFileType> m_cm;
};


// ScenarioLVComponentWeightsType
class ScenarioLVComponentWeightsType : public ScenarioObject
{
public:
    ScenarioLVComponentWeightsType();
    static ScenarioLVComponentWeightsType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "LVComponentWeightsType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioOptVarInt> tanksArrangement() const
    { return m_tanksArrangement; }
    void setTanksArrangement(QSharedPointer<ScenarioOptVarInt> tanksArrangement)
    { m_tanksArrangement = tanksArrangement; }
    QSharedPointer<ScenarioOptVarInt> tanksType() const
    { return m_tanksType; }
    void setTanksType(QSharedPointer<ScenarioOptVarInt> tanksType)
    { m_tanksType = tanksType; }
    double dryMass() const
    { return m_dryMass; }
    void setDryMass(double dryMass)
    { m_dryMass = dryMass; }
    double dryCoGLongPosition() const
    { return m_dryCoGLongPosition; }
    void setDryCoGLongPosition(double dryCoGLongPosition)
    { m_dryCoGLongPosition = dryCoGLongPosition; }
    double wetMass() const
    { return m_wetMass; }
    void setWetMass(double wetMass)
    { m_wetMass = wetMass; }
    double mainStructMass() const
    { return m_mainStructMass; }
    void setMainStructMass(double mainStructMass)
    { m_mainStructMass = mainStructMass; }
    double oxTankMass() const
    { return m_oxTankMass; }
    void setOxTankMass(double oxTankMass)
    { m_oxTankMass = oxTankMass; }
    double fuelTankMass() const
    { return m_fuelTankMass; }
    void setFuelTankMass(double fuelTankMass)
    { m_fuelTankMass = fuelTankMass; }
    double tpsMass() const
    { return m_tpsMass; }
    void setTpsMass(double tpsMass)
    { m_tpsMass = tpsMass; }
    double avionicsMass() const
    { return m_avionicsMass; }
    void setAvionicsMass(double avionicsMass)
    { m_avionicsMass = avionicsMass; }
    double epsMass() const
    { return m_epsMass; }
    void setEpsMass(double epsMass)
    { m_epsMass = epsMass; }
    double plAdapterMass() const
    { return m_plAdapterMass; }
    void setPlAdapterMass(double plAdapterMass)
    { m_plAdapterMass = plAdapterMass; }
    double padInterfaceMass() const
    { return m_padInterfaceMass; }
    void setPadInterfaceMass(double padInterfaceMass)
    { m_padInterfaceMass = padInterfaceMass; }
    double interstageMass() const
    { return m_interstageMass; }
    void setInterstageMass(double interstageMass)
    { m_interstageMass = interstageMass; }

private:
    QSharedPointer<ScenarioOptVarInt> m_tanksArrangement;
    QSharedPointer<ScenarioOptVarInt> m_tanksType;
    double m_dryMass;
    double m_dryCoGLongPosition;
    double m_wetMass;
    double m_mainStructMass;
    double m_oxTankMass;
    double m_fuelTankMass;
    double m_tpsMass;
    double m_avionicsMass;
    double m_epsMass;
    double m_plAdapterMass;
    double m_padInterfaceMass;
    double m_interstageMass;
};


// ScenarioLVSystemWeightsType
class ScenarioLVSystemWeightsType : public ScenarioObject
{
public:
    ScenarioLVSystemWeightsType();
    static ScenarioLVSystemWeightsType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "LVSystemWeightsType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double totalDryMass() const
    { return m_totalDryMass; }
    void setTotalDryMass(double totalDryMass)
    { m_totalDryMass = totalDryMass; }
    double totalWetMass() const
    { return m_totalWetMass; }
    void setTotalWetMass(double totalWetMass)
    { m_totalWetMass = totalWetMass; }
    double takeoffThrustOverWeight() const
    { return m_takeoffThrustOverWeight; }
    void setTakeoffThrustOverWeight(double takeoffThrustOverWeight)
    { m_takeoffThrustOverWeight = takeoffThrustOverWeight; }
    QSharedPointer<ScenarioOptVarDouble> maxAxialAcc() const
    { return m_maxAxialAcc; }
    void setMaxAxialAcc(QSharedPointer<ScenarioOptVarDouble> maxAxialAcc)
    { m_maxAxialAcc = maxAxialAcc; }
    QSharedPointer<ScenarioOptVarDouble> maxHeatFlux() const
    { return m_maxHeatFlux; }
    void setMaxHeatFlux(QSharedPointer<ScenarioOptVarDouble> maxHeatFlux)
    { m_maxHeatFlux = maxHeatFlux; }
    QSharedPointer<ScenarioOptVarDouble> maxDynPressure() const
    { return m_maxDynPressure; }
    void setMaxDynPressure(QSharedPointer<ScenarioOptVarDouble> maxDynPressure)
    { m_maxDynPressure = maxDynPressure; }
    QSharedPointer<ScenarioOptVarInt> mainStructuralMaterial() const
    { return m_mainStructuralMaterial; }
    void setMainStructuralMaterial(QSharedPointer<ScenarioOptVarInt> mainStructuralMaterial)
    { m_mainStructuralMaterial = mainStructuralMaterial; }
    QSharedPointer<ScenarioOptVarInt> redundancyLevel() const
    { return m_redundancyLevel; }
    void setRedundancyLevel(QSharedPointer<ScenarioOptVarInt> redundancyLevel)
    { m_redundancyLevel = redundancyLevel; }
    QSharedPointer<ScenarioOptVarDouble> structuralSafetyMargin() const
    { return m_structuralSafetyMargin; }
    void setStructuralSafetyMargin(QSharedPointer<ScenarioOptVarDouble> structuralSafetyMargin)
    { m_structuralSafetyMargin = structuralSafetyMargin; }

private:
    double m_totalDryMass;
    double m_totalWetMass;
    double m_takeoffThrustOverWeight;
    QSharedPointer<ScenarioOptVarDouble> m_maxAxialAcc;
    QSharedPointer<ScenarioOptVarDouble> m_maxHeatFlux;
    QSharedPointer<ScenarioOptVarDouble> m_maxDynPressure;
    QSharedPointer<ScenarioOptVarInt> m_mainStructuralMaterial;
    QSharedPointer<ScenarioOptVarInt> m_redundancyLevel;
    QSharedPointer<ScenarioOptVarDouble> m_structuralSafetyMargin;
};


// ScenarioLVComponentCostsType
class ScenarioLVComponentCostsType : public ScenarioObject
{
public:
    ScenarioLVComponentCostsType();
    static ScenarioLVComponentCostsType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "LVComponentCostsType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioOptVarInt> nEngineTests() const
    { return m_nEngineTests; }
    void setNEngineTests(QSharedPointer<ScenarioOptVarInt> nEngineTests)
    { m_nEngineTests = nEngineTests; }
    QSharedPointer<ScenarioLVDevelopmentCostsType> DevelopmentCosts() const
    { return m_DevelopmentCosts; }
    void setDevelopmentCosts(QSharedPointer<ScenarioLVDevelopmentCostsType> DevelopmentCosts)
    { m_DevelopmentCosts = DevelopmentCosts; }
    QSharedPointer<ScenarioLVProductionCostsType> ProductionCosts() const
    { return m_ProductionCosts; }
    void setProductionCosts(QSharedPointer<ScenarioLVProductionCostsType> ProductionCosts)
    { m_ProductionCosts = ProductionCosts; }

private:
    QSharedPointer<ScenarioOptVarInt> m_nEngineTests;
    QSharedPointer<ScenarioLVDevelopmentCostsType> m_DevelopmentCosts;
    QSharedPointer<ScenarioLVProductionCostsType> m_ProductionCosts;
};


// ScenarioLVSystemCostsType
class ScenarioLVSystemCostsType : public ScenarioObject
{
public:
    ScenarioLVSystemCostsType();
    static ScenarioLVSystemCostsType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "LVSystemCostsType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioLVTotalProgramCostsType> TotalProgramCosts() const
    { return m_TotalProgramCosts; }
    void setTotalProgramCosts(QSharedPointer<ScenarioLVTotalProgramCostsType> TotalProgramCosts)
    { m_TotalProgramCosts = TotalProgramCosts; }
    double developmentTime() const
    { return m_developmentTime; }
    void setDevelopmentTime(double developmentTime)
    { m_developmentTime = developmentTime; }
    QSharedPointer<ScenarioLVDirectOperationsCostsType> DirectOperationsCosts() const
    { return m_DirectOperationsCosts; }
    void setDirectOperationsCosts(QSharedPointer<ScenarioLVDirectOperationsCostsType> DirectOperationsCosts)
    { m_DirectOperationsCosts = DirectOperationsCosts; }
    QSharedPointer<ScenarioLVIndirectOperationsCostsType> IndirectOperationsCosts() const
    { return m_IndirectOperationsCosts; }
    void setIndirectOperationsCosts(QSharedPointer<ScenarioLVIndirectOperationsCostsType> IndirectOperationsCosts)
    { m_IndirectOperationsCosts = IndirectOperationsCosts; }

private:
    QSharedPointer<ScenarioLVTotalProgramCostsType> m_TotalProgramCosts;
    double m_developmentTime;
    QSharedPointer<ScenarioLVDirectOperationsCostsType> m_DirectOperationsCosts;
    QSharedPointer<ScenarioLVIndirectOperationsCostsType> m_IndirectOperationsCosts;
};


// ScenarioLVComponentReliabilityType
class ScenarioLVComponentReliabilityType : public ScenarioObject
{
public:
    ScenarioLVComponentReliabilityType();
    static ScenarioLVComponentReliabilityType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "LVComponentReliabilityType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioLVSeparationType> Separation() const
    { return m_Separation; }
    void setSeparation(QSharedPointer<ScenarioLVSeparationType> Separation)
    { m_Separation = Separation; }
    double avionicsFailureRate() const
    { return m_avionicsFailureRate; }
    void setAvionicsFailureRate(double avionicsFailureRate)
    { m_avionicsFailureRate = avionicsFailureRate; }
    double structureFailureRate() const
    { return m_structureFailureRate; }
    void setStructureFailureRate(double structureFailureRate)
    { m_structureFailureRate = structureFailureRate; }
    double tpsFailureRate() const
    { return m_tpsFailureRate; }
    void setTpsFailureRate(double tpsFailureRate)
    { m_tpsFailureRate = tpsFailureRate; }
    QSharedPointer<ScenarioLVPropulsionReliabilityType> PropulsionReliability() const
    { return m_PropulsionReliability; }
    void setPropulsionReliability(QSharedPointer<ScenarioLVPropulsionReliabilityType> PropulsionReliability)
    { m_PropulsionReliability = PropulsionReliability; }
    double overallComponentFailureRate() const
    { return m_overallComponentFailureRate; }
    void setOverallComponentFailureRate(double overallComponentFailureRate)
    { m_overallComponentFailureRate = overallComponentFailureRate; }

private:
    QSharedPointer<ScenarioLVSeparationType> m_Separation;
    double m_avionicsFailureRate;
    double m_structureFailureRate;
    double m_tpsFailureRate;
    QSharedPointer<ScenarioLVPropulsionReliabilityType> m_PropulsionReliability;
    double m_overallComponentFailureRate;
};


// ScenarioLVSystemReliabilityType
class ScenarioLVSystemReliabilityType : public ScenarioObject
{
public:
    ScenarioLVSystemReliabilityType();
    static ScenarioLVSystemReliabilityType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "LVSystemReliabilityType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double globalVehicleReliability() const
    { return m_globalVehicleReliability; }
    void setGlobalVehicleReliability(double globalVehicleReliability)
    { m_globalVehicleReliability = globalVehicleReliability; }
    double selfDestructReliability() const
    { return m_selfDestructReliability; }
    void setSelfDestructReliability(double selfDestructReliability)
    { m_selfDestructReliability = selfDestructReliability; }
    double missionSafety() const
    { return m_missionSafety; }
    void setMissionSafety(double missionSafety)
    { m_missionSafety = missionSafety; }
    double preLaunchReliability() const
    { return m_preLaunchReliability; }
    void setPreLaunchReliability(double preLaunchReliability)
    { m_preLaunchReliability = preLaunchReliability; }
    QSharedPointer<ScenarioLVTakeoffReliabilityType> TakeoffReliability() const
    { return m_TakeoffReliability; }
    void setTakeoffReliability(QSharedPointer<ScenarioLVTakeoffReliabilityType> TakeoffReliability)
    { m_TakeoffReliability = TakeoffReliability; }
    int numberOfAscentPhases() const
    { return m_numberOfAscentPhases; }
    void setNumberOfAscentPhases(int numberOfAscentPhases)
    { m_numberOfAscentPhases = numberOfAscentPhases; }
    const QList<double>& ascentPhasesDurations() const
    { return m_ascentPhasesDurations; }
    QList<double>& ascentPhasesDurations()
    { return m_ascentPhasesDurations; }
    void setAscentPhasesDurations(QList<double> ascentPhasesDurations)
    { m_ascentPhasesDurations = ascentPhasesDurations; }
    const QList<double>& ascentPhasesFailureRate() const
    { return m_ascentPhasesFailureRate; }
    QList<double>& ascentPhasesFailureRate()
    { return m_ascentPhasesFailureRate; }
    void setAscentPhasesFailureRate(QList<double> ascentPhasesFailureRate)
    { m_ascentPhasesFailureRate = ascentPhasesFailureRate; }

private:
    double m_globalVehicleReliability;
    double m_selfDestructReliability;
    double m_missionSafety;
    double m_preLaunchReliability;
    QSharedPointer<ScenarioLVTakeoffReliabilityType> m_TakeoffReliability;
    int m_numberOfAscentPhases;
    QList<double> m_ascentPhasesDurations;
    QList<double> m_ascentPhasesFailureRate;
};


// ScenarioLVTrajectoryType
class ScenarioLVTrajectoryType : public ScenarioObject
{
public:
    ScenarioLVTrajectoryType();
    static ScenarioLVTrajectoryType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "LVTrajectoryType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioLVTakeOffType> TakeOff() const
    { return m_TakeOff; }
    void setTakeOff(QSharedPointer<ScenarioLVTakeOffType> TakeOff)
    { m_TakeOff = TakeOff; }
    QSharedPointer<ScenarioLVIgnitionsType> Ignitions() const
    { return m_Ignitions; }
    void setIgnitions(QSharedPointer<ScenarioLVIgnitionsType> Ignitions)
    { m_Ignitions = Ignitions; }
    QSharedPointer<ScenarioLVAtmosphericFlightType> AtmosphericFlight() const
    { return m_AtmosphericFlight; }
    void setAtmosphericFlight(QSharedPointer<ScenarioLVAtmosphericFlightType> AtmosphericFlight)
    { m_AtmosphericFlight = AtmosphericFlight; }
    QSharedPointer<ScenarioLVExoatmosphericFlightType> ExoatmosphericFlight() const
    { return m_ExoatmosphericFlight; }
    void setExoatmosphericFlight(QSharedPointer<ScenarioLVExoatmosphericFlightType> ExoatmosphericFlight)
    { m_ExoatmosphericFlight = ExoatmosphericFlight; }
    QSharedPointer<ScenarioLVTrajectoryConstraintsType> TrajectoryConstraints() const
    { return m_TrajectoryConstraints; }
    void setTrajectoryConstraints(QSharedPointer<ScenarioLVTrajectoryConstraintsType> TrajectoryConstraints)
    { m_TrajectoryConstraints = TrajectoryConstraints; }

private:
    QSharedPointer<ScenarioLVTakeOffType> m_TakeOff;
    QSharedPointer<ScenarioLVIgnitionsType> m_Ignitions;
    QSharedPointer<ScenarioLVAtmosphericFlightType> m_AtmosphericFlight;
    QSharedPointer<ScenarioLVExoatmosphericFlightType> m_ExoatmosphericFlight;
    QSharedPointer<ScenarioLVTrajectoryConstraintsType> m_TrajectoryConstraints;
};


// ScenarioLVProgramCostFactorsType
class ScenarioLVProgramCostFactorsType : public ScenarioObject
{
public:
    ScenarioLVProgramCostFactorsType();
    static ScenarioLVProgramCostFactorsType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "LVProgramCostFactorsType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double f0() const
    { return m_f0; }
    void setF0(double f0)
    { m_f0 = f0; }
    QString launcherDesignComplexity() const
    { return m_launcherDesignComplexity; }
    void setLauncherDesignComplexity(QString launcherDesignComplexity)
    { m_launcherDesignComplexity = launcherDesignComplexity; }
    double f1() const
    { return m_f1; }
    void setF1(double f1)
    { m_f1 = f1; }
    QString teamExpertise() const
    { return m_teamExpertise; }
    void setTeamExpertise(QString teamExpertise)
    { m_teamExpertise = teamExpertise; }
    double f3() const
    { return m_f3; }
    void setF3(double f3)
    { m_f3 = f3; }
    QString contractorsStructure() const
    { return m_contractorsStructure; }
    void setContractorsStructure(QString contractorsStructure)
    { m_contractorsStructure = contractorsStructure; }
    double f7() const
    { return m_f7; }
    void setF7(double f7)
    { m_f7 = f7; }

private:
    double m_f0;
    QString m_launcherDesignComplexity;
    double m_f1;
    QString m_teamExpertise;
    double m_f3;
    QString m_contractorsStructure;
    double m_f7;
};


// ScenarioLVPayloadType
class ScenarioLVPayloadType : public ScenarioObject
{
public:
    ScenarioLVPayloadType();
    static ScenarioLVPayloadType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "LVPayloadType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double mass() const
    { return m_mass; }
    void setMass(double mass)
    { m_mass = mass; }
    double length() const
    { return m_length; }
    void setLength(double length)
    { m_length = length; }
    double diameter() const
    { return m_diameter; }
    void setDiameter(double diameter)
    { m_diameter = diameter; }
    double CoGLongPosition() const
    { return m_CoGLongPosition; }
    void setCoGLongPosition(double CoGLongPosition)
    { m_CoGLongPosition = CoGLongPosition; }
    double maxAxialAcc() const
    { return m_maxAxialAcc; }
    void setMaxAxialAcc(double maxAxialAcc)
    { m_maxAxialAcc = maxAxialAcc; }
    double maxHeatFlux() const
    { return m_maxHeatFlux; }
    void setMaxHeatFlux(double maxHeatFlux)
    { m_maxHeatFlux = maxHeatFlux; }

private:
    double m_mass;
    double m_length;
    double m_diameter;
    double m_CoGLongPosition;
    double m_maxAxialAcc;
    double m_maxHeatFlux;
};


// ScenarioLVLaunchSiteType
class ScenarioLVLaunchSiteType : public ScenarioObject
{
public:
    ScenarioLVLaunchSiteType();
    static ScenarioLVLaunchSiteType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "LVLaunchSiteType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioAbstract3DOFPositionType> Abstract3DOFPosition() const
    { return m_Abstract3DOFPosition; }
    void setAbstract3DOFPosition(QSharedPointer<ScenarioAbstract3DOFPositionType> Abstract3DOFPosition)
    { m_Abstract3DOFPosition = Abstract3DOFPosition; }
    const QList<double>& allowedAzimuths() const
    { return m_allowedAzimuths; }
    QList<double>& allowedAzimuths()
    { return m_allowedAzimuths; }
    void setAllowedAzimuths(QList<double> allowedAzimuths)
    { m_allowedAzimuths = allowedAzimuths; }

private:
    QSharedPointer<ScenarioAbstract3DOFPositionType> m_Abstract3DOFPosition;
    QList<double> m_allowedAzimuths;
};


// ScenarioLVTargetOrbitType
class ScenarioLVTargetOrbitType : public ScenarioObject
{
public:
    ScenarioLVTargetOrbitType();
    static ScenarioLVTargetOrbitType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "LVTargetOrbitType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double semiaxis() const
    { return m_semiaxis; }
    void setSemiaxis(double semiaxis)
    { m_semiaxis = semiaxis; }
    double eccentricity() const
    { return m_eccentricity; }
    void setEccentricity(double eccentricity)
    { m_eccentricity = eccentricity; }
    double inclination() const
    { return m_inclination; }
    void setInclination(double inclination)
    { m_inclination = inclination; }
    double semiaxisTol() const
    { return m_semiaxisTol; }
    void setSemiaxisTol(double semiaxisTol)
    { m_semiaxisTol = semiaxisTol; }
    double eccentricityTol() const
    { return m_eccentricityTol; }
    void setEccentricityTol(double eccentricityTol)
    { m_eccentricityTol = eccentricityTol; }
    double inclinationTol() const
    { return m_inclinationTol; }
    void setInclinationTol(double inclinationTol)
    { m_inclinationTol = inclinationTol; }

private:
    double m_semiaxis;
    double m_eccentricity;
    double m_inclination;
    double m_semiaxisTol;
    double m_eccentricityTol;
    double m_inclinationTol;
};


// ScenarioLVArchitectureType
class ScenarioLVArchitectureType : public ScenarioObject
{
public:
    ScenarioLVArchitectureType();
    static ScenarioLVArchitectureType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "LVArchitectureType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioOptVarInt> boosterConf() const
    { return m_boosterConf; }
    void setBoosterConf(QSharedPointer<ScenarioOptVarInt> boosterConf)
    { m_boosterConf = boosterConf; }
    QSharedPointer<ScenarioOptVarInt> nStages() const
    { return m_nStages; }
    void setNStages(QSharedPointer<ScenarioOptVarInt> nStages)
    { m_nStages = nStages; }
    QSharedPointer<ScenarioOptVarInt> nBoosters() const
    { return m_nBoosters; }
    void setNBoosters(QSharedPointer<ScenarioOptVarInt> nBoosters)
    { m_nBoosters = nBoosters; }
    QSharedPointer<ScenarioOptVarBool> singleEngineType() const
    { return m_singleEngineType; }
    void setSingleEngineType(QSharedPointer<ScenarioOptVarBool> singleEngineType)
    { m_singleEngineType = singleEngineType; }

private:
    QSharedPointer<ScenarioOptVarInt> m_boosterConf;
    QSharedPointer<ScenarioOptVarInt> m_nStages;
    QSharedPointer<ScenarioOptVarInt> m_nBoosters;
    QSharedPointer<ScenarioOptVarBool> m_singleEngineType;
};


// ScenarioLVPlFairingType
class ScenarioLVPlFairingType : public ScenarioObject
{
public:
    ScenarioLVPlFairingType();
    static ScenarioLVPlFairingType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "LVPlFairingType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioLVGeometryType> Geometry() const
    { return m_Geometry; }
    void setGeometry(QSharedPointer<ScenarioLVGeometryType> Geometry)
    { m_Geometry = Geometry; }
    QSharedPointer<ScenarioLVComponentWeightsType> ComponentWeights() const
    { return m_ComponentWeights; }
    void setComponentWeights(QSharedPointer<ScenarioLVComponentWeightsType> ComponentWeights)
    { m_ComponentWeights = ComponentWeights; }
    QSharedPointer<ScenarioLVComponentCostsType> ComponentCosts() const
    { return m_ComponentCosts; }
    void setComponentCosts(QSharedPointer<ScenarioLVComponentCostsType> ComponentCosts)
    { m_ComponentCosts = ComponentCosts; }
    QSharedPointer<ScenarioLVComponentReliabilityType> ComponentReliability() const
    { return m_ComponentReliability; }
    void setComponentReliability(QSharedPointer<ScenarioLVComponentReliabilityType> ComponentReliability)
    { m_ComponentReliability = ComponentReliability; }

private:
    QSharedPointer<ScenarioLVGeometryType> m_Geometry;
    QSharedPointer<ScenarioLVComponentWeightsType> m_ComponentWeights;
    QSharedPointer<ScenarioLVComponentCostsType> m_ComponentCosts;
    QSharedPointer<ScenarioLVComponentReliabilityType> m_ComponentReliability;
};


// ScenarioLVLowerStageType
class ScenarioLVLowerStageType : public ScenarioObject
{
public:
    ScenarioLVLowerStageType();
    static ScenarioLVLowerStageType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "LVLowerStageType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioLVGeometryType> Geometry() const
    { return m_Geometry; }
    void setGeometry(QSharedPointer<ScenarioLVGeometryType> Geometry)
    { m_Geometry = Geometry; }
    QSharedPointer<ScenarioLVPropulsionSystemType> PropulsionSystem() const
    { return m_PropulsionSystem; }
    void setPropulsionSystem(QSharedPointer<ScenarioLVPropulsionSystemType> PropulsionSystem)
    { m_PropulsionSystem = PropulsionSystem; }
    QSharedPointer<ScenarioLVComponentWeightsType> ComponentWeights() const
    { return m_ComponentWeights; }
    void setComponentWeights(QSharedPointer<ScenarioLVComponentWeightsType> ComponentWeights)
    { m_ComponentWeights = ComponentWeights; }
    QSharedPointer<ScenarioLVComponentCostsType> ComponentCosts() const
    { return m_ComponentCosts; }
    void setComponentCosts(QSharedPointer<ScenarioLVComponentCostsType> ComponentCosts)
    { m_ComponentCosts = ComponentCosts; }
    QSharedPointer<ScenarioLVComponentReliabilityType> ComponentReliability() const
    { return m_ComponentReliability; }
    void setComponentReliability(QSharedPointer<ScenarioLVComponentReliabilityType> ComponentReliability)
    { m_ComponentReliability = ComponentReliability; }

private:
    QSharedPointer<ScenarioLVGeometryType> m_Geometry;
    QSharedPointer<ScenarioLVPropulsionSystemType> m_PropulsionSystem;
    QSharedPointer<ScenarioLVComponentWeightsType> m_ComponentWeights;
    QSharedPointer<ScenarioLVComponentCostsType> m_ComponentCosts;
    QSharedPointer<ScenarioLVComponentReliabilityType> m_ComponentReliability;
};


// ScenarioLVUpperStageType
class ScenarioLVUpperStageType : public ScenarioObject
{
public:
    ScenarioLVUpperStageType();
    static ScenarioLVUpperStageType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "LVUpperStageType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioLVGeometryType> Geometry() const
    { return m_Geometry; }
    void setGeometry(QSharedPointer<ScenarioLVGeometryType> Geometry)
    { m_Geometry = Geometry; }
    QSharedPointer<ScenarioLVPropulsionSystemType> PropulsionSystem() const
    { return m_PropulsionSystem; }
    void setPropulsionSystem(QSharedPointer<ScenarioLVPropulsionSystemType> PropulsionSystem)
    { m_PropulsionSystem = PropulsionSystem; }
    QSharedPointer<ScenarioLVComponentWeightsType> ComponentWeights() const
    { return m_ComponentWeights; }
    void setComponentWeights(QSharedPointer<ScenarioLVComponentWeightsType> ComponentWeights)
    { m_ComponentWeights = ComponentWeights; }
    QSharedPointer<ScenarioLVComponentCostsType> ComponentCosts() const
    { return m_ComponentCosts; }
    void setComponentCosts(QSharedPointer<ScenarioLVComponentCostsType> ComponentCosts)
    { m_ComponentCosts = ComponentCosts; }
    QSharedPointer<ScenarioLVComponentReliabilityType> ComponentReliability() const
    { return m_ComponentReliability; }
    void setComponentReliability(QSharedPointer<ScenarioLVComponentReliabilityType> ComponentReliability)
    { m_ComponentReliability = ComponentReliability; }

private:
    QSharedPointer<ScenarioLVGeometryType> m_Geometry;
    QSharedPointer<ScenarioLVPropulsionSystemType> m_PropulsionSystem;
    QSharedPointer<ScenarioLVComponentWeightsType> m_ComponentWeights;
    QSharedPointer<ScenarioLVComponentCostsType> m_ComponentCosts;
    QSharedPointer<ScenarioLVComponentReliabilityType> m_ComponentReliability;
};


// ScenarioLVBoostersType
class ScenarioLVBoostersType : public ScenarioObject
{
public:
    ScenarioLVBoostersType();
    static ScenarioLVBoostersType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "LVBoostersType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioLVGeometryType> Geometry() const
    { return m_Geometry; }
    void setGeometry(QSharedPointer<ScenarioLVGeometryType> Geometry)
    { m_Geometry = Geometry; }
    QSharedPointer<ScenarioLVPropulsionSystemType> PropulsionSystem() const
    { return m_PropulsionSystem; }
    void setPropulsionSystem(QSharedPointer<ScenarioLVPropulsionSystemType> PropulsionSystem)
    { m_PropulsionSystem = PropulsionSystem; }
    QSharedPointer<ScenarioLVComponentWeightsType> ComponentWeights() const
    { return m_ComponentWeights; }
    void setComponentWeights(QSharedPointer<ScenarioLVComponentWeightsType> ComponentWeights)
    { m_ComponentWeights = ComponentWeights; }
    QSharedPointer<ScenarioLVComponentCostsType> ComponentCosts() const
    { return m_ComponentCosts; }
    void setComponentCosts(QSharedPointer<ScenarioLVComponentCostsType> ComponentCosts)
    { m_ComponentCosts = ComponentCosts; }
    QSharedPointer<ScenarioLVComponentReliabilityType> ComponentReliability() const
    { return m_ComponentReliability; }
    void setComponentReliability(QSharedPointer<ScenarioLVComponentReliabilityType> ComponentReliability)
    { m_ComponentReliability = ComponentReliability; }

private:
    QSharedPointer<ScenarioLVGeometryType> m_Geometry;
    QSharedPointer<ScenarioLVPropulsionSystemType> m_PropulsionSystem;
    QSharedPointer<ScenarioLVComponentWeightsType> m_ComponentWeights;
    QSharedPointer<ScenarioLVComponentCostsType> m_ComponentCosts;
    QSharedPointer<ScenarioLVComponentReliabilityType> m_ComponentReliability;
};


// ScenarioLVSystemConstraintsType
class ScenarioLVSystemConstraintsType : public ScenarioObject
{
public:
    ScenarioLVSystemConstraintsType();
    static ScenarioLVSystemConstraintsType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "LVSystemConstraintsType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;

private:
};


// ScenarioLVPropulsionSystemSystemType
class ScenarioLVPropulsionSystemSystemType : public ScenarioObject
{
public:
    ScenarioLVPropulsionSystemSystemType();
    static ScenarioLVPropulsionSystemSystemType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "LVPropulsionSystemSystemType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioOptVarInt> propType() const
    { return m_propType; }
    void setPropType(QSharedPointer<ScenarioOptVarInt> propType)
    { m_propType = propType; }
    QString fuelType() const
    { return m_fuelType; }
    void setFuelType(QString fuelType)
    { m_fuelType = fuelType; }
    QString oxType() const
    { return m_oxType; }
    void setOxType(QString oxType)
    { m_oxType = oxType; }
    QSharedPointer<ScenarioOptVarInt> numberOfEngines() const
    { return m_numberOfEngines; }
    void setNumberOfEngines(QSharedPointer<ScenarioOptVarInt> numberOfEngines)
    { m_numberOfEngines = numberOfEngines; }
    QSharedPointer<ScenarioOptVarDouble> nominalThrust() const
    { return m_nominalThrust; }
    void setNominalThrust(QSharedPointer<ScenarioOptVarDouble> nominalThrust)
    { m_nominalThrust = nominalThrust; }
    double nominalThrustPerEngine() const
    { return m_nominalThrustPerEngine; }
    void setNominalThrustPerEngine(double nominalThrustPerEngine)
    { m_nominalThrustPerEngine = nominalThrustPerEngine; }
    double engineWerMass() const
    { return m_engineWerMass; }
    void setEngineWerMass(double engineWerMass)
    { m_engineWerMass = engineWerMass; }
    double totalEngineDryMass() const
    { return m_totalEngineDryMass; }
    void setTotalEngineDryMass(double totalEngineDryMass)
    { m_totalEngineDryMass = totalEngineDryMass; }
    double totalPropSysDryMass() const
    { return m_totalPropSysDryMass; }
    void setTotalPropSysDryMass(double totalPropSysDryMass)
    { m_totalPropSysDryMass = totalPropSysDryMass; }
    QSharedPointer<ScenarioOptVarDouble> propMass() const
    { return m_propMass; }
    void setPropMass(QSharedPointer<ScenarioOptVarDouble> propMass)
    { m_propMass = propMass; }
    double totalEngineLength() const
    { return m_totalEngineLength; }
    void setTotalEngineLength(double totalEngineLength)
    { m_totalEngineLength = totalEngineLength; }
    double engineCoGLongPosition() const
    { return m_engineCoGLongPosition; }
    void setEngineCoGLongPosition(double engineCoGLongPosition)
    { m_engineCoGLongPosition = engineCoGLongPosition; }
    QSharedPointer<ScenarioOptVarBool> offTheShelf() const
    { return m_offTheShelf; }
    void setOffTheShelf(QSharedPointer<ScenarioOptVarBool> offTheShelf)
    { m_offTheShelf = offTheShelf; }
    QSharedPointer<ScenarioOptVarInt> offTheShelfEngineId() const
    { return m_offTheShelfEngineId; }
    void setOffTheShelfEngineId(QSharedPointer<ScenarioOptVarInt> offTheShelfEngineId)
    { m_offTheShelfEngineId = offTheShelfEngineId; }
    QString offTheShelfEngineName() const
    { return m_offTheShelfEngineName; }
    void setOffTheShelfEngineName(QString offTheShelfEngineName)
    { m_offTheShelfEngineName = offTheShelfEngineName; }
    QSharedPointer<ScenarioOptVarInt> feedType() const
    { return m_feedType; }
    void setFeedType(QSharedPointer<ScenarioOptVarInt> feedType)
    { m_feedType = feedType; }
    QString coolingType() const
    { return m_coolingType; }
    void setCoolingType(QString coolingType)
    { m_coolingType = coolingType; }
    QSharedPointer<ScenarioOptVarDouble> mixtureRatio() const
    { return m_mixtureRatio; }
    void setMixtureRatio(QSharedPointer<ScenarioOptVarDouble> mixtureRatio)
    { m_mixtureRatio = mixtureRatio; }
    QSharedPointer<ScenarioOptVarDouble> nozzleOptAlt() const
    { return m_nozzleOptAlt; }
    void setNozzleOptAlt(QSharedPointer<ScenarioOptVarDouble> nozzleOptAlt)
    { m_nozzleOptAlt = nozzleOptAlt; }
    double pccOverPa() const
    { return m_pccOverPa; }
    void setPccOverPa(double pccOverPa)
    { m_pccOverPa = pccOverPa; }
    double paOptAlt() const
    { return m_paOptAlt; }
    void setPaOptAlt(double paOptAlt)
    { m_paOptAlt = paOptAlt; }
    double spFillingFactorCstrViolation() const
    { return m_spFillingFactorCstrViolation; }
    void setSpFillingFactorCstrViolation(double spFillingFactorCstrViolation)
    { m_spFillingFactorCstrViolation = spFillingFactorCstrViolation; }
    double thrustRangeCstrViolation() const
    { return m_thrustRangeCstrViolation; }
    void setThrustRangeCstrViolation(double thrustRangeCstrViolation)
    { m_thrustRangeCstrViolation = thrustRangeCstrViolation; }
    double maxNenginesCstrViolation() const
    { return m_maxNenginesCstrViolation; }
    void setMaxNenginesCstrViolation(double maxNenginesCstrViolation)
    { m_maxNenginesCstrViolation = maxNenginesCstrViolation; }
    double ceaExecutionFailureViolation() const
    { return m_ceaExecutionFailureViolation; }
    void setCeaExecutionFailureViolation(double ceaExecutionFailureViolation)
    { m_ceaExecutionFailureViolation = ceaExecutionFailureViolation; }

private:
    QSharedPointer<ScenarioOptVarInt> m_propType;
    QString m_fuelType;
    QString m_oxType;
    QSharedPointer<ScenarioOptVarInt> m_numberOfEngines;
    QSharedPointer<ScenarioOptVarDouble> m_nominalThrust;
    double m_nominalThrustPerEngine;
    double m_engineWerMass;
    double m_totalEngineDryMass;
    double m_totalPropSysDryMass;
    QSharedPointer<ScenarioOptVarDouble> m_propMass;
    double m_totalEngineLength;
    double m_engineCoGLongPosition;
    QSharedPointer<ScenarioOptVarBool> m_offTheShelf;
    QSharedPointer<ScenarioOptVarInt> m_offTheShelfEngineId;
    QString m_offTheShelfEngineName;
    QSharedPointer<ScenarioOptVarInt> m_feedType;
    QString m_coolingType;
    QSharedPointer<ScenarioOptVarDouble> m_mixtureRatio;
    QSharedPointer<ScenarioOptVarDouble> m_nozzleOptAlt;
    double m_pccOverPa;
    double m_paOptAlt;
    double m_spFillingFactorCstrViolation;
    double m_thrustRangeCstrViolation;
    double m_maxNenginesCstrViolation;
    double m_ceaExecutionFailureViolation;
};


// ScenarioLVPropulsionSystemLiquidTanksType
class ScenarioLVPropulsionSystemLiquidTanksType : public ScenarioObject
{
public:
    ScenarioLVPropulsionSystemLiquidTanksType();
    static ScenarioLVPropulsionSystemLiquidTanksType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "LVPropulsionSystemLiquidTanksType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioOptVarDouble> tanksPressureNorm() const
    { return m_tanksPressureNorm; }
    void setTanksPressureNorm(QSharedPointer<ScenarioOptVarDouble> tanksPressureNorm)
    { m_tanksPressureNorm = tanksPressureNorm; }
    double tanksPressure() const
    { return m_tanksPressure; }
    void setTanksPressure(double tanksPressure)
    { m_tanksPressure = tanksPressure; }
    double oxTankLength() const
    { return m_oxTankLength; }
    void setOxTankLength(double oxTankLength)
    { m_oxTankLength = oxTankLength; }
    double oxTankDiam() const
    { return m_oxTankDiam; }
    void setOxTankDiam(double oxTankDiam)
    { m_oxTankDiam = oxTankDiam; }
    double oxTankPressure() const
    { return m_oxTankPressure; }
    void setOxTankPressure(double oxTankPressure)
    { m_oxTankPressure = oxTankPressure; }
    double oxMass() const
    { return m_oxMass; }
    void setOxMass(double oxMass)
    { m_oxMass = oxMass; }
    double oxTankVolume() const
    { return m_oxTankVolume; }
    void setOxTankVolume(double oxTankVolume)
    { m_oxTankVolume = oxTankVolume; }
    double fuelTankLength() const
    { return m_fuelTankLength; }
    void setFuelTankLength(double fuelTankLength)
    { m_fuelTankLength = fuelTankLength; }
    double fuelTankDiam() const
    { return m_fuelTankDiam; }
    void setFuelTankDiam(double fuelTankDiam)
    { m_fuelTankDiam = fuelTankDiam; }
    double fuelTankPressure() const
    { return m_fuelTankPressure; }
    void setFuelTankPressure(double fuelTankPressure)
    { m_fuelTankPressure = fuelTankPressure; }
    double fuelMass() const
    { return m_fuelMass; }
    void setFuelMass(double fuelMass)
    { m_fuelMass = fuelMass; }
    double fuelTankVolume() const
    { return m_fuelTankVolume; }
    void setFuelTankVolume(double fuelTankVolume)
    { m_fuelTankVolume = fuelTankVolume; }

private:
    QSharedPointer<ScenarioOptVarDouble> m_tanksPressureNorm;
    double m_tanksPressure;
    double m_oxTankLength;
    double m_oxTankDiam;
    double m_oxTankPressure;
    double m_oxMass;
    double m_oxTankVolume;
    double m_fuelTankLength;
    double m_fuelTankDiam;
    double m_fuelTankPressure;
    double m_fuelMass;
    double m_fuelTankVolume;
};


// ScenarioLVPropulsionSystemSolidGrainType
class ScenarioLVPropulsionSystemSolidGrainType : public ScenarioObject
{
public:
    ScenarioLVPropulsionSystemSolidGrainType();
    static ScenarioLVPropulsionSystemSolidGrainType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "LVPropulsionSystemSolidGrainType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioOptVarDouble> abOverAt() const
    { return m_abOverAt; }
    void setAbOverAt(QSharedPointer<ScenarioOptVarDouble> abOverAt)
    { m_abOverAt = abOverAt; }
    double ab() const
    { return m_ab; }
    void setAb(double ab)
    { m_ab = ab; }
    double grainLength() const
    { return m_grainLength; }
    void setGrainLength(double grainLength)
    { m_grainLength = grainLength; }
    double grainDiam() const
    { return m_grainDiam; }
    void setGrainDiam(double grainDiam)
    { m_grainDiam = grainDiam; }
    double igniterLength() const
    { return m_igniterLength; }
    void setIgniterLength(double igniterLength)
    { m_igniterLength = igniterLength; }
    double igniterDiam() const
    { return m_igniterDiam; }
    void setIgniterDiam(double igniterDiam)
    { m_igniterDiam = igniterDiam; }
    double igniterMass() const
    { return m_igniterMass; }
    void setIgniterMass(double igniterMass)
    { m_igniterMass = igniterMass; }
    double sliverMass() const
    { return m_sliverMass; }
    void setSliverMass(double sliverMass)
    { m_sliverMass = sliverMass; }
    double cavityVolume() const
    { return m_cavityVolume; }
    void setCavityVolume(double cavityVolume)
    { m_cavityVolume = cavityVolume; }

private:
    QSharedPointer<ScenarioOptVarDouble> m_abOverAt;
    double m_ab;
    double m_grainLength;
    double m_grainDiam;
    double m_igniterLength;
    double m_igniterDiam;
    double m_igniterMass;
    double m_sliverMass;
    double m_cavityVolume;
};


// ScenarioLVPropulsionSystemFeedSystemType
class ScenarioLVPropulsionSystemFeedSystemType : public ScenarioObject
{
public:
    ScenarioLVPropulsionSystemFeedSystemType();
    static ScenarioLVPropulsionSystemFeedSystemType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "LVPropulsionSystemFeedSystemType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double pressurizerTankPressure() const
    { return m_pressurizerTankPressure; }
    void setPressurizerTankPressure(double pressurizerTankPressure)
    { m_pressurizerTankPressure = pressurizerTankPressure; }
    double pressurizerTankRadius() const
    { return m_pressurizerTankRadius; }
    void setPressurizerTankRadius(double pressurizerTankRadius)
    { m_pressurizerTankRadius = pressurizerTankRadius; }
    double pressurizerTankMass() const
    { return m_pressurizerTankMass; }
    void setPressurizerTankMass(double pressurizerTankMass)
    { m_pressurizerTankMass = pressurizerTankMass; }
    double pressurizerGasMass() const
    { return m_pressurizerGasMass; }
    void setPressurizerGasMass(double pressurizerGasMass)
    { m_pressurizerGasMass = pressurizerGasMass; }
    double linesValvesMass() const
    { return m_linesValvesMass; }
    void setLinesValvesMass(double linesValvesMass)
    { m_linesValvesMass = linesValvesMass; }
    double trappedPropMass() const
    { return m_trappedPropMass; }
    void setTrappedPropMass(double trappedPropMass)
    { m_trappedPropMass = trappedPropMass; }
    double totalFeedSystemMass() const
    { return m_totalFeedSystemMass; }
    void setTotalFeedSystemMass(double totalFeedSystemMass)
    { m_totalFeedSystemMass = totalFeedSystemMass; }
    double totalFeedSystemLength() const
    { return m_totalFeedSystemLength; }
    void setTotalFeedSystemLength(double totalFeedSystemLength)
    { m_totalFeedSystemLength = totalFeedSystemLength; }
    double totalFeedSystemDiameter() const
    { return m_totalFeedSystemDiameter; }
    void setTotalFeedSystemDiameter(double totalFeedSystemDiameter)
    { m_totalFeedSystemDiameter = totalFeedSystemDiameter; }

private:
    double m_pressurizerTankPressure;
    double m_pressurizerTankRadius;
    double m_pressurizerTankMass;
    double m_pressurizerGasMass;
    double m_linesValvesMass;
    double m_trappedPropMass;
    double m_totalFeedSystemMass;
    double m_totalFeedSystemLength;
    double m_totalFeedSystemDiameter;
};


// ScenarioLVPropulsionSystemCombustionChamberType
class ScenarioLVPropulsionSystemCombustionChamberType : public ScenarioObject
{
public:
    ScenarioLVPropulsionSystemCombustionChamberType();
    static ScenarioLVPropulsionSystemCombustionChamberType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "LVPropulsionSystemCombustionChamberType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioOptVarDouble> accOverAt() const
    { return m_accOverAt; }
    void setAccOverAt(QSharedPointer<ScenarioOptVarDouble> accOverAt)
    { m_accOverAt = accOverAt; }
    double acc() const
    { return m_acc; }
    void setAcc(double acc)
    { m_acc = acc; }
    QSharedPointer<ScenarioOptVarDouble> chamberPressureNorm() const
    { return m_chamberPressureNorm; }
    void setChamberPressureNorm(QSharedPointer<ScenarioOptVarDouble> chamberPressureNorm)
    { m_chamberPressureNorm = chamberPressureNorm; }
    double chamberPressure() const
    { return m_chamberPressure; }
    void setChamberPressure(double chamberPressure)
    { m_chamberPressure = chamberPressure; }
    double chamberCharactLength() const
    { return m_chamberCharactLength; }
    void setChamberCharactLength(double chamberCharactLength)
    { m_chamberCharactLength = chamberCharactLength; }
    double chamberLength() const
    { return m_chamberLength; }
    void setChamberLength(double chamberLength)
    { m_chamberLength = chamberLength; }
    double chamberDiameter() const
    { return m_chamberDiameter; }
    void setChamberDiameter(double chamberDiameter)
    { m_chamberDiameter = chamberDiameter; }
    double chamberMass() const
    { return m_chamberMass; }
    void setChamberMass(double chamberMass)
    { m_chamberMass = chamberMass; }

private:
    QSharedPointer<ScenarioOptVarDouble> m_accOverAt;
    double m_acc;
    QSharedPointer<ScenarioOptVarDouble> m_chamberPressureNorm;
    double m_chamberPressure;
    double m_chamberCharactLength;
    double m_chamberLength;
    double m_chamberDiameter;
    double m_chamberMass;
};


// ScenarioLVPropulsionSystemNozzleType
class ScenarioLVPropulsionSystemNozzleType : public ScenarioObject
{
public:
    ScenarioLVPropulsionSystemNozzleType();
    static ScenarioLVPropulsionSystemNozzleType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "LVPropulsionSystemNozzleType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double at() const
    { return m_at; }
    void setAt(double at)
    { m_at = at; }
    double ae() const
    { return m_ae; }
    void setAe(double ae)
    { m_ae = ae; }
    double aeOverat() const
    { return m_aeOverat; }
    void setAeOverat(double aeOverat)
    { m_aeOverat = aeOverat; }
    double throatDiameter() const
    { return m_throatDiameter; }
    void setThroatDiameter(double throatDiameter)
    { m_throatDiameter = throatDiameter; }
    double nozzleDiameter() const
    { return m_nozzleDiameter; }
    void setNozzleDiameter(double nozzleDiameter)
    { m_nozzleDiameter = nozzleDiameter; }
    double convLength() const
    { return m_convLength; }
    void setConvLength(double convLength)
    { m_convLength = convLength; }
    double divLength() const
    { return m_divLength; }
    void setDivLength(double divLength)
    { m_divLength = divLength; }
    double nozzleLength() const
    { return m_nozzleLength; }
    void setNozzleLength(double nozzleLength)
    { m_nozzleLength = nozzleLength; }
    double nozzleMass() const
    { return m_nozzleMass; }
    void setNozzleMass(double nozzleMass)
    { m_nozzleMass = nozzleMass; }
    QSharedPointer<ScenarioOptVarInt> nozzleType() const
    { return m_nozzleType; }
    void setNozzleType(QSharedPointer<ScenarioOptVarInt> nozzleType)
    { m_nozzleType = nozzleType; }
    QSharedPointer<ScenarioOptVarDouble> divAngle() const
    { return m_divAngle; }
    void setDivAngle(QSharedPointer<ScenarioOptVarDouble> divAngle)
    { m_divAngle = divAngle; }
    QSharedPointer<ScenarioOptVarInt> tvcType() const
    { return m_tvcType; }
    void setTvcType(QSharedPointer<ScenarioOptVarInt> tvcType)
    { m_tvcType = tvcType; }
    QSharedPointer<ScenarioOptVarDouble> tvcAngle() const
    { return m_tvcAngle; }
    void setTvcAngle(QSharedPointer<ScenarioOptVarDouble> tvcAngle)
    { m_tvcAngle = tvcAngle; }
    double tvcMass() const
    { return m_tvcMass; }
    void setTvcMass(double tvcMass)
    { m_tvcMass = tvcMass; }
    double nozzleCantAngle() const
    { return m_nozzleCantAngle; }
    void setNozzleCantAngle(double nozzleCantAngle)
    { m_nozzleCantAngle = nozzleCantAngle; }
    QString nozzleShape() const
    { return m_nozzleShape; }
    void setNozzleShape(QString nozzleShape)
    { m_nozzleShape = nozzleShape; }

private:
    double m_at;
    double m_ae;
    double m_aeOverat;
    double m_throatDiameter;
    double m_nozzleDiameter;
    double m_convLength;
    double m_divLength;
    double m_nozzleLength;
    double m_nozzleMass;
    QSharedPointer<ScenarioOptVarInt> m_nozzleType;
    QSharedPointer<ScenarioOptVarDouble> m_divAngle;
    QSharedPointer<ScenarioOptVarInt> m_tvcType;
    QSharedPointer<ScenarioOptVarDouble> m_tvcAngle;
    double m_tvcMass;
    double m_nozzleCantAngle;
    QString m_nozzleShape;
};


// ScenarioLVPropulsionSystemPerformanceType
class ScenarioLVPropulsionSystemPerformanceType : public ScenarioObject
{
public:
    ScenarioLVPropulsionSystemPerformanceType();
    static ScenarioLVPropulsionSystemPerformanceType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "LVPropulsionSystemPerformanceType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double seaThrust() const
    { return m_seaThrust; }
    void setSeaThrust(double seaThrust)
    { m_seaThrust = seaThrust; }
    double seaThrustPerEngine() const
    { return m_seaThrustPerEngine; }
    void setSeaThrustPerEngine(double seaThrustPerEngine)
    { m_seaThrustPerEngine = seaThrustPerEngine; }
    double vacuumThrust() const
    { return m_vacuumThrust; }
    void setVacuumThrust(double vacuumThrust)
    { m_vacuumThrust = vacuumThrust; }
    double vacuumThrustPerEngine() const
    { return m_vacuumThrustPerEngine; }
    void setVacuumThrustPerEngine(double vacuumThrustPerEngine)
    { m_vacuumThrustPerEngine = vacuumThrustPerEngine; }
    double theoOptIsp() const
    { return m_theoOptIsp; }
    void setTheoOptIsp(double theoOptIsp)
    { m_theoOptIsp = theoOptIsp; }
    double realOptIsp() const
    { return m_realOptIsp; }
    void setRealOptIsp(double realOptIsp)
    { m_realOptIsp = realOptIsp; }
    double theoSeaIsp() const
    { return m_theoSeaIsp; }
    void setTheoSeaIsp(double theoSeaIsp)
    { m_theoSeaIsp = theoSeaIsp; }
    double realSeaIsp() const
    { return m_realSeaIsp; }
    void setRealSeaIsp(double realSeaIsp)
    { m_realSeaIsp = realSeaIsp; }
    double theoVacuumIsp() const
    { return m_theoVacuumIsp; }
    void setTheoVacuumIsp(double theoVacuumIsp)
    { m_theoVacuumIsp = theoVacuumIsp; }
    double realVacuumIsp() const
    { return m_realVacuumIsp; }
    void setRealVacuumIsp(double realVacuumIsp)
    { m_realVacuumIsp = realVacuumIsp; }
    double thrustCoeff() const
    { return m_thrustCoeff; }
    void setThrustCoeff(double thrustCoeff)
    { m_thrustCoeff = thrustCoeff; }
    double charactVelocity() const
    { return m_charactVelocity; }
    void setCharactVelocity(double charactVelocity)
    { m_charactVelocity = charactVelocity; }
    double thrustCoeffEff() const
    { return m_thrustCoeffEff; }
    void setThrustCoeffEff(double thrustCoeffEff)
    { m_thrustCoeffEff = thrustCoeffEff; }
    double charactVelocityEff() const
    { return m_charactVelocityEff; }
    void setCharactVelocityEff(double charactVelocityEff)
    { m_charactVelocityEff = charactVelocityEff; }
    double totalIspEff() const
    { return m_totalIspEff; }
    void setTotalIspEff(double totalIspEff)
    { m_totalIspEff = totalIspEff; }
    double nominalMassFlow() const
    { return m_nominalMassFlow; }
    void setNominalMassFlow(double nominalMassFlow)
    { m_nominalMassFlow = nominalMassFlow; }
    double nominalMassFlowPerEngine() const
    { return m_nominalMassFlowPerEngine; }
    void setNominalMassFlowPerEngine(double nominalMassFlowPerEngine)
    { m_nominalMassFlowPerEngine = nominalMassFlowPerEngine; }
    double gammaExhaust() const
    { return m_gammaExhaust; }
    void setGammaExhaust(double gammaExhaust)
    { m_gammaExhaust = gammaExhaust; }
    double minOperativeAlt() const
    { return m_minOperativeAlt; }
    void setMinOperativeAlt(double minOperativeAlt)
    { m_minOperativeAlt = minOperativeAlt; }
    QSharedPointer<ScenarioOptVarBool> throttle() const
    { return m_throttle; }
    void setThrottle(QSharedPointer<ScenarioOptVarBool> throttle)
    { m_throttle = throttle; }
    QSharedPointer<ScenarioOptVarBool> restart() const
    { return m_restart; }
    void setRestart(QSharedPointer<ScenarioOptVarBool> restart)
    { m_restart = restart; }

private:
    double m_seaThrust;
    double m_seaThrustPerEngine;
    double m_vacuumThrust;
    double m_vacuumThrustPerEngine;
    double m_theoOptIsp;
    double m_realOptIsp;
    double m_theoSeaIsp;
    double m_realSeaIsp;
    double m_theoVacuumIsp;
    double m_realVacuumIsp;
    double m_thrustCoeff;
    double m_charactVelocity;
    double m_thrustCoeffEff;
    double m_charactVelocityEff;
    double m_totalIspEff;
    double m_nominalMassFlow;
    double m_nominalMassFlowPerEngine;
    double m_gammaExhaust;
    double m_minOperativeAlt;
    QSharedPointer<ScenarioOptVarBool> m_throttle;
    QSharedPointer<ScenarioOptVarBool> m_restart;
};


// ScenarioLVDevelopmentCostsType
class ScenarioLVDevelopmentCostsType : public ScenarioObject
{
public:
    ScenarioLVDevelopmentCostsType();
    static ScenarioLVDevelopmentCostsType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "LVDevelopmentCostsType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double enginef2() const
    { return m_enginef2; }
    void setEnginef2(double enginef2)
    { m_enginef2 = enginef2; }
    double enginef5() const
    { return m_enginef5; }
    void setEnginef5(double enginef5)
    { m_enginef5 = enginef5; }
    double engineDevelopmentCost() const
    { return m_engineDevelopmentCost; }
    void setEngineDevelopmentCost(double engineDevelopmentCost)
    { m_engineDevelopmentCost = engineDevelopmentCost; }
    double systemf2() const
    { return m_systemf2; }
    void setSystemf2(double systemf2)
    { m_systemf2 = systemf2; }
    double systemDevelopmentCost() const
    { return m_systemDevelopmentCost; }
    void setSystemDevelopmentCost(double systemDevelopmentCost)
    { m_systemDevelopmentCost = systemDevelopmentCost; }

private:
    double m_enginef2;
    double m_enginef5;
    double m_engineDevelopmentCost;
    double m_systemf2;
    double m_systemDevelopmentCost;
};


// ScenarioLVProductionCostsType
class ScenarioLVProductionCostsType : public ScenarioObject
{
public:
    ScenarioLVProductionCostsType();
    static ScenarioLVProductionCostsType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "LVProductionCostsType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    int totalNumberOfEngines() const
    { return m_totalNumberOfEngines; }
    void setTotalNumberOfEngines(int totalNumberOfEngines)
    { m_totalNumberOfEngines = totalNumberOfEngines; }
    double enginesLearningFactor() const
    { return m_enginesLearningFactor; }
    void setEnginesLearningFactor(double enginesLearningFactor)
    { m_enginesLearningFactor = enginesLearningFactor; }
    int totalNumberOfSystems() const
    { return m_totalNumberOfSystems; }
    void setTotalNumberOfSystems(int totalNumberOfSystems)
    { m_totalNumberOfSystems = totalNumberOfSystems; }
    double systemsLearningFactor() const
    { return m_systemsLearningFactor; }
    void setSystemsLearningFactor(double systemsLearningFactor)
    { m_systemsLearningFactor = systemsLearningFactor; }
    double totalEngineProductionCost() const
    { return m_totalEngineProductionCost; }
    void setTotalEngineProductionCost(double totalEngineProductionCost)
    { m_totalEngineProductionCost = totalEngineProductionCost; }
    double totalSystemProductionCost() const
    { return m_totalSystemProductionCost; }
    void setTotalSystemProductionCost(double totalSystemProductionCost)
    { m_totalSystemProductionCost = totalSystemProductionCost; }

private:
    int m_totalNumberOfEngines;
    double m_enginesLearningFactor;
    int m_totalNumberOfSystems;
    double m_systemsLearningFactor;
    double m_totalEngineProductionCost;
    double m_totalSystemProductionCost;
};


// ScenarioLVTotalProgramCostsType
class ScenarioLVTotalProgramCostsType : public ScenarioObject
{
public:
    ScenarioLVTotalProgramCostsType();
    static ScenarioLVTotalProgramCostsType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "LVTotalProgramCostsType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double lifeCycleCostMY() const
    { return m_lifeCycleCostMY; }
    void setLifeCycleCostMY(double lifeCycleCostMY)
    { m_lifeCycleCostMY = lifeCycleCostMY; }
    double costPerLaunchMY() const
    { return m_costPerLaunchMY; }
    void setCostPerLaunchMY(double costPerLaunchMY)
    { m_costPerLaunchMY = costPerLaunchMY; }
    double costPerKiloMY() const
    { return m_costPerKiloMY; }
    void setCostPerKiloMY(double costPerKiloMY)
    { m_costPerKiloMY = costPerKiloMY; }
    int FYref() const
    { return m_FYref; }
    void setFYref(int FYref)
    { m_FYref = FYref; }
    double MYtoFYEuros() const
    { return m_MYtoFYEuros; }
    void setMYtoFYEuros(double MYtoFYEuros)
    { m_MYtoFYEuros = MYtoFYEuros; }
    double lifeCycleCostFYEuros() const
    { return m_lifeCycleCostFYEuros; }
    void setLifeCycleCostFYEuros(double lifeCycleCostFYEuros)
    { m_lifeCycleCostFYEuros = lifeCycleCostFYEuros; }
    double costPerLaunchFYEuros() const
    { return m_costPerLaunchFYEuros; }
    void setCostPerLaunchFYEuros(double costPerLaunchFYEuros)
    { m_costPerLaunchFYEuros = costPerLaunchFYEuros; }
    double costPerKiloFYEuros() const
    { return m_costPerKiloFYEuros; }
    void setCostPerKiloFYEuros(double costPerKiloFYEuros)
    { m_costPerKiloFYEuros = costPerKiloFYEuros; }

private:
    double m_lifeCycleCostMY;
    double m_costPerLaunchMY;
    double m_costPerKiloMY;
    int m_FYref;
    double m_MYtoFYEuros;
    double m_lifeCycleCostFYEuros;
    double m_costPerLaunchFYEuros;
    double m_costPerKiloFYEuros;
};


// ScenarioLVDirectOperationsCostsType
class ScenarioLVDirectOperationsCostsType : public ScenarioObject
{
public:
    ScenarioLVDirectOperationsCostsType();
    static ScenarioLVDirectOperationsCostsType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "LVDirectOperationsCostsType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double transportCost() const
    { return m_transportCost; }
    void setTransportCost(double transportCost)
    { m_transportCost = transportCost; }
    QSharedPointer<ScenarioOptVarInt> processingType() const
    { return m_processingType; }
    void setProcessingType(QSharedPointer<ScenarioOptVarInt> processingType)
    { m_processingType = processingType; }
    double fv() const
    { return m_fv; }
    void setFv(double fv)
    { m_fv = fv; }
    double fc() const
    { return m_fc; }
    void setFc(double fc)
    { m_fc = fc; }
    double groundOperationsCost() const
    { return m_groundOperationsCost; }
    void setGroundOperationsCost(double groundOperationsCost)
    { m_groundOperationsCost = groundOperationsCost; }
    double Qn() const
    { return m_Qn; }
    void setQn(double Qn)
    { m_Qn = Qn; }
    double flightOperationsCost() const
    { return m_flightOperationsCost; }
    void setFlightOperationsCost(double flightOperationsCost)
    { m_flightOperationsCost = flightOperationsCost; }
    double propellantsCost() const
    { return m_propellantsCost; }
    void setPropellantsCost(double propellantsCost)
    { m_propellantsCost = propellantsCost; }
    double insuranceFee() const
    { return m_insuranceFee; }
    void setInsuranceFee(double insuranceFee)
    { m_insuranceFee = insuranceFee; }

private:
    double m_transportCost;
    QSharedPointer<ScenarioOptVarInt> m_processingType;
    double m_fv;
    double m_fc;
    double m_groundOperationsCost;
    double m_Qn;
    double m_flightOperationsCost;
    double m_propellantsCost;
    double m_insuranceFee;
};


// ScenarioLVIndirectOperationsCostsType
class ScenarioLVIndirectOperationsCostsType : public ScenarioObject
{
public:
    ScenarioLVIndirectOperationsCostsType();
    static ScenarioLVIndirectOperationsCostsType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "LVIndirectOperationsCostsType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double groundFacilitiesBuildingCost() const
    { return m_groundFacilitiesBuildingCost; }
    void setGroundFacilitiesBuildingCost(double groundFacilitiesBuildingCost)
    { m_groundFacilitiesBuildingCost = groundFacilitiesBuildingCost; }
    double launchSiteCostPerYear() const
    { return m_launchSiteCostPerYear; }
    void setLaunchSiteCostPerYear(double launchSiteCostPerYear)
    { m_launchSiteCostPerYear = launchSiteCostPerYear; }
    double personnelCostPerYear() const
    { return m_personnelCostPerYear; }
    void setPersonnelCostPerYear(double personnelCostPerYear)
    { m_personnelCostPerYear = personnelCostPerYear; }

private:
    double m_groundFacilitiesBuildingCost;
    double m_launchSiteCostPerYear;
    double m_personnelCostPerYear;
};


// ScenarioLVSeparationType
class ScenarioLVSeparationType : public ScenarioObject
{
public:
    ScenarioLVSeparationType();
    static ScenarioLVSeparationType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "LVSeparationType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double stageSeparationReliability() const
    { return m_stageSeparationReliability; }
    void setStageSeparationReliability(double stageSeparationReliability)
    { m_stageSeparationReliability = stageSeparationReliability; }
    double boostersSetSeparationReliability() const
    { return m_boostersSetSeparationReliability; }
    void setBoostersSetSeparationReliability(double boostersSetSeparationReliability)
    { m_boostersSetSeparationReliability = boostersSetSeparationReliability; }
    double fairingSeparationReliability() const
    { return m_fairingSeparationReliability; }
    void setFairingSeparationReliability(double fairingSeparationReliability)
    { m_fairingSeparationReliability = fairingSeparationReliability; }
    double payloadSeparationReliability() const
    { return m_payloadSeparationReliability; }
    void setPayloadSeparationReliability(double payloadSeparationReliability)
    { m_payloadSeparationReliability = payloadSeparationReliability; }

private:
    double m_stageSeparationReliability;
    double m_boostersSetSeparationReliability;
    double m_fairingSeparationReliability;
    double m_payloadSeparationReliability;
};


// ScenarioLVPropulsionReliabilityType
class ScenarioLVPropulsionReliabilityType : public ScenarioObject
{
public:
    ScenarioLVPropulsionReliabilityType();
    static ScenarioLVPropulsionReliabilityType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "LVPropulsionReliabilityType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double igniterReliability() const
    { return m_igniterReliability; }
    void setIgniterReliability(double igniterReliability)
    { m_igniterReliability = igniterReliability; }
    double feedFailureRate() const
    { return m_feedFailureRate; }
    void setFeedFailureRate(double feedFailureRate)
    { m_feedFailureRate = feedFailureRate; }
    double grainFailureRate() const
    { return m_grainFailureRate; }
    void setGrainFailureRate(double grainFailureRate)
    { m_grainFailureRate = grainFailureRate; }
    double chamberFailureRate() const
    { return m_chamberFailureRate; }
    void setChamberFailureRate(double chamberFailureRate)
    { m_chamberFailureRate = chamberFailureRate; }
    double nozzleFailureRate() const
    { return m_nozzleFailureRate; }
    void setNozzleFailureRate(double nozzleFailureRate)
    { m_nozzleFailureRate = nozzleFailureRate; }
    double tvcFailureRate() const
    { return m_tvcFailureRate; }
    void setTvcFailureRate(double tvcFailureRate)
    { m_tvcFailureRate = tvcFailureRate; }
    double singleEngineOverallFailureRate() const
    { return m_singleEngineOverallFailureRate; }
    void setSingleEngineOverallFailureRate(double singleEngineOverallFailureRate)
    { m_singleEngineOverallFailureRate = singleEngineOverallFailureRate; }
    double propulsionOverallFailureRate() const
    { return m_propulsionOverallFailureRate; }
    void setPropulsionOverallFailureRate(double propulsionOverallFailureRate)
    { m_propulsionOverallFailureRate = propulsionOverallFailureRate; }

private:
    double m_igniterReliability;
    double m_feedFailureRate;
    double m_grainFailureRate;
    double m_chamberFailureRate;
    double m_nozzleFailureRate;
    double m_tvcFailureRate;
    double m_singleEngineOverallFailureRate;
    double m_propulsionOverallFailureRate;
};


// ScenarioLVTakeoffReliabilityType
class ScenarioLVTakeoffReliabilityType : public ScenarioObject
{
public:
    ScenarioLVTakeoffReliabilityType();
    static ScenarioLVTakeoffReliabilityType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "LVTakeoffReliabilityType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double launchSiteReliability() const
    { return m_launchSiteReliability; }
    void setLaunchSiteReliability(double launchSiteReliability)
    { m_launchSiteReliability = launchSiteReliability; }
    double ignitionReliability() const
    { return m_ignitionReliability; }
    void setIgnitionReliability(double ignitionReliability)
    { m_ignitionReliability = ignitionReliability; }
    double controlMarginReliability() const
    { return m_controlMarginReliability; }
    void setControlMarginReliability(double controlMarginReliability)
    { m_controlMarginReliability = controlMarginReliability; }
    double launchOverallReliability() const
    { return m_launchOverallReliability; }
    void setLaunchOverallReliability(double launchOverallReliability)
    { m_launchOverallReliability = launchOverallReliability; }

private:
    double m_launchSiteReliability;
    double m_ignitionReliability;
    double m_controlMarginReliability;
    double m_launchOverallReliability;
};


// ScenarioLVTakeOffType
class ScenarioLVTakeOffType : public ScenarioObject
{
public:
    ScenarioLVTakeOffType();
    static ScenarioLVTakeOffType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "LVTakeOffType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double padClearingAlt() const
    { return m_padClearingAlt; }
    void setPadClearingAlt(double padClearingAlt)
    { m_padClearingAlt = padClearingAlt; }
    QSharedPointer<ScenarioOptVarDouble> maxPitchOverAngle() const
    { return m_maxPitchOverAngle; }
    void setMaxPitchOverAngle(QSharedPointer<ScenarioOptVarDouble> maxPitchOverAngle)
    { m_maxPitchOverAngle = maxPitchOverAngle; }
    double pitchOverDuration() const
    { return m_pitchOverDuration; }
    void setPitchOverDuration(double pitchOverDuration)
    { m_pitchOverDuration = pitchOverDuration; }
    double pitchOverDecayTime() const
    { return m_pitchOverDecayTime; }
    void setPitchOverDecayTime(double pitchOverDecayTime)
    { m_pitchOverDecayTime = pitchOverDecayTime; }
    QSharedPointer<ScenarioOptVarDouble> pitchOverHeadingAngle() const
    { return m_pitchOverHeadingAngle; }
    void setPitchOverHeadingAngle(QSharedPointer<ScenarioOptVarDouble> pitchOverHeadingAngle)
    { m_pitchOverHeadingAngle = pitchOverHeadingAngle; }

private:
    double m_padClearingAlt;
    QSharedPointer<ScenarioOptVarDouble> m_maxPitchOverAngle;
    double m_pitchOverDuration;
    double m_pitchOverDecayTime;
    QSharedPointer<ScenarioOptVarDouble> m_pitchOverHeadingAngle;
};


// ScenarioLVIgnitionsType
class ScenarioLVIgnitionsType : public ScenarioObject
{
public:
    ScenarioLVIgnitionsType();
    static ScenarioLVIgnitionsType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "LVIgnitionsType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioOptVarBool> coreIgnitionDelayOption() const
    { return m_coreIgnitionDelayOption; }
    void setCoreIgnitionDelayOption(QSharedPointer<ScenarioOptVarBool> coreIgnitionDelayOption)
    { m_coreIgnitionDelayOption = coreIgnitionDelayOption; }
    QSharedPointer<ScenarioOptVarDouble> coreIgnitionDelayTime() const
    { return m_coreIgnitionDelayTime; }
    void setCoreIgnitionDelayTime(QSharedPointer<ScenarioOptVarDouble> coreIgnitionDelayTime)
    { m_coreIgnitionDelayTime = coreIgnitionDelayTime; }
    QSharedPointer<ScenarioOptVarBool> secondBoostersSetIgnitionDelayOption() const
    { return m_secondBoostersSetIgnitionDelayOption; }
    void setSecondBoostersSetIgnitionDelayOption(QSharedPointer<ScenarioOptVarBool> secondBoostersSetIgnitionDelayOption)
    { m_secondBoostersSetIgnitionDelayOption = secondBoostersSetIgnitionDelayOption; }
    QSharedPointer<ScenarioOptVarDouble> secondBoostersSetIgnitionDelayTime() const
    { return m_secondBoostersSetIgnitionDelayTime; }
    void setSecondBoostersSetIgnitionDelayTime(QSharedPointer<ScenarioOptVarDouble> secondBoostersSetIgnitionDelayTime)
    { m_secondBoostersSetIgnitionDelayTime = secondBoostersSetIgnitionDelayTime; }
    const QList<int>& nThrustControlNodes() const
    { return m_nThrustControlNodes; }
    QList<int>& nThrustControlNodes()
    { return m_nThrustControlNodes; }
    void setNThrustControlNodes(QList<int> nThrustControlNodes)
    { m_nThrustControlNodes = nThrustControlNodes; }

private:
    QSharedPointer<ScenarioOptVarBool> m_coreIgnitionDelayOption;
    QSharedPointer<ScenarioOptVarDouble> m_coreIgnitionDelayTime;
    QSharedPointer<ScenarioOptVarBool> m_secondBoostersSetIgnitionDelayOption;
    QSharedPointer<ScenarioOptVarDouble> m_secondBoostersSetIgnitionDelayTime;
    QList<int> m_nThrustControlNodes;
};


// ScenarioLVAtmosphericFlightType
class ScenarioLVAtmosphericFlightType : public ScenarioObject
{
public:
    ScenarioLVAtmosphericFlightType();
    static ScenarioLVAtmosphericFlightType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "LVAtmosphericFlightType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    const QList<double>& optimizedPitchValues() const
    { return m_optimizedPitchValues; }
    QList<double>& optimizedPitchValues()
    { return m_optimizedPitchValues; }
    void setOptimizedPitchValues(QList<double> optimizedPitchValues)
    { m_optimizedPitchValues = optimizedPitchValues; }
    const QList<double>& optimizedYawValues() const
    { return m_optimizedYawValues; }
    QList<double>& optimizedYawValues()
    { return m_optimizedYawValues; }
    void setOptimizedYawValues(QList<double> optimizedYawValues)
    { m_optimizedYawValues = optimizedYawValues; }
    const QList<double>& optimizedThrustValues() const
    { return m_optimizedThrustValues; }
    QList<double>& optimizedThrustValues()
    { return m_optimizedThrustValues; }
    void setOptimizedThrustValues(QList<double> optimizedThrustValues)
    { m_optimizedThrustValues = optimizedThrustValues; }
    int nPitchControlNodes() const
    { return m_nPitchControlNodes; }
    void setNPitchControlNodes(int nPitchControlNodes)
    { m_nPitchControlNodes = nPitchControlNodes; }
    int nYawControlNodes() const
    { return m_nYawControlNodes; }
    void setNYawControlNodes(int nYawControlNodes)
    { m_nYawControlNodes = nYawControlNodes; }

private:
    QList<double> m_optimizedPitchValues;
    QList<double> m_optimizedYawValues;
    QList<double> m_optimizedThrustValues;
    int m_nPitchControlNodes;
    int m_nYawControlNodes;
};


// ScenarioLVExoatmosphericFlightType
class ScenarioLVExoatmosphericFlightType : public ScenarioObject
{
public:
    ScenarioLVExoatmosphericFlightType();
    static ScenarioLVExoatmosphericFlightType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "LVExoatmosphericFlightType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioOptVarDouble> bilinearLawInitPitch() const
    { return m_bilinearLawInitPitch; }
    void setBilinearLawInitPitch(QSharedPointer<ScenarioOptVarDouble> bilinearLawInitPitch)
    { m_bilinearLawInitPitch = bilinearLawInitPitch; }
    QSharedPointer<ScenarioOptVarDouble> bilinearLawFinalPitch() const
    { return m_bilinearLawFinalPitch; }
    void setBilinearLawFinalPitch(QSharedPointer<ScenarioOptVarDouble> bilinearLawFinalPitch)
    { m_bilinearLawFinalPitch = bilinearLawFinalPitch; }
    QSharedPointer<ScenarioOptVarDouble> bilinearLawParam() const
    { return m_bilinearLawParam; }
    void setBilinearLawParam(QSharedPointer<ScenarioOptVarDouble> bilinearLawParam)
    { m_bilinearLawParam = bilinearLawParam; }
    int nYawControlNodes() const
    { return m_nYawControlNodes; }
    void setNYawControlNodes(int nYawControlNodes)
    { m_nYawControlNodes = nYawControlNodes; }
    bool circBurnOption() const
    { return m_circBurnOption; }
    void setCircBurnOption(bool circBurnOption)
    { m_circBurnOption = circBurnOption; }
    QSharedPointer<ScenarioOptVarDouble> circBurnTime() const
    { return m_circBurnTime; }
    void setCircBurnTime(QSharedPointer<ScenarioOptVarDouble> circBurnTime)
    { m_circBurnTime = circBurnTime; }

private:
    QSharedPointer<ScenarioOptVarDouble> m_bilinearLawInitPitch;
    QSharedPointer<ScenarioOptVarDouble> m_bilinearLawFinalPitch;
    QSharedPointer<ScenarioOptVarDouble> m_bilinearLawParam;
    int m_nYawControlNodes;
    bool m_circBurnOption;
    QSharedPointer<ScenarioOptVarDouble> m_circBurnTime;
};


// ScenarioLVTrajectoryConstraintsType
class ScenarioLVTrajectoryConstraintsType : public ScenarioObject
{
public:
    ScenarioLVTrajectoryConstraintsType();
    static ScenarioLVTrajectoryConstraintsType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "LVTrajectoryConstraintsType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double finalSemiaxisError() const
    { return m_finalSemiaxisError; }
    void setFinalSemiaxisError(double finalSemiaxisError)
    { m_finalSemiaxisError = finalSemiaxisError; }
    double finalEccError() const
    { return m_finalEccError; }
    void setFinalEccError(double finalEccError)
    { m_finalEccError = finalEccError; }
    double finalInclError() const
    { return m_finalInclError; }
    void setFinalInclError(double finalInclError)
    { m_finalInclError = finalInclError; }
    double axialAccCstrViolation() const
    { return m_axialAccCstrViolation; }
    void setAxialAccCstrViolation(double axialAccCstrViolation)
    { m_axialAccCstrViolation = axialAccCstrViolation; }
    double heatFluxCstrViolation() const
    { return m_heatFluxCstrViolation; }
    void setHeatFluxCstrViolation(double heatFluxCstrViolation)
    { m_heatFluxCstrViolation = heatFluxCstrViolation; }
    double dynPressCstrViolation() const
    { return m_dynPressCstrViolation; }
    void setDynPressCstrViolation(double dynPressCstrViolation)
    { m_dynPressCstrViolation = dynPressCstrViolation; }
    double controllabilityCstrViolation() const
    { return m_controllabilityCstrViolation; }
    void setControllabilityCstrViolation(double controllabilityCstrViolation)
    { m_controllabilityCstrViolation = controllabilityCstrViolation; }

private:
    double m_finalSemiaxisError;
    double m_finalEccError;
    double m_finalInclError;
    double m_axialAccCstrViolation;
    double m_heatFluxCstrViolation;
    double m_dynPressCstrViolation;
    double m_controllabilityCstrViolation;
};


// ScenarioREV
class ScenarioREV : public ScenarioParticipantType
{
public:
    ScenarioREV();
    static ScenarioREV* create(const QDomElement& e);
    virtual QString elementName() const
    { return "REV"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioElementIdentifierType> ElementIdentifier() const
    { return m_ElementIdentifier; }
    void setElementIdentifier(QSharedPointer<ScenarioElementIdentifierType> ElementIdentifier)
    { m_ElementIdentifier = ElementIdentifier; }
    QSharedPointer<ScenarioREVProgramType> REVProgram() const
    { return m_REVProgram; }
    void setREVProgram(QSharedPointer<ScenarioREVProgramType> REVProgram)
    { m_REVProgram = REVProgram; }
    QSharedPointer<ScenarioREVMissionType> REVMission() const
    { return m_REVMission; }
    void setREVMission(QSharedPointer<ScenarioREVMissionType> REVMission)
    { m_REVMission = REVMission; }
    QSharedPointer<ScenarioREVSystemType> REVSystem() const
    { return m_REVSystem; }
    void setREVSystem(QSharedPointer<ScenarioREVSystemType> REVSystem)
    { m_REVSystem = REVSystem; }
    QSharedPointer<ScenarioOptimization> Optimization() const
    { return m_Optimization; }
    void setOptimization(QSharedPointer<ScenarioOptimization> Optimization)
    { m_Optimization = Optimization; }
    QSharedPointer<ScenarioOutputFiles> OutputFiles() const
    { return m_OutputFiles; }
    void setOutputFiles(QSharedPointer<ScenarioOutputFiles> OutputFiles)
    { m_OutputFiles = OutputFiles; }

private:
    QSharedPointer<ScenarioElementIdentifierType> m_ElementIdentifier;
    QSharedPointer<ScenarioREVProgramType> m_REVProgram;
    QSharedPointer<ScenarioREVMissionType> m_REVMission;
    QSharedPointer<ScenarioREVSystemType> m_REVSystem;
    QSharedPointer<ScenarioOptimization> m_Optimization;
    QSharedPointer<ScenarioOutputFiles> m_OutputFiles;
};


// ScenarioREVProgramType
class ScenarioREVProgramType : public ScenarioObject
{
public:
    ScenarioREVProgramType();
    static ScenarioREVProgramType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "REVProgramType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    int nMissions() const
    { return m_nMissions; }
    void setNMissions(int nMissions)
    { m_nMissions = nMissions; }
    double nYearsOps() const
    { return m_nYearsOps; }
    void setNYearsOps(double nYearsOps)
    { m_nYearsOps = nYearsOps; }

private:
    int m_nMissions;
    double m_nYearsOps;
};


// ScenarioREVMissionType
class ScenarioREVMissionType : public ScenarioObject
{
public:
    ScenarioREVMissionType();
    static ScenarioREVMissionType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "REVMissionType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioREVTrajectoryPlanType> REVTrajectoryPlan() const
    { return m_REVTrajectoryPlan; }
    void setREVTrajectoryPlan(QSharedPointer<ScenarioREVTrajectoryPlanType> REVTrajectoryPlan)
    { m_REVTrajectoryPlan = REVTrajectoryPlan; }
    QSharedPointer<ScenarioREVPayloadType> Payload() const
    { return m_Payload; }
    void setPayload(QSharedPointer<ScenarioREVPayloadType> Payload)
    { m_Payload = Payload; }

private:
    QSharedPointer<ScenarioREVTrajectoryPlanType> m_REVTrajectoryPlan;
    QSharedPointer<ScenarioREVPayloadType> m_Payload;
};


// ScenarioREVTrajectoryPlanType
class ScenarioREVTrajectoryPlanType : public ScenarioObject
{
public:
    ScenarioREVTrajectoryPlanType();
    static ScenarioREVTrajectoryPlanType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "REVTrajectoryPlanType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    const QList<QSharedPointer<ScenarioAbstractTrajectoryType> >& AbstractTrajectory() const
    { return m_AbstractTrajectory; }
    QList<QSharedPointer<ScenarioAbstractTrajectoryType> >& AbstractTrajectory()
    { return m_AbstractTrajectory; }
    void setAbstractTrajectory(QList<QSharedPointer<ScenarioAbstractTrajectoryType> > AbstractTrajectory)
    { m_AbstractTrajectory = AbstractTrajectory; }

private:
    QList<QSharedPointer<ScenarioAbstractTrajectoryType> > m_AbstractTrajectory;
};


// ScenarioEntryArcType
class ScenarioEntryArcType : public ScenarioAbstractTrajectoryType
{
public:
    ScenarioEntryArcType();
    static ScenarioEntryArcType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "EntryArcType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioElementIdentifierType> ElementIdentifier() const
    { return m_ElementIdentifier; }
    void setElementIdentifier(QSharedPointer<ScenarioElementIdentifierType> ElementIdentifier)
    { m_ElementIdentifier = ElementIdentifier; }
    QSharedPointer<ScenarioEnvironmentType> Environment() const
    { return m_Environment; }
    void setEnvironment(QSharedPointer<ScenarioEnvironmentType> Environment)
    { m_Environment = Environment; }
    QSharedPointer<ScenarioTimeLine> TimeLine() const
    { return m_TimeLine; }
    void setTimeLine(QSharedPointer<ScenarioTimeLine> TimeLine)
    { m_TimeLine = TimeLine; }
    QSharedPointer<ScenarioInitialPositionType> InitialPosition() const
    { return m_InitialPosition; }
    void setInitialPosition(QSharedPointer<ScenarioInitialPositionType> InitialPosition)
    { m_InitialPosition = InitialPosition; }
    QSharedPointer<ScenarioInitialAttitudeType> InitialAttitude() const
    { return m_InitialAttitude; }
    void setInitialAttitude(QSharedPointer<ScenarioInitialAttitudeType> InitialAttitude)
    { m_InitialAttitude = InitialAttitude; }
    QSharedPointer<ScenarioPropagationPositionType> PropagationPosition() const
    { return m_PropagationPosition; }
    void setPropagationPosition(QSharedPointer<ScenarioPropagationPositionType> PropagationPosition)
    { m_PropagationPosition = PropagationPosition; }
    QSharedPointer<ScenarioPropagationAttitudeType> PropagationAttitude() const
    { return m_PropagationAttitude; }
    void setPropagationAttitude(QSharedPointer<ScenarioPropagationAttitudeType> PropagationAttitude)
    { m_PropagationAttitude = PropagationAttitude; }
    QSharedPointer<ScenarioREVConstraintsType> Constraints() const
    { return m_Constraints; }
    void setConstraints(QSharedPointer<ScenarioREVConstraintsType> Constraints)
    { m_Constraints = Constraints; }
    QSharedPointer<ScenarioREVFinalStateType> targetFinalState() const
    { return m_targetFinalState; }
    void setTargetFinalState(QSharedPointer<ScenarioREVFinalStateType> targetFinalState)
    { m_targetFinalState = targetFinalState; }
    QSharedPointer<ScenarioREVConstraintsViolationType> ConstraintsViolation() const
    { return m_ConstraintsViolation; }
    void setConstraintsViolation(QSharedPointer<ScenarioREVConstraintsViolationType> ConstraintsViolation)
    { m_ConstraintsViolation = ConstraintsViolation; }
    QSharedPointer<ScenarioEntryCharacteristicsType> EntryCharacteristics() const
    { return m_EntryCharacteristics; }
    void setEntryCharacteristics(QSharedPointer<ScenarioEntryCharacteristicsType> EntryCharacteristics)
    { m_EntryCharacteristics = EntryCharacteristics; }

private:
    QSharedPointer<ScenarioElementIdentifierType> m_ElementIdentifier;
    QSharedPointer<ScenarioEnvironmentType> m_Environment;
    QSharedPointer<ScenarioTimeLine> m_TimeLine;
    QSharedPointer<ScenarioInitialPositionType> m_InitialPosition;
    QSharedPointer<ScenarioInitialAttitudeType> m_InitialAttitude;
    QSharedPointer<ScenarioPropagationPositionType> m_PropagationPosition;
    QSharedPointer<ScenarioPropagationAttitudeType> m_PropagationAttitude;
    QSharedPointer<ScenarioREVConstraintsType> m_Constraints;
    QSharedPointer<ScenarioREVFinalStateType> m_targetFinalState;
    QSharedPointer<ScenarioREVConstraintsViolationType> m_ConstraintsViolation;
    QSharedPointer<ScenarioEntryCharacteristicsType> m_EntryCharacteristics;
};


// ScenarioREVFinalStateType
class ScenarioREVFinalStateType : public ScenarioObject
{
public:
    ScenarioREVFinalStateType();
    static ScenarioREVFinalStateType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "REVFinalStateType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QString entryType() const
    { return m_entryType; }
    void setEntryType(QString entryType)
    { m_entryType = entryType; }
    int degreesOfFreedom() const
    { return m_degreesOfFreedom; }
    void setDegreesOfFreedom(int degreesOfFreedom)
    { m_degreesOfFreedom = degreesOfFreedom; }
    QString attitudeController() const
    { return m_attitudeController; }
    void setAttitudeController(QString attitudeController)
    { m_attitudeController = attitudeController; }
    QSharedPointer<ScenarioREVDispersionAnalysisType> DispersionAnalysis() const
    { return m_DispersionAnalysis; }
    void setDispersionAnalysis(QSharedPointer<ScenarioREVDispersionAnalysisType> DispersionAnalysis)
    { m_DispersionAnalysis = DispersionAnalysis; }

private:
    QString m_entryType;
    int m_degreesOfFreedom;
    QString m_attitudeController;
    QSharedPointer<ScenarioREVDispersionAnalysisType> m_DispersionAnalysis;
};


// ScenarioREVFinalPositionStateType
class ScenarioREVFinalPositionStateType : public ScenarioObject
{
public:
    ScenarioREVFinalPositionStateType();
    static ScenarioREVFinalPositionStateType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "REVFinalPositionStateType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioAbstract6DOFPositionType> Abstract6DOFPosition() const
    { return m_Abstract6DOFPosition; }
    void setAbstract6DOFPosition(QSharedPointer<ScenarioAbstract6DOFPositionType> Abstract6DOFPosition)
    { m_Abstract6DOFPosition = Abstract6DOFPosition; }

private:
    QSharedPointer<ScenarioAbstract6DOFPositionType> m_Abstract6DOFPosition;
};


// ScenarioREVDispersionAnalysisType
class ScenarioREVDispersionAnalysisType : public ScenarioObject
{
public:
    ScenarioREVDispersionAnalysisType();
    static ScenarioREVDispersionAnalysisType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "REVDispersionAnalysisType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    int nrSimulations() const
    { return m_nrSimulations; }
    void setNrSimulations(int nrSimulations)
    { m_nrSimulations = nrSimulations; }
    double dispCD() const
    { return m_dispCD; }
    void setDispCD(double dispCD)
    { m_dispCD = dispCD; }
    double dispCS() const
    { return m_dispCS; }
    void setDispCS(double dispCS)
    { m_dispCS = dispCS; }
    double dispCL() const
    { return m_dispCL; }
    void setDispCL(double dispCL)
    { m_dispCL = dispCL; }
    double dispCl() const
    { return m_dispCl; }
    void setDispCl(double dispCl)
    { m_dispCl = dispCl; }
    double dispCm() const
    { return m_dispCm; }
    void setDispCm(double dispCm)
    { m_dispCm = dispCm; }
    double dispCn() const
    { return m_dispCn; }
    void setDispCn(double dispCn)
    { m_dispCn = dispCn; }
    double dispDensity() const
    { return m_dispDensity; }
    void setDispDensity(double dispDensity)
    { m_dispDensity = dispDensity; }
    double dispSpeedOfSound() const
    { return m_dispSpeedOfSound; }
    void setDispSpeedOfSound(double dispSpeedOfSound)
    { m_dispSpeedOfSound = dispSpeedOfSound; }
    double dispMass() const
    { return m_dispMass; }
    void setDispMass(double dispMass)
    { m_dispMass = dispMass; }
    double dispInitialPosition() const
    { return m_dispInitialPosition; }
    void setDispInitialPosition(double dispInitialPosition)
    { m_dispInitialPosition = dispInitialPosition; }
    double dispInitialAttitude() const
    { return m_dispInitialAttitude; }
    void setDispInitialAttitude(double dispInitialAttitude)
    { m_dispInitialAttitude = dispInitialAttitude; }

private:
    int m_nrSimulations;
    double m_dispCD;
    double m_dispCS;
    double m_dispCL;
    double m_dispCl;
    double m_dispCm;
    double m_dispCn;
    double m_dispDensity;
    double m_dispSpeedOfSound;
    double m_dispMass;
    double m_dispInitialPosition;
    double m_dispInitialAttitude;
};


// ScenarioEntryCharacteristicsType
class ScenarioEntryCharacteristicsType : public ScenarioObject
{
public:
    ScenarioEntryCharacteristicsType();
    static ScenarioEntryCharacteristicsType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "EntryCharacteristicsType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QString entryWindowAnalysis() const
    { return m_entryWindowAnalysis; }
    void setEntryWindowAnalysis(QString entryWindowAnalysis)
    { m_entryWindowAnalysis = entryWindowAnalysis; }
    bool optimizeDeorbitBurnOption() const
    { return m_optimizeDeorbitBurnOption; }
    void setOptimizeDeorbitBurnOption(bool optimizeDeorbitBurnOption)
    { m_optimizeDeorbitBurnOption = optimizeDeorbitBurnOption; }
    QSharedPointer<ScenarioOptVarBool> landingSeaOrGround() const
    { return m_landingSeaOrGround; }
    void setLandingSeaOrGround(QSharedPointer<ScenarioOptVarBool> landingSeaOrGround)
    { m_landingSeaOrGround = landingSeaOrGround; }
    double landingAltitude() const
    { return m_landingAltitude; }
    void setLandingAltitude(double landingAltitude)
    { m_landingAltitude = landingAltitude; }
    double maxLandingVelAtSea() const
    { return m_maxLandingVelAtSea; }
    void setMaxLandingVelAtSea(double maxLandingVelAtSea)
    { m_maxLandingVelAtSea = maxLandingVelAtSea; }
    double maxLandingVelAtGround() const
    { return m_maxLandingVelAtGround; }
    void setMaxLandingVelAtGround(double maxLandingVelAtGround)
    { m_maxLandingVelAtGround = maxLandingVelAtGround; }

private:
    QString m_entryWindowAnalysis;
    bool m_optimizeDeorbitBurnOption;
    QSharedPointer<ScenarioOptVarBool> m_landingSeaOrGround;
    double m_landingAltitude;
    double m_maxLandingVelAtSea;
    double m_maxLandingVelAtGround;
};


// ScenarioREVConstraintsViolationType
class ScenarioREVConstraintsViolationType : public ScenarioObject
{
public:
    ScenarioREVConstraintsViolationType();
    static ScenarioREVConstraintsViolationType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "REVConstraintsViolationType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double landingVelCstrViolation() const
    { return m_landingVelCstrViolation; }
    void setLandingVelCstrViolation(double landingVelCstrViolation)
    { m_landingVelCstrViolation = landingVelCstrViolation; }
    double axialAccCstrViolation() const
    { return m_axialAccCstrViolation; }
    void setAxialAccCstrViolation(double axialAccCstrViolation)
    { m_axialAccCstrViolation = axialAccCstrViolation; }
    double latAccCstrViolation() const
    { return m_latAccCstrViolation; }
    void setLatAccCstrViolation(double latAccCstrViolation)
    { m_latAccCstrViolation = latAccCstrViolation; }
    double heatFluxCstrViolation() const
    { return m_heatFluxCstrViolation; }
    void setHeatFluxCstrViolation(double heatFluxCstrViolation)
    { m_heatFluxCstrViolation = heatFluxCstrViolation; }
    double integratedheatLoadCstrViolation() const
    { return m_integratedheatLoadCstrViolation; }
    void setIntegratedheatLoadCstrViolation(double integratedheatLoadCstrViolation)
    { m_integratedheatLoadCstrViolation = integratedheatLoadCstrViolation; }
    double dynPressCstrViolation() const
    { return m_dynPressCstrViolation; }
    void setDynPressCstrViolation(double dynPressCstrViolation)
    { m_dynPressCstrViolation = dynPressCstrViolation; }
    double controllabilityCstrViolation() const
    { return m_controllabilityCstrViolation; }
    void setControllabilityCstrViolation(double controllabilityCstrViolation)
    { m_controllabilityCstrViolation = controllabilityCstrViolation; }

private:
    double m_landingVelCstrViolation;
    double m_axialAccCstrViolation;
    double m_latAccCstrViolation;
    double m_heatFluxCstrViolation;
    double m_integratedheatLoadCstrViolation;
    double m_dynPressCstrViolation;
    double m_controllabilityCstrViolation;
};


// ScenarioREVPayloadType
class ScenarioREVPayloadType : public ScenarioObject
{
public:
    ScenarioREVPayloadType();
    static ScenarioREVPayloadType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "REVPayloadType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double mass() const
    { return m_mass; }
    void setMass(double mass)
    { m_mass = mass; }
    double length() const
    { return m_length; }
    void setLength(double length)
    { m_length = length; }
    double diameter() const
    { return m_diameter; }
    void setDiameter(double diameter)
    { m_diameter = diameter; }
    double COGLongPosition() const
    { return m_COGLongPosition; }
    void setCOGLongPosition(double COGLongPosition)
    { m_COGLongPosition = COGLongPosition; }
    double maxAxialAcc() const
    { return m_maxAxialAcc; }
    void setMaxAxialAcc(double maxAxialAcc)
    { m_maxAxialAcc = maxAxialAcc; }
    double maxLatAcc() const
    { return m_maxLatAcc; }
    void setMaxLatAcc(double maxLatAcc)
    { m_maxLatAcc = maxLatAcc; }
    bool crewOption() const
    { return m_crewOption; }
    void setCrewOption(bool crewOption)
    { m_crewOption = crewOption; }
    int nCrew() const
    { return m_nCrew; }
    void setNCrew(int nCrew)
    { m_nCrew = nCrew; }
    int nDaysInOrbit() const
    { return m_nDaysInOrbit; }
    void setNDaysInOrbit(int nDaysInOrbit)
    { m_nDaysInOrbit = nDaysInOrbit; }

private:
    double m_mass;
    double m_length;
    double m_diameter;
    double m_COGLongPosition;
    double m_maxAxialAcc;
    double m_maxLatAcc;
    bool m_crewOption;
    int m_nCrew;
    int m_nDaysInOrbit;
};


// ScenarioREVGeometryType
class ScenarioREVGeometryType : public ScenarioObject
{
public:
    ScenarioREVGeometryType();
    static ScenarioREVGeometryType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "REVGeometryType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double REVvolume() const
    { return m_REVvolume; }
    void setREVvolume(double REVvolume)
    { m_REVvolume = REVvolume; }
    double REVsurface() const
    { return m_REVsurface; }
    void setREVsurface(double REVsurface)
    { m_REVsurface = REVsurface; }
    double noseRadius() const
    { return m_noseRadius; }
    void setNoseRadius(double noseRadius)
    { m_noseRadius = noseRadius; }
    QSharedPointer<ScenarioOptVarString> shapeFamily() const
    { return m_shapeFamily; }
    void setShapeFamily(QSharedPointer<ScenarioOptVarString> shapeFamily)
    { m_shapeFamily = shapeFamily; }
    QString geometryFile() const
    { return m_geometryFile; }
    void setGeometryFile(QString geometryFile)
    { m_geometryFile = geometryFile; }
    QSharedPointer<ScenariocapsuleShape> capsuleShape() const
    { return m_capsuleShape; }
    void setCapsuleShape(QSharedPointer<ScenariocapsuleShape> capsuleShape)
    { m_capsuleShape = capsuleShape; }
    QSharedPointer<ScenarioprobeShape> probeShape() const
    { return m_probeShape; }
    void setProbeShape(QSharedPointer<ScenarioprobeShape> probeShape)
    { m_probeShape = probeShape; }
    QSharedPointer<ScenariobiconicShape> biconicShape() const
    { return m_biconicShape; }
    void setBiconicShape(QSharedPointer<ScenariobiconicShape> biconicShape)
    { m_biconicShape = biconicShape; }
    QSharedPointer<ScenariosphereconeShape> sphereconeShape() const
    { return m_sphereconeShape; }
    void setSphereconeShape(QSharedPointer<ScenariosphereconeShape> sphereconeShape)
    { m_sphereconeShape = sphereconeShape; }

private:
    double m_REVvolume;
    double m_REVsurface;
    double m_noseRadius;
    QSharedPointer<ScenarioOptVarString> m_shapeFamily;
    QString m_geometryFile;
    QSharedPointer<ScenariocapsuleShape> m_capsuleShape;
    QSharedPointer<ScenarioprobeShape> m_probeShape;
    QSharedPointer<ScenariobiconicShape> m_biconicShape;
    QSharedPointer<ScenariosphereconeShape> m_sphereconeShape;
};


// ScenariocapsuleShape
class ScenariocapsuleShape : public ScenarioObject
{
public:
    ScenariocapsuleShape();
    static ScenariocapsuleShape* create(const QDomElement& e);
    virtual QString elementName() const
    { return "capsuleShape"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioOptVarDouble> param1() const
    { return m_param1; }
    void setParam1(QSharedPointer<ScenarioOptVarDouble> param1)
    { m_param1 = param1; }
    QSharedPointer<ScenarioOptVarDouble> param2() const
    { return m_param2; }
    void setParam2(QSharedPointer<ScenarioOptVarDouble> param2)
    { m_param2 = param2; }
    QSharedPointer<ScenarioOptVarDouble> param3() const
    { return m_param3; }
    void setParam3(QSharedPointer<ScenarioOptVarDouble> param3)
    { m_param3 = param3; }
    QSharedPointer<ScenarioOptVarDouble> param4() const
    { return m_param4; }
    void setParam4(QSharedPointer<ScenarioOptVarDouble> param4)
    { m_param4 = param4; }

private:
    QSharedPointer<ScenarioOptVarDouble> m_param1;
    QSharedPointer<ScenarioOptVarDouble> m_param2;
    QSharedPointer<ScenarioOptVarDouble> m_param3;
    QSharedPointer<ScenarioOptVarDouble> m_param4;
};


// ScenarioprobeShape
class ScenarioprobeShape : public ScenarioObject
{
public:
    ScenarioprobeShape();
    static ScenarioprobeShape* create(const QDomElement& e);
    virtual QString elementName() const
    { return "probeShape"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioOptVarDouble> param1() const
    { return m_param1; }
    void setParam1(QSharedPointer<ScenarioOptVarDouble> param1)
    { m_param1 = param1; }
    QSharedPointer<ScenarioOptVarDouble> param2() const
    { return m_param2; }
    void setParam2(QSharedPointer<ScenarioOptVarDouble> param2)
    { m_param2 = param2; }
    QSharedPointer<ScenarioOptVarDouble> param3() const
    { return m_param3; }
    void setParam3(QSharedPointer<ScenarioOptVarDouble> param3)
    { m_param3 = param3; }
    QSharedPointer<ScenarioOptVarDouble> param4() const
    { return m_param4; }
    void setParam4(QSharedPointer<ScenarioOptVarDouble> param4)
    { m_param4 = param4; }
    QSharedPointer<ScenarioOptVarDouble> param5() const
    { return m_param5; }
    void setParam5(QSharedPointer<ScenarioOptVarDouble> param5)
    { m_param5 = param5; }

private:
    QSharedPointer<ScenarioOptVarDouble> m_param1;
    QSharedPointer<ScenarioOptVarDouble> m_param2;
    QSharedPointer<ScenarioOptVarDouble> m_param3;
    QSharedPointer<ScenarioOptVarDouble> m_param4;
    QSharedPointer<ScenarioOptVarDouble> m_param5;
};


// ScenariobiconicShape
class ScenariobiconicShape : public ScenarioObject
{
public:
    ScenariobiconicShape();
    static ScenariobiconicShape* create(const QDomElement& e);
    virtual QString elementName() const
    { return "biconicShape"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioOptVarDouble> param1() const
    { return m_param1; }
    void setParam1(QSharedPointer<ScenarioOptVarDouble> param1)
    { m_param1 = param1; }
    QSharedPointer<ScenarioOptVarDouble> param2() const
    { return m_param2; }
    void setParam2(QSharedPointer<ScenarioOptVarDouble> param2)
    { m_param2 = param2; }
    QSharedPointer<ScenarioOptVarDouble> param3() const
    { return m_param3; }
    void setParam3(QSharedPointer<ScenarioOptVarDouble> param3)
    { m_param3 = param3; }
    QSharedPointer<ScenarioOptVarDouble> param4() const
    { return m_param4; }
    void setParam4(QSharedPointer<ScenarioOptVarDouble> param4)
    { m_param4 = param4; }
    QSharedPointer<ScenarioOptVarDouble> param5() const
    { return m_param5; }
    void setParam5(QSharedPointer<ScenarioOptVarDouble> param5)
    { m_param5 = param5; }

private:
    QSharedPointer<ScenarioOptVarDouble> m_param1;
    QSharedPointer<ScenarioOptVarDouble> m_param2;
    QSharedPointer<ScenarioOptVarDouble> m_param3;
    QSharedPointer<ScenarioOptVarDouble> m_param4;
    QSharedPointer<ScenarioOptVarDouble> m_param5;
};


// ScenariosphereconeShape
class ScenariosphereconeShape : public ScenarioObject
{
public:
    ScenariosphereconeShape();
    static ScenariosphereconeShape* create(const QDomElement& e);
    virtual QString elementName() const
    { return "sphereconeShape"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioOptVarDouble> param1() const
    { return m_param1; }
    void setParam1(QSharedPointer<ScenarioOptVarDouble> param1)
    { m_param1 = param1; }
    QSharedPointer<ScenarioOptVarDouble> param2() const
    { return m_param2; }
    void setParam2(QSharedPointer<ScenarioOptVarDouble> param2)
    { m_param2 = param2; }
    QSharedPointer<ScenarioOptVarDouble> param3() const
    { return m_param3; }
    void setParam3(QSharedPointer<ScenarioOptVarDouble> param3)
    { m_param3 = param3; }

private:
    QSharedPointer<ScenarioOptVarDouble> m_param1;
    QSharedPointer<ScenarioOptVarDouble> m_param2;
    QSharedPointer<ScenarioOptVarDouble> m_param3;
};


// ScenarioREVConstraintsType
class ScenarioREVConstraintsType : public ScenarioObject
{
public:
    ScenarioREVConstraintsType();
    static ScenarioREVConstraintsType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "REVConstraintsType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double maxHeatFlux() const
    { return m_maxHeatFlux; }
    void setMaxHeatFlux(double maxHeatFlux)
    { m_maxHeatFlux = maxHeatFlux; }
    double maxHeatInput() const
    { return m_maxHeatInput; }
    void setMaxHeatInput(double maxHeatInput)
    { m_maxHeatInput = maxHeatInput; }
    double maxNormalLoad() const
    { return m_maxNormalLoad; }
    void setMaxNormalLoad(double maxNormalLoad)
    { m_maxNormalLoad = maxNormalLoad; }
    double maxQalpha() const
    { return m_maxQalpha; }
    void setMaxQalpha(double maxQalpha)
    { m_maxQalpha = maxQalpha; }
    double maxAlphaRate() const
    { return m_maxAlphaRate; }
    void setMaxAlphaRate(double maxAlphaRate)
    { m_maxAlphaRate = maxAlphaRate; }
    double maxBankRate() const
    { return m_maxBankRate; }
    void setMaxBankRate(double maxBankRate)
    { m_maxBankRate = maxBankRate; }
    double maxAltitude() const
    { return m_maxAltitude; }
    void setMaxAltitude(double maxAltitude)
    { m_maxAltitude = maxAltitude; }

private:
    double m_maxHeatFlux;
    double m_maxHeatInput;
    double m_maxNormalLoad;
    double m_maxQalpha;
    double m_maxAlphaRate;
    double m_maxBankRate;
    double m_maxAltitude;
};


// ScenarioREVSystemType
class ScenarioREVSystemType : public ScenarioObject
{
public:
    ScenarioREVSystemType();
    static ScenarioREVSystemType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "REVSystemType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioREVWeights> Weights() const
    { return m_Weights; }
    void setWeights(QSharedPointer<ScenarioREVWeights> Weights)
    { m_Weights = Weights; }
    QSharedPointer<ScenarioREVGeometryType> Geometry() const
    { return m_Geometry; }
    void setGeometry(QSharedPointer<ScenarioREVGeometryType> Geometry)
    { m_Geometry = Geometry; }
    QSharedPointer<ScenarioREVTPS> TPS() const
    { return m_TPS; }
    void setTPS(QSharedPointer<ScenarioREVTPS> TPS)
    { m_TPS = TPS; }
    QSharedPointer<ScenarioREVAeroThermodynamicsType> AeroThermodynamics() const
    { return m_AeroThermodynamics; }
    void setAeroThermodynamics(QSharedPointer<ScenarioREVAeroThermodynamicsType> AeroThermodynamics)
    { m_AeroThermodynamics = AeroThermodynamics; }
    QSharedPointer<ScenarioParachutes> Parachutes() const
    { return m_Parachutes; }
    void setParachutes(QSharedPointer<ScenarioParachutes> Parachutes)
    { m_Parachutes = Parachutes; }
    QSharedPointer<ScenarioREVStructureType> Structure() const
    { return m_Structure; }
    void setStructure(QSharedPointer<ScenarioREVStructureType> Structure)
    { m_Structure = Structure; }
    QSharedPointer<ScenarioREVSecondaryPropulsionType> SecondaryPropulsion() const
    { return m_SecondaryPropulsion; }
    void setSecondaryPropulsion(QSharedPointer<ScenarioREVSecondaryPropulsionType> SecondaryPropulsion)
    { m_SecondaryPropulsion = SecondaryPropulsion; }
    QSharedPointer<ScenarioREVCostsType> Costs() const
    { return m_Costs; }
    void setCosts(QSharedPointer<ScenarioREVCostsType> Costs)
    { m_Costs = Costs; }
    QSharedPointer<ScenarioREVReliabilityType> Reliability() const
    { return m_Reliability; }
    void setReliability(QSharedPointer<ScenarioREVReliabilityType> Reliability)
    { m_Reliability = Reliability; }

private:
    QSharedPointer<ScenarioREVWeights> m_Weights;
    QSharedPointer<ScenarioREVGeometryType> m_Geometry;
    QSharedPointer<ScenarioREVTPS> m_TPS;
    QSharedPointer<ScenarioREVAeroThermodynamicsType> m_AeroThermodynamics;
    QSharedPointer<ScenarioParachutes> m_Parachutes;
    QSharedPointer<ScenarioREVStructureType> m_Structure;
    QSharedPointer<ScenarioREVSecondaryPropulsionType> m_SecondaryPropulsion;
    QSharedPointer<ScenarioREVCostsType> m_Costs;
    QSharedPointer<ScenarioREVReliabilityType> m_Reliability;
};


// ScenarioParachutes
class ScenarioParachutes : public ScenarioObject
{
public:
    ScenarioParachutes();
    static ScenarioParachutes* create(const QDomElement& e);
    virtual QString elementName() const
    { return "Parachutes"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioOptVarInt> nChutes() const
    { return m_nChutes; }
    void setNChutes(QSharedPointer<ScenarioOptVarInt> nChutes)
    { m_nChutes = nChutes; }
    const QList<QSharedPointer<ScenarioParachute> >& Parachute() const
    { return m_Parachute; }
    QList<QSharedPointer<ScenarioParachute> >& Parachute()
    { return m_Parachute; }
    void setParachute(QList<QSharedPointer<ScenarioParachute> > Parachute)
    { m_Parachute = Parachute; }

private:
    QSharedPointer<ScenarioOptVarInt> m_nChutes;
    QList<QSharedPointer<ScenarioParachute> > m_Parachute;
};


// ScenarioParachute
class ScenarioParachute : public ScenarioObject
{
public:
    ScenarioParachute();
    static ScenarioParachute* create(const QDomElement& e);
    virtual QString elementName() const
    { return "Parachute"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double mass() const
    { return m_mass; }
    void setMass(double mass)
    { m_mass = mass; }
    double coGLongPosition() const
    { return m_coGLongPosition; }
    void setCoGLongPosition(double coGLongPosition)
    { m_coGLongPosition = coGLongPosition; }
    QSharedPointer<ScenarioOptVarDouble> ropeLength() const
    { return m_ropeLength; }
    void setRopeLength(QSharedPointer<ScenarioOptVarDouble> ropeLength)
    { m_ropeLength = ropeLength; }
    QSharedPointer<ScenarioParachuteAerodynamics> ParachuteAerodynamics() const
    { return m_ParachuteAerodynamics; }
    void setParachuteAerodynamics(QSharedPointer<ScenarioParachuteAerodynamics> ParachuteAerodynamics)
    { m_ParachuteAerodynamics = ParachuteAerodynamics; }
    QSharedPointer<ScenarioOptVarDouble> deployMach() const
    { return m_deployMach; }
    void setDeployMach(QSharedPointer<ScenarioOptVarDouble> deployMach)
    { m_deployMach = deployMach; }

private:
    double m_mass;
    double m_coGLongPosition;
    QSharedPointer<ScenarioOptVarDouble> m_ropeLength;
    QSharedPointer<ScenarioParachuteAerodynamics> m_ParachuteAerodynamics;
    QSharedPointer<ScenarioOptVarDouble> m_deployMach;
};


// ScenarioParachuteAerodynamics
class ScenarioParachuteAerodynamics : public ScenarioObject
{
public:
    ScenarioParachuteAerodynamics();
    static ScenarioParachuteAerodynamics* create(const QDomElement& e);
    virtual QString elementName() const
    { return "ParachuteAerodynamics"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    bool userDefinedAero() const
    { return m_userDefinedAero; }
    void setUserDefinedAero(bool userDefinedAero)
    { m_userDefinedAero = userDefinedAero; }
    QSharedPointer<ScenarioOptVarDouble> referenceArea() const
    { return m_referenceArea; }
    void setReferenceArea(QSharedPointer<ScenarioOptVarDouble> referenceArea)
    { m_referenceArea = referenceArea; }
    QString lowSpeedCdFileName() const
    { return m_lowSpeedCdFileName; }
    void setLowSpeedCdFileName(QString lowSpeedCdFileName)
    { m_lowSpeedCdFileName = lowSpeedCdFileName; }

private:
    bool m_userDefinedAero;
    QSharedPointer<ScenarioOptVarDouble> m_referenceArea;
    QString m_lowSpeedCdFileName;
};


// ScenarioREVStructureType
class ScenarioREVStructureType : public ScenarioObject
{
public:
    ScenarioREVStructureType();
    static ScenarioREVStructureType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "REVStructureType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioOptVarDouble> maxAxialAcc() const
    { return m_maxAxialAcc; }
    void setMaxAxialAcc(QSharedPointer<ScenarioOptVarDouble> maxAxialAcc)
    { m_maxAxialAcc = maxAxialAcc; }
    QSharedPointer<ScenarioOptVarDouble> maxLatAcc() const
    { return m_maxLatAcc; }
    void setMaxLatAcc(QSharedPointer<ScenarioOptVarDouble> maxLatAcc)
    { m_maxLatAcc = maxLatAcc; }
    QSharedPointer<ScenarioOptVarString> mainStructMaterial() const
    { return m_mainStructMaterial; }
    void setMainStructMaterial(QSharedPointer<ScenarioOptVarString> mainStructMaterial)
    { m_mainStructMaterial = mainStructMaterial; }
    double mainStructThickness() const
    { return m_mainStructThickness; }
    void setMainStructThickness(double mainStructThickness)
    { m_mainStructThickness = mainStructThickness; }
    double mainStructMass() const
    { return m_mainStructMass; }
    void setMainStructMass(double mainStructMass)
    { m_mainStructMass = mainStructMass; }
    double totalStructMass() const
    { return m_totalStructMass; }
    void setTotalStructMass(double totalStructMass)
    { m_totalStructMass = totalStructMass; }
    double totalStructCoGLongPosition() const
    { return m_totalStructCoGLongPosition; }
    void setTotalStructCoGLongPosition(double totalStructCoGLongPosition)
    { m_totalStructCoGLongPosition = totalStructCoGLongPosition; }
    QSharedPointer<ScenarioOptVarDouble> structuralSafetyMargin() const
    { return m_structuralSafetyMargin; }
    void setStructuralSafetyMargin(QSharedPointer<ScenarioOptVarDouble> structuralSafetyMargin)
    { m_structuralSafetyMargin = structuralSafetyMargin; }
    QSharedPointer<ScenarioOptVarBool> airbags() const
    { return m_airbags; }
    void setAirbags(QSharedPointer<ScenarioOptVarBool> airbags)
    { m_airbags = airbags; }
    QSharedPointer<ScenarioOptVarDouble> maxLandingVelWithAirbag() const
    { return m_maxLandingVelWithAirbag; }
    void setMaxLandingVelWithAirbag(QSharedPointer<ScenarioOptVarDouble> maxLandingVelWithAirbag)
    { m_maxLandingVelWithAirbag = maxLandingVelWithAirbag; }
    double airbagsMass() const
    { return m_airbagsMass; }
    void setAirbagsMass(double airbagsMass)
    { m_airbagsMass = airbagsMass; }
    double airbagsCoGLongPosition() const
    { return m_airbagsCoGLongPosition; }
    void setAirbagsCoGLongPosition(double airbagsCoGLongPosition)
    { m_airbagsCoGLongPosition = airbagsCoGLongPosition; }

private:
    QSharedPointer<ScenarioOptVarDouble> m_maxAxialAcc;
    QSharedPointer<ScenarioOptVarDouble> m_maxLatAcc;
    QSharedPointer<ScenarioOptVarString> m_mainStructMaterial;
    double m_mainStructThickness;
    double m_mainStructMass;
    double m_totalStructMass;
    double m_totalStructCoGLongPosition;
    QSharedPointer<ScenarioOptVarDouble> m_structuralSafetyMargin;
    QSharedPointer<ScenarioOptVarBool> m_airbags;
    QSharedPointer<ScenarioOptVarDouble> m_maxLandingVelWithAirbag;
    double m_airbagsMass;
    double m_airbagsCoGLongPosition;
};


// ScenarioREVAeroThermodynamicsType
class ScenarioREVAeroThermodynamicsType : public ScenarioObject
{
public:
    ScenarioREVAeroThermodynamicsType();
    static ScenarioREVAeroThermodynamicsType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "REVAeroThermodynamicsType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioOptVarDouble> hypersonicTrimAngle() const
    { return m_hypersonicTrimAngle; }
    void setHypersonicTrimAngle(QSharedPointer<ScenarioOptVarDouble> hypersonicTrimAngle)
    { m_hypersonicTrimAngle = hypersonicTrimAngle; }
    bool REVuserDefinedAero() const
    { return m_REVuserDefinedAero; }
    void setREVuserDefinedAero(bool REVuserDefinedAero)
    { m_REVuserDefinedAero = REVuserDefinedAero; }
    double referenceArea() const
    { return m_referenceArea; }
    void setReferenceArea(double referenceArea)
    { m_referenceArea = referenceArea; }
    double referenceLength() const
    { return m_referenceLength; }
    void setReferenceLength(double referenceLength)
    { m_referenceLength = referenceLength; }
    const QList<QSharedPointer<ScenarioAeroCoefFileType> >& AeroCoefFile() const
    { return m_AeroCoefFile; }
    QList<QSharedPointer<ScenarioAeroCoefFileType> >& AeroCoefFile()
    { return m_AeroCoefFile; }
    void setAeroCoefFile(QList<QSharedPointer<ScenarioAeroCoefFileType> > AeroCoefFile)
    { m_AeroCoefFile = AeroCoefFile; }
    int CoefficientType() const
    { return m_CoefficientType; }
    void setCoefficientType(int CoefficientType)
    { m_CoefficientType = CoefficientType; }
    double emissivity() const
    { return m_emissivity; }
    void setEmissivity(double emissivity)
    { m_emissivity = emissivity; }
    const QList<double>& momentReferencePoint() const
    { return m_momentReferencePoint; }
    QList<double>& momentReferencePoint()
    { return m_momentReferencePoint; }
    void setMomentReferencePoint(QList<double> momentReferencePoint)
    { m_momentReferencePoint = momentReferencePoint; }

private:
    QSharedPointer<ScenarioOptVarDouble> m_hypersonicTrimAngle;
    bool m_REVuserDefinedAero;
    double m_referenceArea;
    double m_referenceLength;
    QList<QSharedPointer<ScenarioAeroCoefFileType> > m_AeroCoefFile;
    int m_CoefficientType;
    double m_emissivity;
    QList<double> m_momentReferencePoint;
};


// ScenarioREVTPS
class ScenarioREVTPS : public ScenarioObject
{
public:
    ScenarioREVTPS();
    static ScenarioREVTPS* create(const QDomElement& e);
    virtual QString elementName() const
    { return "REVTPS"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioOptVarDouble> maxHeatFlux() const
    { return m_maxHeatFlux; }
    void setMaxHeatFlux(QSharedPointer<ScenarioOptVarDouble> maxHeatFlux)
    { m_maxHeatFlux = maxHeatFlux; }
    QSharedPointer<ScenarioOptVarDouble> maxIntegratedHeatLoad() const
    { return m_maxIntegratedHeatLoad; }
    void setMaxIntegratedHeatLoad(QSharedPointer<ScenarioOptVarDouble> maxIntegratedHeatLoad)
    { m_maxIntegratedHeatLoad = maxIntegratedHeatLoad; }
    QSharedPointer<ScenarioOptVarBool> mainTPSReuse() const
    { return m_mainTPSReuse; }
    void setMainTPSReuse(QSharedPointer<ScenarioOptVarBool> mainTPSReuse)
    { m_mainTPSReuse = mainTPSReuse; }
    QSharedPointer<ScenarioOptVarString> mainTPSMaterial() const
    { return m_mainTPSMaterial; }
    void setMainTPSMaterial(QSharedPointer<ScenarioOptVarString> mainTPSMaterial)
    { m_mainTPSMaterial = mainTPSMaterial; }
    double mainTPSThickness() const
    { return m_mainTPSThickness; }
    void setMainTPSThickness(double mainTPSThickness)
    { m_mainTPSThickness = mainTPSThickness; }
    double mainTPSMass() const
    { return m_mainTPSMass; }
    void setMainTPSMass(double mainTPSMass)
    { m_mainTPSMass = mainTPSMass; }
    double totalTPSMass() const
    { return m_totalTPSMass; }
    void setTotalTPSMass(double totalTPSMass)
    { m_totalTPSMass = totalTPSMass; }
    double totalTPSCoGLongPosition() const
    { return m_totalTPSCoGLongPosition; }
    void setTotalTPSCoGLongPosition(double totalTPSCoGLongPosition)
    { m_totalTPSCoGLongPosition = totalTPSCoGLongPosition; }

private:
    QSharedPointer<ScenarioOptVarDouble> m_maxHeatFlux;
    QSharedPointer<ScenarioOptVarDouble> m_maxIntegratedHeatLoad;
    QSharedPointer<ScenarioOptVarBool> m_mainTPSReuse;
    QSharedPointer<ScenarioOptVarString> m_mainTPSMaterial;
    double m_mainTPSThickness;
    double m_mainTPSMass;
    double m_totalTPSMass;
    double m_totalTPSCoGLongPosition;
};


// ScenarioREVSecondaryPropulsionType
class ScenarioREVSecondaryPropulsionType : public ScenarioObject
{
public:
    ScenarioREVSecondaryPropulsionType();
    static ScenarioREVSecondaryPropulsionType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "REVSecondaryPropulsionType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioREVOMSType> OMS() const
    { return m_OMS; }
    void setOMS(QSharedPointer<ScenarioREVOMSType> OMS)
    { m_OMS = OMS; }
    QSharedPointer<ScenarioREVRCSType> RCS() const
    { return m_RCS; }
    void setRCS(QSharedPointer<ScenarioREVRCSType> RCS)
    { m_RCS = RCS; }

private:
    QSharedPointer<ScenarioREVOMSType> m_OMS;
    QSharedPointer<ScenarioREVRCSType> m_RCS;
};


// ScenarioREVOMSType
class ScenarioREVOMSType : public ScenarioObject
{
public:
    ScenarioREVOMSType();
    static ScenarioREVOMSType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "REVOMSType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioOptVarDouble> thrust() const
    { return m_thrust; }
    void setThrust(QSharedPointer<ScenarioOptVarDouble> thrust)
    { m_thrust = thrust; }
    QSharedPointer<ScenarioOptVarDouble> burningTime() const
    { return m_burningTime; }
    void setBurningTime(QSharedPointer<ScenarioOptVarDouble> burningTime)
    { m_burningTime = burningTime; }
    double Isp() const
    { return m_Isp; }
    void setIsp(double Isp)
    { m_Isp = Isp; }
    double dryMass() const
    { return m_dryMass; }
    void setDryMass(double dryMass)
    { m_dryMass = dryMass; }
    double dryCoGLongPosition() const
    { return m_dryCoGLongPosition; }
    void setDryCoGLongPosition(double dryCoGLongPosition)
    { m_dryCoGLongPosition = dryCoGLongPosition; }
    double propMass() const
    { return m_propMass; }
    void setPropMass(double propMass)
    { m_propMass = propMass; }
    double length() const
    { return m_length; }
    void setLength(double length)
    { m_length = length; }
    double diameter() const
    { return m_diameter; }
    void setDiameter(double diameter)
    { m_diameter = diameter; }

private:
    QSharedPointer<ScenarioOptVarDouble> m_thrust;
    QSharedPointer<ScenarioOptVarDouble> m_burningTime;
    double m_Isp;
    double m_dryMass;
    double m_dryCoGLongPosition;
    double m_propMass;
    double m_length;
    double m_diameter;
};


// ScenarioREVRCSType
class ScenarioREVRCSType : public ScenarioObject
{
public:
    ScenarioREVRCSType();
    static ScenarioREVRCSType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "REVRCSType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioOptVarDouble> thrust() const
    { return m_thrust; }
    void setThrust(QSharedPointer<ScenarioOptVarDouble> thrust)
    { m_thrust = thrust; }
    double totalMass() const
    { return m_totalMass; }
    void setTotalMass(double totalMass)
    { m_totalMass = totalMass; }
    double totalCoGLongPosition() const
    { return m_totalCoGLongPosition; }
    void setTotalCoGLongPosition(double totalCoGLongPosition)
    { m_totalCoGLongPosition = totalCoGLongPosition; }

private:
    QSharedPointer<ScenarioOptVarDouble> m_thrust;
    double m_totalMass;
    double m_totalCoGLongPosition;
};


// ScenarioREVComponentsMassType
class ScenarioREVComponentsMassType : public ScenarioObject
{
public:
    ScenarioREVComponentsMassType();
    static ScenarioREVComponentsMassType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "REVComponentsMassType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double avionics() const
    { return m_avionics; }
    void setAvionics(double avionics)
    { m_avionics = avionics; }
    double eps() const
    { return m_eps; }
    void setEps(double eps)
    { m_eps = eps; }
    double crewSystems() const
    { return m_crewSystems; }
    void setCrewSystems(double crewSystems)
    { m_crewSystems = crewSystems; }

private:
    double m_avionics;
    double m_eps;
    double m_crewSystems;
};


// ScenarioREVComponentsType
class ScenarioREVComponentsType : public ScenarioObject
{
public:
    ScenarioREVComponentsType();
    static ScenarioREVComponentsType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "REVComponentsType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioREVComponentsMassType> Mass() const
    { return m_Mass; }
    void setMass(QSharedPointer<ScenarioREVComponentsMassType> Mass)
    { m_Mass = Mass; }
    QSharedPointer<ScenarioCoGLongPosition> CoGLongPosition() const
    { return m_CoGLongPosition; }
    void setCoGLongPosition(QSharedPointer<ScenarioCoGLongPosition> CoGLongPosition)
    { m_CoGLongPosition = CoGLongPosition; }

private:
    QSharedPointer<ScenarioREVComponentsMassType> m_Mass;
    QSharedPointer<ScenarioCoGLongPosition> m_CoGLongPosition;
};


// ScenarioCoGLongPosition
class ScenarioCoGLongPosition : public ScenarioObject
{
public:
    ScenarioCoGLongPosition();
    static ScenarioCoGLongPosition* create(const QDomElement& e);
    virtual QString elementName() const
    { return "CoGLongPosition"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double avionics() const
    { return m_avionics; }
    void setAvionics(double avionics)
    { m_avionics = avionics; }
    double eps() const
    { return m_eps; }
    void setEps(double eps)
    { m_eps = eps; }
    double crewSystems() const
    { return m_crewSystems; }
    void setCrewSystems(double crewSystems)
    { m_crewSystems = crewSystems; }

private:
    double m_avionics;
    double m_eps;
    double m_crewSystems;
};


// ScenarioREVWeights
class ScenarioREVWeights : public ScenarioObject
{
public:
    ScenarioREVWeights();
    static ScenarioREVWeights* create(const QDomElement& e);
    virtual QString elementName() const
    { return "REVWeights"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double totalDryMass() const
    { return m_totalDryMass; }
    void setTotalDryMass(double totalDryMass)
    { m_totalDryMass = totalDryMass; }
    double totalPropellantMass() const
    { return m_totalPropellantMass; }
    void setTotalPropellantMass(double totalPropellantMass)
    { m_totalPropellantMass = totalPropellantMass; }
    double totalWetMass() const
    { return m_totalWetMass; }
    void setTotalWetMass(double totalWetMass)
    { m_totalWetMass = totalWetMass; }
    double totalDryCoGLongPosition() const
    { return m_totalDryCoGLongPosition; }
    void setTotalDryCoGLongPosition(double totalDryCoGLongPosition)
    { m_totalDryCoGLongPosition = totalDryCoGLongPosition; }
    double totalWetCoGLongPosition() const
    { return m_totalWetCoGLongPosition; }
    void setTotalWetCoGLongPosition(double totalWetCoGLongPosition)
    { m_totalWetCoGLongPosition = totalWetCoGLongPosition; }
    QSharedPointer<ScenarioInertialMatrix> InertialMatrix() const
    { return m_InertialMatrix; }
    void setInertialMatrix(QSharedPointer<ScenarioInertialMatrix> InertialMatrix)
    { m_InertialMatrix = InertialMatrix; }
    double trimStability() const
    { return m_trimStability; }
    void setTrimStability(double trimStability)
    { m_trimStability = trimStability; }
    double internalVolumeAvailable() const
    { return m_internalVolumeAvailable; }
    void setInternalVolumeAvailable(double internalVolumeAvailable)
    { m_internalVolumeAvailable = internalVolumeAvailable; }
    double internalVolumeRequired() const
    { return m_internalVolumeRequired; }
    void setInternalVolumeRequired(double internalVolumeRequired)
    { m_internalVolumeRequired = internalVolumeRequired; }
    double internalVolumeCstrViolation() const
    { return m_internalVolumeCstrViolation; }
    void setInternalVolumeCstrViolation(double internalVolumeCstrViolation)
    { m_internalVolumeCstrViolation = internalVolumeCstrViolation; }
    double CoGShiftCstrViolation() const
    { return m_CoGShiftCstrViolation; }
    void setCoGShiftCstrViolation(double CoGShiftCstrViolation)
    { m_CoGShiftCstrViolation = CoGShiftCstrViolation; }
    QSharedPointer<ScenarioOptVarString> redundancyLevel() const
    { return m_redundancyLevel; }
    void setRedundancyLevel(QSharedPointer<ScenarioOptVarString> redundancyLevel)
    { m_redundancyLevel = redundancyLevel; }
    QSharedPointer<ScenarioREVComponentsType> Components() const
    { return m_Components; }
    void setComponents(QSharedPointer<ScenarioREVComponentsType> Components)
    { m_Components = Components; }

private:
    double m_totalDryMass;
    double m_totalPropellantMass;
    double m_totalWetMass;
    double m_totalDryCoGLongPosition;
    double m_totalWetCoGLongPosition;
    QSharedPointer<ScenarioInertialMatrix> m_InertialMatrix;
    double m_trimStability;
    double m_internalVolumeAvailable;
    double m_internalVolumeRequired;
    double m_internalVolumeCstrViolation;
    double m_CoGShiftCstrViolation;
    QSharedPointer<ScenarioOptVarString> m_redundancyLevel;
    QSharedPointer<ScenarioREVComponentsType> m_Components;
};


// ScenarioInertialMatrix
class ScenarioInertialMatrix : public ScenarioObject
{
public:
    ScenarioInertialMatrix();
    static ScenarioInertialMatrix* create(const QDomElement& e);
    virtual QString elementName() const
    { return "InertialMatrix"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double ixx() const
    { return m_ixx; }
    void setIxx(double ixx)
    { m_ixx = ixx; }
    double iyy() const
    { return m_iyy; }
    void setIyy(double iyy)
    { m_iyy = iyy; }
    double izz() const
    { return m_izz; }
    void setIzz(double izz)
    { m_izz = izz; }
    double ixy() const
    { return m_ixy; }
    void setIxy(double ixy)
    { m_ixy = ixy; }
    double ixz() const
    { return m_ixz; }
    void setIxz(double ixz)
    { m_ixz = ixz; }
    double iyz() const
    { return m_iyz; }
    void setIyz(double iyz)
    { m_iyz = iyz; }

private:
    double m_ixx;
    double m_iyy;
    double m_izz;
    double m_ixy;
    double m_ixz;
    double m_iyz;
};


// ScenarioREVSystemCostsType
class ScenarioREVSystemCostsType : public ScenarioObject
{
public:
    ScenarioREVSystemCostsType();
    static ScenarioREVSystemCostsType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "REVSystemCostsType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double systemDevelopmentCost() const
    { return m_systemDevelopmentCost; }
    void setSystemDevelopmentCost(double systemDevelopmentCost)
    { m_systemDevelopmentCost = systemDevelopmentCost; }
    double systemProductionCost() const
    { return m_systemProductionCost; }
    void setSystemProductionCost(double systemProductionCost)
    { m_systemProductionCost = systemProductionCost; }
    double flightOperationsCost() const
    { return m_flightOperationsCost; }
    void setFlightOperationsCost(double flightOperationsCost)
    { m_flightOperationsCost = flightOperationsCost; }
    double recoveryCost() const
    { return m_recoveryCost; }
    void setRecoveryCost(double recoveryCost)
    { m_recoveryCost = recoveryCost; }
    double groundFacilitiesCost() const
    { return m_groundFacilitiesCost; }
    void setGroundFacilitiesCost(double groundFacilitiesCost)
    { m_groundFacilitiesCost = groundFacilitiesCost; }
    double fixedGroundCost() const
    { return m_fixedGroundCost; }
    void setFixedGroundCost(double fixedGroundCost)
    { m_fixedGroundCost = fixedGroundCost; }

private:
    double m_systemDevelopmentCost;
    double m_systemProductionCost;
    double m_flightOperationsCost;
    double m_recoveryCost;
    double m_groundFacilitiesCost;
    double m_fixedGroundCost;
};


// ScenarioREVCostsType
class ScenarioREVCostsType : public ScenarioObject
{
public:
    ScenarioREVCostsType();
    static ScenarioREVCostsType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "REVCostsType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double lifeCycleCost() const
    { return m_lifeCycleCost; }
    void setLifeCycleCost(double lifeCycleCost)
    { m_lifeCycleCost = lifeCycleCost; }
    double costPerMission() const
    { return m_costPerMission; }
    void setCostPerMission(double costPerMission)
    { m_costPerMission = costPerMission; }
    double costPerKilo() const
    { return m_costPerKilo; }
    void setCostPerKilo(double costPerKilo)
    { m_costPerKilo = costPerKilo; }
    QSharedPointer<ScenarioREVSystemCostsType> SystemCosts() const
    { return m_SystemCosts; }
    void setSystemCosts(QSharedPointer<ScenarioREVSystemCostsType> SystemCosts)
    { m_SystemCosts = SystemCosts; }
    QSharedPointer<ScenarioREVSubsystemsDevelopCostsType> SubsystemsDevelopCosts() const
    { return m_SubsystemsDevelopCosts; }
    void setSubsystemsDevelopCosts(QSharedPointer<ScenarioREVSubsystemsDevelopCostsType> SubsystemsDevelopCosts)
    { m_SubsystemsDevelopCosts = SubsystemsDevelopCosts; }
    QSharedPointer<ScenarioREVSubsystemsProductionCostsType> SubsystemsProductionCosts() const
    { return m_SubsystemsProductionCosts; }
    void setSubsystemsProductionCosts(QSharedPointer<ScenarioREVSubsystemsProductionCostsType> SubsystemsProductionCosts)
    { m_SubsystemsProductionCosts = SubsystemsProductionCosts; }
    QSharedPointer<ScenarioREVSubsystemsRefurbishmentCostsType> SubsystemsRefurbishmentCosts() const
    { return m_SubsystemsRefurbishmentCosts; }
    void setSubsystemsRefurbishmentCosts(QSharedPointer<ScenarioREVSubsystemsRefurbishmentCostsType> SubsystemsRefurbishmentCosts)
    { m_SubsystemsRefurbishmentCosts = SubsystemsRefurbishmentCosts; }

private:
    double m_lifeCycleCost;
    double m_costPerMission;
    double m_costPerKilo;
    QSharedPointer<ScenarioREVSystemCostsType> m_SystemCosts;
    QSharedPointer<ScenarioREVSubsystemsDevelopCostsType> m_SubsystemsDevelopCosts;
    QSharedPointer<ScenarioREVSubsystemsProductionCostsType> m_SubsystemsProductionCosts;
    QSharedPointer<ScenarioREVSubsystemsRefurbishmentCostsType> m_SubsystemsRefurbishmentCosts;
};


// ScenarioREVSubsystemsRefurbishmentCostsType
class ScenarioREVSubsystemsRefurbishmentCostsType : public ScenarioObject
{
public:
    ScenarioREVSubsystemsRefurbishmentCostsType();
    static ScenarioREVSubsystemsRefurbishmentCostsType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "REVSubsystemsRefurbishmentCostsType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double structure() const
    { return m_structure; }
    void setStructure(double structure)
    { m_structure = structure; }
    double TPS() const
    { return m_TPS; }
    void setTPS(double TPS)
    { m_TPS = TPS; }
    double avionics() const
    { return m_avionics; }
    void setAvionics(double avionics)
    { m_avionics = avionics; }
    double OMS() const
    { return m_OMS; }
    void setOMS(double OMS)
    { m_OMS = OMS; }
    double RCS() const
    { return m_RCS; }
    void setRCS(double RCS)
    { m_RCS = RCS; }
    double parachutes() const
    { return m_parachutes; }
    void setParachutes(double parachutes)
    { m_parachutes = parachutes; }
    double airbags() const
    { return m_airbags; }
    void setAirbags(double airbags)
    { m_airbags = airbags; }
    double crewSystems() const
    { return m_crewSystems; }
    void setCrewSystems(double crewSystems)
    { m_crewSystems = crewSystems; }

private:
    double m_structure;
    double m_TPS;
    double m_avionics;
    double m_OMS;
    double m_RCS;
    double m_parachutes;
    double m_airbags;
    double m_crewSystems;
};


// ScenarioREVSubsystemsProductionCostsType
class ScenarioREVSubsystemsProductionCostsType : public ScenarioObject
{
public:
    ScenarioREVSubsystemsProductionCostsType();
    static ScenarioREVSubsystemsProductionCostsType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "REVSubsystemsProductionCostsType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double structure() const
    { return m_structure; }
    void setStructure(double structure)
    { m_structure = structure; }
    double TPS() const
    { return m_TPS; }
    void setTPS(double TPS)
    { m_TPS = TPS; }
    double avionics() const
    { return m_avionics; }
    void setAvionics(double avionics)
    { m_avionics = avionics; }
    double OMS() const
    { return m_OMS; }
    void setOMS(double OMS)
    { m_OMS = OMS; }
    double RCS() const
    { return m_RCS; }
    void setRCS(double RCS)
    { m_RCS = RCS; }
    double parachutes() const
    { return m_parachutes; }
    void setParachutes(double parachutes)
    { m_parachutes = parachutes; }
    double airbags() const
    { return m_airbags; }
    void setAirbags(double airbags)
    { m_airbags = airbags; }
    double crewSystems() const
    { return m_crewSystems; }
    void setCrewSystems(double crewSystems)
    { m_crewSystems = crewSystems; }
    double propellants() const
    { return m_propellants; }
    void setPropellants(double propellants)
    { m_propellants = propellants; }

private:
    double m_structure;
    double m_TPS;
    double m_avionics;
    double m_OMS;
    double m_RCS;
    double m_parachutes;
    double m_airbags;
    double m_crewSystems;
    double m_propellants;
};


// ScenarioREVSubsystemsDevelopCostsType
class ScenarioREVSubsystemsDevelopCostsType : public ScenarioObject
{
public:
    ScenarioREVSubsystemsDevelopCostsType();
    static ScenarioREVSubsystemsDevelopCostsType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "REVSubsystemsDevelopCostsType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double structure() const
    { return m_structure; }
    void setStructure(double structure)
    { m_structure = structure; }
    double TPS() const
    { return m_TPS; }
    void setTPS(double TPS)
    { m_TPS = TPS; }
    double avionics() const
    { return m_avionics; }
    void setAvionics(double avionics)
    { m_avionics = avionics; }
    double OMS() const
    { return m_OMS; }
    void setOMS(double OMS)
    { m_OMS = OMS; }
    double RCS() const
    { return m_RCS; }
    void setRCS(double RCS)
    { m_RCS = RCS; }
    double parachutes() const
    { return m_parachutes; }
    void setParachutes(double parachutes)
    { m_parachutes = parachutes; }
    double airbags() const
    { return m_airbags; }
    void setAirbags(double airbags)
    { m_airbags = airbags; }
    double crewSystems() const
    { return m_crewSystems; }
    void setCrewSystems(double crewSystems)
    { m_crewSystems = crewSystems; }

private:
    double m_structure;
    double m_TPS;
    double m_avionics;
    double m_OMS;
    double m_RCS;
    double m_parachutes;
    double m_airbags;
    double m_crewSystems;
};


// ScenarioREVReliabilityType
class ScenarioREVReliabilityType : public ScenarioObject
{
public:
    ScenarioREVReliabilityType();
    static ScenarioREVReliabilityType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "REVReliabilityType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double globalVehicleReliability() const
    { return m_globalVehicleReliability; }
    void setGlobalVehicleReliability(double globalVehicleReliability)
    { m_globalVehicleReliability = globalVehicleReliability; }
    double softwareReliability() const
    { return m_softwareReliability; }
    void setSoftwareReliability(double softwareReliability)
    { m_softwareReliability = softwareReliability; }
    double crewSafety() const
    { return m_crewSafety; }
    void setCrewSafety(double crewSafety)
    { m_crewSafety = crewSafety; }
    QSharedPointer<ScenarioREVSubsystemsReliablityType> SubsystemsReliability() const
    { return m_SubsystemsReliability; }
    void setSubsystemsReliability(QSharedPointer<ScenarioREVSubsystemsReliablityType> SubsystemsReliability)
    { m_SubsystemsReliability = SubsystemsReliability; }

private:
    double m_globalVehicleReliability;
    double m_softwareReliability;
    double m_crewSafety;
    QSharedPointer<ScenarioREVSubsystemsReliablityType> m_SubsystemsReliability;
};


// ScenarioREVSubsystemsReliablityType
class ScenarioREVSubsystemsReliablityType : public ScenarioObject
{
public:
    ScenarioREVSubsystemsReliablityType();
    static ScenarioREVSubsystemsReliablityType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "REVSubsystemsReliablityType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double structure() const
    { return m_structure; }
    void setStructure(double structure)
    { m_structure = structure; }
    double TPS() const
    { return m_TPS; }
    void setTPS(double TPS)
    { m_TPS = TPS; }
    double avionics() const
    { return m_avionics; }
    void setAvionics(double avionics)
    { m_avionics = avionics; }
    double OMS() const
    { return m_OMS; }
    void setOMS(double OMS)
    { m_OMS = OMS; }
    double RCS() const
    { return m_RCS; }
    void setRCS(double RCS)
    { m_RCS = RCS; }
    double parachutes() const
    { return m_parachutes; }
    void setParachutes(double parachutes)
    { m_parachutes = parachutes; }
    double airbags() const
    { return m_airbags; }
    void setAirbags(double airbags)
    { m_airbags = airbags; }
    double crewSystems() const
    { return m_crewSystems; }
    void setCrewSystems(double crewSystems)
    { m_crewSystems = crewSystems; }

private:
    double m_structure;
    double m_TPS;
    double m_avionics;
    double m_OMS;
    double m_RCS;
    double m_parachutes;
    double m_airbags;
    double m_crewSystems;
};


// ScenarioSC
class ScenarioSC : public ScenarioParticipantType
{
public:
    ScenarioSC();
    static ScenarioSC* create(const QDomElement& e);
    virtual QString elementName() const
    { return "SC"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioElementIdentifierType> ElementIdentifier() const
    { return m_ElementIdentifier; }
    void setElementIdentifier(QSharedPointer<ScenarioElementIdentifierType> ElementIdentifier)
    { m_ElementIdentifier = ElementIdentifier; }
    QSharedPointer<ScenarioSCProgram> SCProgram() const
    { return m_SCProgram; }
    void setSCProgram(QSharedPointer<ScenarioSCProgram> SCProgram)
    { m_SCProgram = SCProgram; }
    QSharedPointer<ScenarioSCMission> SCMission() const
    { return m_SCMission; }
    void setSCMission(QSharedPointer<ScenarioSCMission> SCMission)
    { m_SCMission = SCMission; }
    QSharedPointer<ScenarioSCSystemType> System() const
    { return m_System; }
    void setSystem(QSharedPointer<ScenarioSCSystemType> System)
    { m_System = System; }
    QSharedPointer<ScenarioOptimization> Optimization() const
    { return m_Optimization; }
    void setOptimization(QSharedPointer<ScenarioOptimization> Optimization)
    { m_Optimization = Optimization; }
    QSharedPointer<ScenarioOutputFiles> OutputFiles() const
    { return m_OutputFiles; }
    void setOutputFiles(QSharedPointer<ScenarioOutputFiles> OutputFiles)
    { m_OutputFiles = OutputFiles; }

private:
    QSharedPointer<ScenarioElementIdentifierType> m_ElementIdentifier;
    QSharedPointer<ScenarioSCProgram> m_SCProgram;
    QSharedPointer<ScenarioSCMission> m_SCMission;
    QSharedPointer<ScenarioSCSystemType> m_System;
    QSharedPointer<ScenarioOptimization> m_Optimization;
    QSharedPointer<ScenarioOutputFiles> m_OutputFiles;
};


// ScenarioSCProgram
class ScenarioSCProgram : public ScenarioObject
{
public:
    ScenarioSCProgram();
    static ScenarioSCProgram* create(const QDomElement& e);
    virtual QString elementName() const
    { return "SCProgram"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;

private:
};


// ScenarioSCMission
class ScenarioSCMission : public ScenarioObject
{
public:
    ScenarioSCMission();
    static ScenarioSCMission* create(const QDomElement& e);
    virtual QString elementName() const
    { return "SCMission"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioTrajectoryPlan> TrajectoryPlan() const
    { return m_TrajectoryPlan; }
    void setTrajectoryPlan(QSharedPointer<ScenarioTrajectoryPlan> TrajectoryPlan)
    { m_TrajectoryPlan = TrajectoryPlan; }
    QSharedPointer<ScenarioPayloadSet> PayloadSet() const
    { return m_PayloadSet; }
    void setPayloadSet(QSharedPointer<ScenarioPayloadSet> PayloadSet)
    { m_PayloadSet = PayloadSet; }

private:
    QSharedPointer<ScenarioTrajectoryPlan> m_TrajectoryPlan;
    QSharedPointer<ScenarioPayloadSet> m_PayloadSet;
};


// ScenarioTrajectoryPlan
class ScenarioTrajectoryPlan : public ScenarioObject
{
public:
    ScenarioTrajectoryPlan();
    static ScenarioTrajectoryPlan* create(const QDomElement& e);
    virtual QString elementName() const
    { return "TrajectoryPlan"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    const QList<QSharedPointer<ScenarioAbstractTrajectoryType> >& AbstractTrajectory() const
    { return m_AbstractTrajectory; }
    QList<QSharedPointer<ScenarioAbstractTrajectoryType> >& AbstractTrajectory()
    { return m_AbstractTrajectory; }
    void setAbstractTrajectory(QList<QSharedPointer<ScenarioAbstractTrajectoryType> > AbstractTrajectory)
    { m_AbstractTrajectory = AbstractTrajectory; }

private:
    QList<QSharedPointer<ScenarioAbstractTrajectoryType> > m_AbstractTrajectory;
};


// ScenarioLoiteringType
class ScenarioLoiteringType : public ScenarioAbstractTrajectoryType
{
public:
    ScenarioLoiteringType();
    static ScenarioLoiteringType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "LoiteringType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioEnvironmentType> Environment() const
    { return m_Environment; }
    void setEnvironment(QSharedPointer<ScenarioEnvironmentType> Environment)
    { m_Environment = Environment; }
    QSharedPointer<ScenarioTimeLine> TimeLine() const
    { return m_TimeLine; }
    void setTimeLine(QSharedPointer<ScenarioTimeLine> TimeLine)
    { m_TimeLine = TimeLine; }
    QSharedPointer<ScenarioInitialPositionType> InitialPosition() const
    { return m_InitialPosition; }
    void setInitialPosition(QSharedPointer<ScenarioInitialPositionType> InitialPosition)
    { m_InitialPosition = InitialPosition; }
    QSharedPointer<ScenarioInitialAttitudeType> InitialAttitude() const
    { return m_InitialAttitude; }
    void setInitialAttitude(QSharedPointer<ScenarioInitialAttitudeType> InitialAttitude)
    { m_InitialAttitude = InitialAttitude; }
    QSharedPointer<ScenarioInitialAttitudeUsingQuaternionsType> InitialAttitudeUsingQuaternions() const
    { return m_InitialAttitudeUsingQuaternions; }
    void setInitialAttitudeUsingQuaternions(QSharedPointer<ScenarioInitialAttitudeUsingQuaternionsType> InitialAttitudeUsingQuaternions)
    { m_InitialAttitudeUsingQuaternions = InitialAttitudeUsingQuaternions; }
    QSharedPointer<ScenarioPropagationPositionType> PropagationPosition() const
    { return m_PropagationPosition; }
    void setPropagationPosition(QSharedPointer<ScenarioPropagationPositionType> PropagationPosition)
    { m_PropagationPosition = PropagationPosition; }
    QSharedPointer<ScenarioPropagationAttitudeType> PropagationAttitude() const
    { return m_PropagationAttitude; }
    void setPropagationAttitude(QSharedPointer<ScenarioPropagationAttitudeType> PropagationAttitude)
    { m_PropagationAttitude = PropagationAttitude; }
    QSharedPointer<ScenarioTrajectoryStoppingConditionType> TrajectoryStoppingCondition() const
    { return m_TrajectoryStoppingCondition; }
    void setTrajectoryStoppingCondition(QSharedPointer<ScenarioTrajectoryStoppingConditionType> TrajectoryStoppingCondition)
    { m_TrajectoryStoppingCondition = TrajectoryStoppingCondition; }

private:
    QSharedPointer<ScenarioEnvironmentType> m_Environment;
    QSharedPointer<ScenarioTimeLine> m_TimeLine;
    QSharedPointer<ScenarioInitialPositionType> m_InitialPosition;
    QSharedPointer<ScenarioInitialAttitudeType> m_InitialAttitude;
    QSharedPointer<ScenarioInitialAttitudeUsingQuaternionsType> m_InitialAttitudeUsingQuaternions;
    QSharedPointer<ScenarioPropagationPositionType> m_PropagationPosition;
    QSharedPointer<ScenarioPropagationAttitudeType> m_PropagationAttitude;
    QSharedPointer<ScenarioTrajectoryStoppingConditionType> m_TrajectoryStoppingCondition;
};


// ScenarioLoiteringTLEType
class ScenarioLoiteringTLEType : public ScenarioAbstractTrajectoryType
{
public:
    ScenarioLoiteringTLEType();
    static ScenarioLoiteringTLEType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "LoiteringTLEType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioTimeLine> TimeLine() const
    { return m_TimeLine; }
    void setTimeLine(QSharedPointer<ScenarioTimeLine> TimeLine)
    { m_TimeLine = TimeLine; }
    QString tleLine0() const
    { return m_tleLine0; }
    void setTleLine0(QString tleLine0)
    { m_tleLine0 = tleLine0; }
    QString tleLine1() const
    { return m_tleLine1; }
    void setTleLine1(QString tleLine1)
    { m_tleLine1 = tleLine1; }
    QString tleLine2() const
    { return m_tleLine2; }
    void setTleLine2(QString tleLine2)
    { m_tleLine2 = tleLine2; }

private:
    QSharedPointer<ScenarioTimeLine> m_TimeLine;
    QString m_tleLine0;
    QString m_tleLine1;
    QString m_tleLine2;
};


// ScenarioLagrangianType
class ScenarioLagrangianType : public ScenarioAbstractTrajectoryType
{
public:
    ScenarioLagrangianType();
    static ScenarioLagrangianType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "LagrangianType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;

private:
};


// ScenarioFlyByType
class ScenarioFlyByType : public ScenarioAbstractTrajectoryType
{
public:
    ScenarioFlyByType();
    static ScenarioFlyByType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "FlyByType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;

private:
};


// ScenarioExternalType
class ScenarioExternalType : public ScenarioAbstractTrajectoryType
{
public:
    ScenarioExternalType();
    static ScenarioExternalType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "ExternalType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioCentralBodyType> CentralBody() const
    { return m_CentralBody; }
    void setCentralBody(QSharedPointer<ScenarioCentralBodyType> CentralBody)
    { m_CentralBody = CentralBody; }
    QString CoordinateSystem() const
    { return m_CoordinateSystem; }
    void setCoordinateSystem(QString CoordinateSystem)
    { m_CoordinateSystem = CoordinateSystem; }
    const QList<QDateTime>& TimeTags() const
    { return m_TimeTags; }
    QList<QDateTime>& TimeTags()
    { return m_TimeTags; }
    void setTimeTags(QList<QDateTime> TimeTags)
    { m_TimeTags = TimeTags; }
    const QList<double>& States() const
    { return m_States; }
    QList<double>& States()
    { return m_States; }
    void setStates(QList<double> States)
    { m_States = States; }

private:
    QSharedPointer<ScenarioCentralBodyType> m_CentralBody;
    QString m_CoordinateSystem;
    QList<QDateTime> m_TimeTags;
    QList<double> m_States;
};


// ScenarioDeltaVType
class ScenarioDeltaVType : public ScenarioAbstractTrajectoryType
{
public:
    ScenarioDeltaVType();
    static ScenarioDeltaVType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "DeltaVType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioEnvironmentType> Environment() const
    { return m_Environment; }
    void setEnvironment(QSharedPointer<ScenarioEnvironmentType> Environment)
    { m_Environment = Environment; }
    QSharedPointer<ScenarioTimeLine> TimeLine() const
    { return m_TimeLine; }
    void setTimeLine(QSharedPointer<ScenarioTimeLine> TimeLine)
    { m_TimeLine = TimeLine; }
    QSharedPointer<ScenarioInitialPositionType> InitialPosition() const
    { return m_InitialPosition; }
    void setInitialPosition(QSharedPointer<ScenarioInitialPositionType> InitialPosition)
    { m_InitialPosition = InitialPosition; }
    QSharedPointer<ScenarioInitialAttitudeType> InitialAttitude() const
    { return m_InitialAttitude; }
    void setInitialAttitude(QSharedPointer<ScenarioInitialAttitudeType> InitialAttitude)
    { m_InitialAttitude = InitialAttitude; }
    double DeltaVx() const
    { return m_DeltaVx; }
    void setDeltaVx(double DeltaVx)
    { m_DeltaVx = DeltaVx; }
    double DeltaVy() const
    { return m_DeltaVy; }
    void setDeltaVy(double DeltaVy)
    { m_DeltaVy = DeltaVy; }
    double DeltaVz() const
    { return m_DeltaVz; }
    void setDeltaVz(double DeltaVz)
    { m_DeltaVz = DeltaVz; }
    double Magnitude() const
    { return m_Magnitude; }
    void setMagnitude(double Magnitude)
    { m_Magnitude = Magnitude; }

private:
    QSharedPointer<ScenarioEnvironmentType> m_Environment;
    QSharedPointer<ScenarioTimeLine> m_TimeLine;
    QSharedPointer<ScenarioInitialPositionType> m_InitialPosition;
    QSharedPointer<ScenarioInitialAttitudeType> m_InitialAttitude;
    double m_DeltaVx;
    double m_DeltaVy;
    double m_DeltaVz;
    double m_Magnitude;
};


// ScenarioRendezVousManoeuvreType
class ScenarioRendezVousManoeuvreType : public ScenarioAbstractTrajectoryType
{
public:
    ScenarioRendezVousManoeuvreType();
    static ScenarioRendezVousManoeuvreType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "RendezVousManoeuvreType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioEnvironmentType> Environment() const
    { return m_Environment; }
    void setEnvironment(QSharedPointer<ScenarioEnvironmentType> Environment)
    { m_Environment = Environment; }
    QSharedPointer<ScenarioTimeLine> TimeLine() const
    { return m_TimeLine; }
    void setTimeLine(QSharedPointer<ScenarioTimeLine> TimeLine)
    { m_TimeLine = TimeLine; }
    double DeltaV1() const
    { return m_DeltaV1; }
    void setDeltaV1(double DeltaV1)
    { m_DeltaV1 = DeltaV1; }
    double DeltaV2() const
    { return m_DeltaV2; }
    void setDeltaV2(double DeltaV2)
    { m_DeltaV2 = DeltaV2; }
    double Input() const
    { return m_Input; }
    void setInput(double Input)
    { m_Input = Input; }
    double Duration() const
    { return m_Duration; }
    void setDuration(double Duration)
    { m_Duration = Duration; }
    double TotalDeltaV() const
    { return m_TotalDeltaV; }
    void setTotalDeltaV(double TotalDeltaV)
    { m_TotalDeltaV = TotalDeltaV; }
    QSharedPointer<ScenarioInitialPositionType> InitialPosition() const
    { return m_InitialPosition; }
    void setInitialPosition(QSharedPointer<ScenarioInitialPositionType> InitialPosition)
    { m_InitialPosition = InitialPosition; }
    QSharedPointer<ScenarioInitialAttitudeType> InitialAttitude() const
    { return m_InitialAttitude; }
    void setInitialAttitude(QSharedPointer<ScenarioInitialAttitudeType> InitialAttitude)
    { m_InitialAttitude = InitialAttitude; }
    QSharedPointer<ScenarioPropagationPositionType> PropagationPosition() const
    { return m_PropagationPosition; }
    void setPropagationPosition(QSharedPointer<ScenarioPropagationPositionType> PropagationPosition)
    { m_PropagationPosition = PropagationPosition; }
    QSharedPointer<ScenarioPropagationAttitudeType> PropagationAttitude() const
    { return m_PropagationAttitude; }
    void setPropagationAttitude(QSharedPointer<ScenarioPropagationAttitudeType> PropagationAttitude)
    { m_PropagationAttitude = PropagationAttitude; }

private:
    QSharedPointer<ScenarioEnvironmentType> m_Environment;
    QSharedPointer<ScenarioTimeLine> m_TimeLine;
    double m_DeltaV1;
    double m_DeltaV2;
    double m_Input;
    double m_Duration;
    double m_TotalDeltaV;
    QSharedPointer<ScenarioInitialPositionType> m_InitialPosition;
    QSharedPointer<ScenarioInitialAttitudeType> m_InitialAttitude;
    QSharedPointer<ScenarioPropagationPositionType> m_PropagationPosition;
    QSharedPointer<ScenarioPropagationAttitudeType> m_PropagationAttitude;
};


// ScenarioSCSystemType
class ScenarioSCSystemType : public ScenarioObject
{
public:
    ScenarioSCSystemType();
    static ScenarioSCSystemType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "SCSystemType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioSystemBudgets> SystemBudgets() const
    { return m_SystemBudgets; }
    void setSystemBudgets(QSharedPointer<ScenarioSystemBudgets> SystemBudgets)
    { m_SystemBudgets = SystemBudgets; }
    QSharedPointer<ScenarioSCAerodynamics> SCAerodynamics() const
    { return m_SCAerodynamics; }
    void setSCAerodynamics(QSharedPointer<ScenarioSCAerodynamics> SCAerodynamics)
    { m_SCAerodynamics = SCAerodynamics; }
    QSharedPointer<ScenarioPropulsion> Propulsion() const
    { return m_Propulsion; }
    void setPropulsion(QSharedPointer<ScenarioPropulsion> Propulsion)
    { m_Propulsion = Propulsion; }
    QSharedPointer<ScenarioStructure> Structure() const
    { return m_Structure; }
    void setStructure(QSharedPointer<ScenarioStructure> Structure)
    { m_Structure = Structure; }
    QSharedPointer<ScenarioTCS> TCS() const
    { return m_TCS; }
    void setTCS(QSharedPointer<ScenarioTCS> TCS)
    { m_TCS = TCS; }
    QSharedPointer<ScenarioEPS> EPS() const
    { return m_EPS; }
    void setEPS(QSharedPointer<ScenarioEPS> EPS)
    { m_EPS = EPS; }
    QSharedPointer<ScenarioTTC> TTC() const
    { return m_TTC; }
    void setTTC(QSharedPointer<ScenarioTTC> TTC)
    { m_TTC = TTC; }
    QSharedPointer<ScenarioAOCS> AOCS() const
    { return m_AOCS; }
    void setAOCS(QSharedPointer<ScenarioAOCS> AOCS)
    { m_AOCS = AOCS; }
    QSharedPointer<ScenarioOBDH> OBDH() const
    { return m_OBDH; }
    void setOBDH(QSharedPointer<ScenarioOBDH> OBDH)
    { m_OBDH = OBDH; }

private:
    QSharedPointer<ScenarioSystemBudgets> m_SystemBudgets;
    QSharedPointer<ScenarioSCAerodynamics> m_SCAerodynamics;
    QSharedPointer<ScenarioPropulsion> m_Propulsion;
    QSharedPointer<ScenarioStructure> m_Structure;
    QSharedPointer<ScenarioTCS> m_TCS;
    QSharedPointer<ScenarioEPS> m_EPS;
    QSharedPointer<ScenarioTTC> m_TTC;
    QSharedPointer<ScenarioAOCS> m_AOCS;
    QSharedPointer<ScenarioOBDH> m_OBDH;
};


// ScenarioSystemBudgets
class ScenarioSystemBudgets : public ScenarioObject
{
public:
    ScenarioSystemBudgets();
    static ScenarioSystemBudgets* create(const QDomElement& e);
    virtual QString elementName() const
    { return "SystemBudgets"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioMassOfSystem> MassOfSystem() const
    { return m_MassOfSystem; }
    void setMassOfSystem(QSharedPointer<ScenarioMassOfSystem> MassOfSystem)
    { m_MassOfSystem = MassOfSystem; }
    QSharedPointer<ScenarioPowerOfSystem> PowerOfSystem() const
    { return m_PowerOfSystem; }
    void setPowerOfSystem(QSharedPointer<ScenarioPowerOfSystem> PowerOfSystem)
    { m_PowerOfSystem = PowerOfSystem; }
    QSharedPointer<ScenarioLink> Link() const
    { return m_Link; }
    void setLink(QSharedPointer<ScenarioLink> Link)
    { m_Link = Link; }

private:
    QSharedPointer<ScenarioMassOfSystem> m_MassOfSystem;
    QSharedPointer<ScenarioPowerOfSystem> m_PowerOfSystem;
    QSharedPointer<ScenarioLink> m_Link;
};


// ScenarioMassOfSystem
class ScenarioMassOfSystem : public ScenarioObject
{
public:
    ScenarioMassOfSystem();
    static ScenarioMassOfSystem* create(const QDomElement& e);
    virtual QString elementName() const
    { return "MassOfSystem"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double dryMass() const
    { return m_dryMass; }
    void setDryMass(double dryMass)
    { m_dryMass = dryMass; }
    double wetMass() const
    { return m_wetMass; }
    void setWetMass(double wetMass)
    { m_wetMass = wetMass; }

private:
    double m_dryMass;
    double m_wetMass;
};


// ScenarioPowerOfSystem
class ScenarioPowerOfSystem : public ScenarioObject
{
public:
    ScenarioPowerOfSystem();
    static ScenarioPowerOfSystem* create(const QDomElement& e);
    virtual QString elementName() const
    { return "PowerOfSystem"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double totalPowerBoL() const
    { return m_totalPowerBoL; }
    void setTotalPowerBoL(double totalPowerBoL)
    { m_totalPowerBoL = totalPowerBoL; }
    double totalPowerEoL() const
    { return m_totalPowerEoL; }
    void setTotalPowerEoL(double totalPowerEoL)
    { m_totalPowerEoL = totalPowerEoL; }

private:
    double m_totalPowerBoL;
    double m_totalPowerEoL;
};


// ScenarioLink
class ScenarioLink : public ScenarioObject
{
public:
    ScenarioLink();
    static ScenarioLink* create(const QDomElement& e);
    virtual QString elementName() const
    { return "Link"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double uplinkMargin() const
    { return m_uplinkMargin; }
    void setUplinkMargin(double uplinkMargin)
    { m_uplinkMargin = uplinkMargin; }
    double downlinkMargin() const
    { return m_downlinkMargin; }
    void setDownlinkMargin(double downlinkMargin)
    { m_downlinkMargin = downlinkMargin; }

private:
    double m_uplinkMargin;
    double m_downlinkMargin;
};


// ScenarioSCAerodynamics
class ScenarioSCAerodynamics : public ScenarioObject
{
public:
    ScenarioSCAerodynamics();
    static ScenarioSCAerodynamics* create(const QDomElement& e);
    virtual QString elementName() const
    { return "SCAerodynamics"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double surfaceArea() const
    { return m_surfaceArea; }
    void setSurfaceArea(double surfaceArea)
    { m_surfaceArea = surfaceArea; }
    double Cd() const
    { return m_Cd; }
    void setCd(double Cd)
    { m_Cd = Cd; }

private:
    double m_surfaceArea;
    double m_Cd;
};


// ScenarioPropulsion
class ScenarioPropulsion : public ScenarioObject
{
public:
    ScenarioPropulsion();
    static ScenarioPropulsion* create(const QDomElement& e);
    virtual QString elementName() const
    { return "Propulsion"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    int numberOfEngines() const
    { return m_numberOfEngines; }
    void setNumberOfEngines(int numberOfEngines)
    { m_numberOfEngines = numberOfEngines; }
    double thrustPerEngine() const
    { return m_thrustPerEngine; }
    void setThrustPerEngine(double thrustPerEngine)
    { m_thrustPerEngine = thrustPerEngine; }
    double specificImpulse() const
    { return m_specificImpulse; }
    void setSpecificImpulse(double specificImpulse)
    { m_specificImpulse = specificImpulse; }
    double propellantMass() const
    { return m_propellantMass; }
    void setPropellantMass(double propellantMass)
    { m_propellantMass = propellantMass; }
    double totalPropulsionDryMass() const
    { return m_totalPropulsionDryMass; }
    void setTotalPropulsionDryMass(double totalPropulsionDryMass)
    { m_totalPropulsionDryMass = totalPropulsionDryMass; }

private:
    int m_numberOfEngines;
    double m_thrustPerEngine;
    double m_specificImpulse;
    double m_propellantMass;
    double m_totalPropulsionDryMass;
};


// ScenarioStructure
class ScenarioStructure : public ScenarioObject
{
public:
    ScenarioStructure();
    static ScenarioStructure* create(const QDomElement& e);
    virtual QString elementName() const
    { return "Structure"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QString StructuralShape() const
    { return m_StructuralShape; }
    void setStructuralShape(QString StructuralShape)
    { m_StructuralShape = StructuralShape; }
    QString StructuralMaterial() const
    { return m_StructuralMaterial; }
    void setStructuralMaterial(QString StructuralMaterial)
    { m_StructuralMaterial = StructuralMaterial; }
    QSharedPointer<ScenarioSizing> Sizing() const
    { return m_Sizing; }
    void setSizing(QSharedPointer<ScenarioSizing> Sizing)
    { m_Sizing = Sizing; }
    QSharedPointer<ScenarioMomentsOfInertia> MomentsOfInertia() const
    { return m_MomentsOfInertia; }
    void setMomentsOfInertia(QSharedPointer<ScenarioMomentsOfInertia> MomentsOfInertia)
    { m_MomentsOfInertia = MomentsOfInertia; }
    QSharedPointer<ScenarioSecondMomentsOfInertia> SecondMomentsOfInertia() const
    { return m_SecondMomentsOfInertia; }
    void setSecondMomentsOfInertia(QSharedPointer<ScenarioSecondMomentsOfInertia> SecondMomentsOfInertia)
    { m_SecondMomentsOfInertia = SecondMomentsOfInertia; }
    QSharedPointer<ScenarioNaturalFrequency> NaturalFrequency() const
    { return m_NaturalFrequency; }
    void setNaturalFrequency(QSharedPointer<ScenarioNaturalFrequency> NaturalFrequency)
    { m_NaturalFrequency = NaturalFrequency; }
    double totalStructureMass() const
    { return m_totalStructureMass; }
    void setTotalStructureMass(double totalStructureMass)
    { m_totalStructureMass = totalStructureMass; }

private:
    QString m_StructuralShape;
    QString m_StructuralMaterial;
    QSharedPointer<ScenarioSizing> m_Sizing;
    QSharedPointer<ScenarioMomentsOfInertia> m_MomentsOfInertia;
    QSharedPointer<ScenarioSecondMomentsOfInertia> m_SecondMomentsOfInertia;
    QSharedPointer<ScenarioNaturalFrequency> m_NaturalFrequency;
    double m_totalStructureMass;
};


// ScenarioSizing
class ScenarioSizing : public ScenarioObject
{
public:
    ScenarioSizing();
    static ScenarioSizing* create(const QDomElement& e);
    virtual QString elementName() const
    { return "Sizing"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double volume() const
    { return m_volume; }
    void setVolume(double volume)
    { m_volume = volume; }
    double width() const
    { return m_width; }
    void setWidth(double width)
    { m_width = width; }
    double length() const
    { return m_length; }
    void setLength(double length)
    { m_length = length; }
    double height() const
    { return m_height; }
    void setHeight(double height)
    { m_height = height; }

private:
    double m_volume;
    double m_width;
    double m_length;
    double m_height;
};


// ScenarioMomentsOfInertia
class ScenarioMomentsOfInertia : public ScenarioObject
{
public:
    ScenarioMomentsOfInertia();
    static ScenarioMomentsOfInertia* create(const QDomElement& e);
    virtual QString elementName() const
    { return "MomentsOfInertia"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double xAxis() const
    { return m_xAxis; }
    void setXAxis(double xAxis)
    { m_xAxis = xAxis; }
    double yAxis() const
    { return m_yAxis; }
    void setYAxis(double yAxis)
    { m_yAxis = yAxis; }
    double zAxis() const
    { return m_zAxis; }
    void setZAxis(double zAxis)
    { m_zAxis = zAxis; }

private:
    double m_xAxis;
    double m_yAxis;
    double m_zAxis;
};


// ScenarioSecondMomentsOfInertia
class ScenarioSecondMomentsOfInertia : public ScenarioObject
{
public:
    ScenarioSecondMomentsOfInertia();
    static ScenarioSecondMomentsOfInertia* create(const QDomElement& e);
    virtual QString elementName() const
    { return "SecondMomentsOfInertia"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double xAxis() const
    { return m_xAxis; }
    void setXAxis(double xAxis)
    { m_xAxis = xAxis; }
    double yAxis() const
    { return m_yAxis; }
    void setYAxis(double yAxis)
    { m_yAxis = yAxis; }
    double zAxis() const
    { return m_zAxis; }
    void setZAxis(double zAxis)
    { m_zAxis = zAxis; }

private:
    double m_xAxis;
    double m_yAxis;
    double m_zAxis;
};


// ScenarioNaturalFrequency
class ScenarioNaturalFrequency : public ScenarioObject
{
public:
    ScenarioNaturalFrequency();
    static ScenarioNaturalFrequency* create(const QDomElement& e);
    virtual QString elementName() const
    { return "NaturalFrequency"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double axialFrequency() const
    { return m_axialFrequency; }
    void setAxialFrequency(double axialFrequency)
    { m_axialFrequency = axialFrequency; }
    double lateralFrequency() const
    { return m_lateralFrequency; }
    void setLateralFrequency(double lateralFrequency)
    { m_lateralFrequency = lateralFrequency; }

private:
    double m_axialFrequency;
    double m_lateralFrequency;
};


// ScenarioTCS
class ScenarioTCS : public ScenarioObject
{
public:
    ScenarioTCS();
    static ScenarioTCS* create(const QDomElement& e);
    virtual QString elementName() const
    { return "TCS"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioTemperature> Temperature() const
    { return m_Temperature; }
    void setTemperature(QSharedPointer<ScenarioTemperature> Temperature)
    { m_Temperature = Temperature; }
    double heaterPower() const
    { return m_heaterPower; }
    void setHeaterPower(double heaterPower)
    { m_heaterPower = heaterPower; }
    double radiatedPower() const
    { return m_radiatedPower; }
    void setRadiatedPower(double radiatedPower)
    { m_radiatedPower = radiatedPower; }
    QSharedPointer<ScenarioCoatingArea> CoatingArea() const
    { return m_CoatingArea; }
    void setCoatingArea(QSharedPointer<ScenarioCoatingArea> CoatingArea)
    { m_CoatingArea = CoatingArea; }
    double totalTCSMass() const
    { return m_totalTCSMass; }
    void setTotalTCSMass(double totalTCSMass)
    { m_totalTCSMass = totalTCSMass; }

private:
    QSharedPointer<ScenarioTemperature> m_Temperature;
    double m_heaterPower;
    double m_radiatedPower;
    QSharedPointer<ScenarioCoatingArea> m_CoatingArea;
    double m_totalTCSMass;
};


// ScenarioTemperature
class ScenarioTemperature : public ScenarioObject
{
public:
    ScenarioTemperature();
    static ScenarioTemperature* create(const QDomElement& e);
    virtual QString elementName() const
    { return "Temperature"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double maximumSCTemperature() const
    { return m_maximumSCTemperature; }
    void setMaximumSCTemperature(double maximumSCTemperature)
    { m_maximumSCTemperature = maximumSCTemperature; }
    double minimumSCTemperature() const
    { return m_minimumSCTemperature; }
    void setMinimumSCTemperature(double minimumSCTemperature)
    { m_minimumSCTemperature = minimumSCTemperature; }

private:
    double m_maximumSCTemperature;
    double m_minimumSCTemperature;
};


// ScenarioCoatingArea
class ScenarioCoatingArea : public ScenarioObject
{
public:
    ScenarioCoatingArea();
    static ScenarioCoatingArea* create(const QDomElement& e);
    virtual QString elementName() const
    { return "CoatingArea"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioColdSurface> ColdSurface() const
    { return m_ColdSurface; }
    void setColdSurface(QSharedPointer<ScenarioColdSurface> ColdSurface)
    { m_ColdSurface = ColdSurface; }
    QSharedPointer<ScenarioHotSurface> HotSurface() const
    { return m_HotSurface; }
    void setHotSurface(QSharedPointer<ScenarioHotSurface> HotSurface)
    { m_HotSurface = HotSurface; }

private:
    QSharedPointer<ScenarioColdSurface> m_ColdSurface;
    QSharedPointer<ScenarioHotSurface> m_HotSurface;
};


// ScenarioColdSurface
class ScenarioColdSurface : public ScenarioObject
{
public:
    ScenarioColdSurface();
    static ScenarioColdSurface* create(const QDomElement& e);
    virtual QString elementName() const
    { return "ColdSurface"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioColdCoating> ColdCoating() const
    { return m_ColdCoating; }
    void setColdCoating(QSharedPointer<ScenarioColdCoating> ColdCoating)
    { m_ColdCoating = ColdCoating; }
    double totalColdArea() const
    { return m_totalColdArea; }
    void setTotalColdArea(double totalColdArea)
    { m_totalColdArea = totalColdArea; }

private:
    QSharedPointer<ScenarioColdCoating> m_ColdCoating;
    double m_totalColdArea;
};


// ScenarioColdCoating
class ScenarioColdCoating : public ScenarioObject
{
public:
    ScenarioColdCoating();
    static ScenarioColdCoating* create(const QDomElement& e);
    virtual QString elementName() const
    { return "ColdCoating"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioElementIdentifierType> ElementIdentifier() const
    { return m_ElementIdentifier; }
    void setElementIdentifier(QSharedPointer<ScenarioElementIdentifierType> ElementIdentifier)
    { m_ElementIdentifier = ElementIdentifier; }
    double emissivity() const
    { return m_emissivity; }
    void setEmissivity(double emissivity)
    { m_emissivity = emissivity; }
    double absorptivity() const
    { return m_absorptivity; }
    void setAbsorptivity(double absorptivity)
    { m_absorptivity = absorptivity; }

private:
    QSharedPointer<ScenarioElementIdentifierType> m_ElementIdentifier;
    double m_emissivity;
    double m_absorptivity;
};


// ScenarioHotSurface
class ScenarioHotSurface : public ScenarioObject
{
public:
    ScenarioHotSurface();
    static ScenarioHotSurface* create(const QDomElement& e);
    virtual QString elementName() const
    { return "HotSurface"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioHotCoating> HotCoating() const
    { return m_HotCoating; }
    void setHotCoating(QSharedPointer<ScenarioHotCoating> HotCoating)
    { m_HotCoating = HotCoating; }
    double totalHotArea() const
    { return m_totalHotArea; }
    void setTotalHotArea(double totalHotArea)
    { m_totalHotArea = totalHotArea; }

private:
    QSharedPointer<ScenarioHotCoating> m_HotCoating;
    double m_totalHotArea;
};


// ScenarioHotCoating
class ScenarioHotCoating : public ScenarioObject
{
public:
    ScenarioHotCoating();
    static ScenarioHotCoating* create(const QDomElement& e);
    virtual QString elementName() const
    { return "HotCoating"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioElementIdentifierType> ElementIdentifier() const
    { return m_ElementIdentifier; }
    void setElementIdentifier(QSharedPointer<ScenarioElementIdentifierType> ElementIdentifier)
    { m_ElementIdentifier = ElementIdentifier; }
    double emissivity() const
    { return m_emissivity; }
    void setEmissivity(double emissivity)
    { m_emissivity = emissivity; }
    double absorptivity() const
    { return m_absorptivity; }
    void setAbsorptivity(double absorptivity)
    { m_absorptivity = absorptivity; }

private:
    QSharedPointer<ScenarioElementIdentifierType> m_ElementIdentifier;
    double m_emissivity;
    double m_absorptivity;
};


// ScenarioEPS
class ScenarioEPS : public ScenarioObject
{
public:
    ScenarioEPS();
    static ScenarioEPS* create(const QDomElement& e);
    virtual QString elementName() const
    { return "EPS"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioSolarArray> SolarArray() const
    { return m_SolarArray; }
    void setSolarArray(QSharedPointer<ScenarioSolarArray> SolarArray)
    { m_SolarArray = SolarArray; }
    QSharedPointer<ScenarioBatteryType> BatteryType() const
    { return m_BatteryType; }
    void setBatteryType(QSharedPointer<ScenarioBatteryType> BatteryType)
    { m_BatteryType = BatteryType; }
    double massOfPCU() const
    { return m_massOfPCU; }
    void setMassOfPCU(double massOfPCU)
    { m_massOfPCU = massOfPCU; }
    double totalEPSMass() const
    { return m_totalEPSMass; }
    void setTotalEPSMass(double totalEPSMass)
    { m_totalEPSMass = totalEPSMass; }

private:
    QSharedPointer<ScenarioSolarArray> m_SolarArray;
    QSharedPointer<ScenarioBatteryType> m_BatteryType;
    double m_massOfPCU;
    double m_totalEPSMass;
};


// ScenarioSolarArray
class ScenarioSolarArray : public ScenarioObject
{
public:
    ScenarioSolarArray();
    static ScenarioSolarArray* create(const QDomElement& e);
    virtual QString elementName() const
    { return "SolarArray"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QString SACellType() const
    { return m_SACellType; }
    void setSACellType(QString SACellType)
    { m_SACellType = SACellType; }
    double massOfSolarArray() const
    { return m_massOfSolarArray; }
    void setMassOfSolarArray(double massOfSolarArray)
    { m_massOfSolarArray = massOfSolarArray; }
    double areaOfSolarArray() const
    { return m_areaOfSolarArray; }
    void setAreaOfSolarArray(double areaOfSolarArray)
    { m_areaOfSolarArray = areaOfSolarArray; }

private:
    QString m_SACellType;
    double m_massOfSolarArray;
    double m_areaOfSolarArray;
};


// ScenarioBatteryType
class ScenarioBatteryType : public ScenarioObject
{
public:
    ScenarioBatteryType();
    static ScenarioBatteryType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "BatteryType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QString BatteryType() const
    { return m_BatteryType; }
    void setBatteryType(QString BatteryType)
    { m_BatteryType = BatteryType; }
    double totalMassOfBatteries() const
    { return m_totalMassOfBatteries; }
    void setTotalMassOfBatteries(double totalMassOfBatteries)
    { m_totalMassOfBatteries = totalMassOfBatteries; }
    double numberOfBatteries() const
    { return m_numberOfBatteries; }
    void setNumberOfBatteries(double numberOfBatteries)
    { m_numberOfBatteries = numberOfBatteries; }
    double totalVolumeOfBatteries() const
    { return m_totalVolumeOfBatteries; }
    void setTotalVolumeOfBatteries(double totalVolumeOfBatteries)
    { m_totalVolumeOfBatteries = totalVolumeOfBatteries; }

private:
    QString m_BatteryType;
    double m_totalMassOfBatteries;
    double m_numberOfBatteries;
    double m_totalVolumeOfBatteries;
};


// ScenarioTTC
class ScenarioTTC : public ScenarioObject
{
public:
    ScenarioTTC();
    static ScenarioTTC* create(const QDomElement& e);
    virtual QString elementName() const
    { return "TTC"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double totalTTCMass() const
    { return m_totalTTCMass; }
    void setTotalTTCMass(double totalTTCMass)
    { m_totalTTCMass = totalTTCMass; }
    QSharedPointer<ScenarioTTCAntenna> TTCAntenna() const
    { return m_TTCAntenna; }
    void setTTCAntenna(QSharedPointer<ScenarioTTCAntenna> TTCAntenna)
    { m_TTCAntenna = TTCAntenna; }

private:
    double m_totalTTCMass;
    QSharedPointer<ScenarioTTCAntenna> m_TTCAntenna;
};


// ScenarioTTCAntenna
class ScenarioTTCAntenna : public ScenarioObject
{
public:
    ScenarioTTCAntenna();
    static ScenarioTTCAntenna* create(const QDomElement& e);
    virtual QString elementName() const
    { return "TTCAntenna"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double TransmitterPower() const
    { return m_TransmitterPower; }
    void setTransmitterPower(double TransmitterPower)
    { m_TransmitterPower = TransmitterPower; }
    double TransmitterFrequency() const
    { return m_TransmitterFrequency; }
    void setTransmitterFrequency(double TransmitterFrequency)
    { m_TransmitterFrequency = TransmitterFrequency; }
    double TransmitterGain() const
    { return m_TransmitterGain; }
    void setTransmitterGain(double TransmitterGain)
    { m_TransmitterGain = TransmitterGain; }
    double TransmitterEfficiency() const
    { return m_TransmitterEfficiency; }
    void setTransmitterEfficiency(double TransmitterEfficiency)
    { m_TransmitterEfficiency = TransmitterEfficiency; }
    double LinkDuration() const
    { return m_LinkDuration; }
    void setLinkDuration(double LinkDuration)
    { m_LinkDuration = LinkDuration; }
    double DataRate() const
    { return m_DataRate; }
    void setDataRate(double DataRate)
    { m_DataRate = DataRate; }

private:
    double m_TransmitterPower;
    double m_TransmitterFrequency;
    double m_TransmitterGain;
    double m_TransmitterEfficiency;
    double m_LinkDuration;
    double m_DataRate;
};


// ScenarioAOCS
class ScenarioAOCS : public ScenarioObject
{
public:
    ScenarioAOCS();
    static ScenarioAOCS* create(const QDomElement& e);
    virtual QString elementName() const
    { return "AOCS"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double totalAOCSMass() const
    { return m_totalAOCSMass; }
    void setTotalAOCSMass(double totalAOCSMass)
    { m_totalAOCSMass = totalAOCSMass; }

private:
    double m_totalAOCSMass;
};


// ScenarioOBDH
class ScenarioOBDH : public ScenarioObject
{
public:
    ScenarioOBDH();
    static ScenarioOBDH* create(const QDomElement& e);
    virtual QString elementName() const
    { return "OBDH"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    double totalOBDHMass() const
    { return m_totalOBDHMass; }
    void setTotalOBDHMass(double totalOBDHMass)
    { m_totalOBDHMass = totalOBDHMass; }
    double totalSizeOfMemory() const
    { return m_totalSizeOfMemory; }
    void setTotalSizeOfMemory(double totalSizeOfMemory)
    { m_totalSizeOfMemory = totalSizeOfMemory; }

private:
    double m_totalOBDHMass;
    double m_totalSizeOfMemory;
};


// ScenarioTransmitterPayloadType
class ScenarioTransmitterPayloadType : public ScenarioAbstractPayloadType
{
public:
    ScenarioTransmitterPayloadType();
    static ScenarioTransmitterPayloadType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "TransmitterPayloadType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioElementIdentifierType> ElementIdentifier() const
    { return m_ElementIdentifier; }
    void setElementIdentifier(QSharedPointer<ScenarioElementIdentifierType> ElementIdentifier)
    { m_ElementIdentifier = ElementIdentifier; }
    QSharedPointer<ScenarioTransmitter> Transmitter() const
    { return m_Transmitter; }
    void setTransmitter(QSharedPointer<ScenarioTransmitter> Transmitter)
    { m_Transmitter = Transmitter; }

private:
    QSharedPointer<ScenarioElementIdentifierType> m_ElementIdentifier;
    QSharedPointer<ScenarioTransmitter> m_Transmitter;
};


// ScenarioReceiverPayloadType
class ScenarioReceiverPayloadType : public ScenarioAbstractPayloadType
{
public:
    ScenarioReceiverPayloadType();
    static ScenarioReceiverPayloadType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "ReceiverPayloadType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioElementIdentifierType> ElementIdentifier() const
    { return m_ElementIdentifier; }
    void setElementIdentifier(QSharedPointer<ScenarioElementIdentifierType> ElementIdentifier)
    { m_ElementIdentifier = ElementIdentifier; }
    QSharedPointer<ScenarioReceiver> Receiver() const
    { return m_Receiver; }
    void setReceiver(QSharedPointer<ScenarioReceiver> Receiver)
    { m_Receiver = Receiver; }

private:
    QSharedPointer<ScenarioElementIdentifierType> m_ElementIdentifier;
    QSharedPointer<ScenarioReceiver> m_Receiver;
};


// ScenarioOpticalPayloadType
class ScenarioOpticalPayloadType : public ScenarioAbstractPayloadType
{
public:
    ScenarioOpticalPayloadType();
    static ScenarioOpticalPayloadType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "OpticalPayloadType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioElementIdentifierType> ElementIdentifier() const
    { return m_ElementIdentifier; }
    void setElementIdentifier(QSharedPointer<ScenarioElementIdentifierType> ElementIdentifier)
    { m_ElementIdentifier = ElementIdentifier; }
    QSharedPointer<ScenarioTelescopeType> Telescope() const
    { return m_Telescope; }
    void setTelescope(QSharedPointer<ScenarioTelescopeType> Telescope)
    { m_Telescope = Telescope; }

private:
    QSharedPointer<ScenarioElementIdentifierType> m_ElementIdentifier;
    QSharedPointer<ScenarioTelescopeType> m_Telescope;
};


// ScenarioRadarPayloadType
class ScenarioRadarPayloadType : public ScenarioAbstractPayloadType
{
public:
    ScenarioRadarPayloadType();
    static ScenarioRadarPayloadType* create(const QDomElement& e);
    virtual QString elementName() const
    { return "RadarPayloadType"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QSharedPointer<ScenarioElementIdentifierType> ElementIdentifier() const
    { return m_ElementIdentifier; }
    void setElementIdentifier(QSharedPointer<ScenarioElementIdentifierType> ElementIdentifier)
    { m_ElementIdentifier = ElementIdentifier; }
    QSharedPointer<ScenarioRadarType> Radar() const
    { return m_Radar; }
    void setRadar(QSharedPointer<ScenarioRadarType> Radar)
    { m_Radar = Radar; }

private:
    QSharedPointer<ScenarioElementIdentifierType> m_ElementIdentifier;
    QSharedPointer<ScenarioRadarType> m_Radar;
};


// SpaceScenario
class SpaceScenario : public ScenarioObject
{
public:
    SpaceScenario();
    static SpaceScenario* create(const QDomElement& e);
    virtual QString elementName() const
    { return "SpaceScenario"; }
    virtual bool load(const QDomElement& e, QDomElement* nextElement);
    virtual QDomElement toDomElement(QDomDocument& doc, const QString& elementName) const;

    virtual QList<QSharedPointer<ScenarioObject> > children() const;
    QString Name() const
    { return m_Name; }
    void setName(QString Name)
    { m_Name = Name; }
    const QList<QSharedPointer<ScenarioParticipantType> >& AbstractParticipant() const
    { return m_AbstractParticipant; }
    QList<QSharedPointer<ScenarioParticipantType> >& AbstractParticipant()
    { return m_AbstractParticipant; }
    void setAbstractParticipant(QList<QSharedPointer<ScenarioParticipantType> > AbstractParticipant)
    { m_AbstractParticipant = AbstractParticipant; }

private:
    QString m_Name;
    QList<QSharedPointer<ScenarioParticipantType> > m_AbstractParticipant;
};


QDomElement CreatePayloadSetElement(ScenarioPayloadSet* e, QDomDocument& doc);
QDomElement CreatePointElement(ScenarioPoint* e, QDomDocument& doc);
QDomElement CreateOptimizationElement(ScenarioOptimization* e, QDomDocument& doc);
QDomElement CreateRegionElement(ScenarioRegion* e, QDomDocument& doc);
QDomElement CreateREVElement(ScenarioREV* e, QDomDocument& doc);
QDomElement CreateLoiteringTLEElement(ScenarioLoiteringTLEType* e, QDomDocument& doc);
QDomElement CreateReceiverPayloadElement(ScenarioReceiverPayloadType* e, QDomDocument& doc);
QDomElement CreateTrajectoryStoppingConditionElement(ScenarioTrajectoryStoppingConditionType* e, QDomDocument& doc);
QDomElement CreateOpticalPayloadElement(ScenarioOpticalPayloadType* e, QDomDocument& doc);
QDomElement CreateInitialAttitudeElement(ScenarioInitialAttitudeType* e, QDomDocument& doc);
QDomElement CreateElementIdentifierElement(ScenarioElementIdentifierType* e, QDomDocument& doc);
QDomElement CreateLoiteringElement(ScenarioLoiteringType* e, QDomDocument& doc);
QDomElement CreateEuler321Element(ScenarioEulerType* e, QDomDocument& doc);
QDomElement CreateRadarElement(ScenarioRadarType* e, QDomDocument& doc);
QDomElement CreateQuaternionJPLElement(ScenarioQuaternionType* e, QDomDocument& doc);
QDomElement CreateReceiverElement(ScenarioReceiver* e, QDomDocument& doc);
QDomElement CreateSphericalCoordinatesElement(ScenarioSphericalCoordinatesType* e, QDomDocument& doc);
QDomElement CreateTimeLineElement(ScenarioTimeLine* e, QDomDocument& doc);
QDomElement CreateEntryArcElement(ScenarioEntryArcType* e, QDomDocument& doc);
QDomElement CreateKeplerianElementsElement(ScenarioKeplerianElementsType* e, QDomDocument& doc);
QDomElement CreatePropagationAttitudeElement(ScenarioPropagationAttitudeType* e, QDomDocument& doc);
QDomElement CreateInitialAttitudeUsingQuaternionsElement(ScenarioInitialAttitudeUsingQuaternionsType* e, QDomDocument& doc);
QDomElement CreateRadarPayloadElement(ScenarioRadarPayloadType* e, QDomDocument& doc);
QDomElement CreateTransmitterPayloadElement(ScenarioTransmitterPayloadType* e, QDomDocument& doc);
QDomElement CreateRendezVousManoeuvreElement(ScenarioRendezVousManoeuvreType* e, QDomDocument& doc);
QDomElement CreateTransmitterElement(ScenarioTransmitter* e, QDomDocument& doc);
QDomElement CreateGroundPositionElement(ScenarioGroundPositionType* e, QDomDocument& doc);
QDomElement CreateInitialPositionElement(ScenarioInitialPositionType* e, QDomDocument& doc);
QDomElement CreateLVElement(ScenarioLV* e, QDomDocument& doc);
QDomElement CreateOutputFilesElement(ScenarioOutputFiles* e, QDomDocument& doc);
QDomElement CreateExternalElement(ScenarioExternalType* e, QDomDocument& doc);
QDomElement CreateState12DOFElement(ScenarioState12DOF* e, QDomDocument& doc);
QDomElement CreateCoverageElement(ScenarioCoverageType* e, QDomDocument& doc);
QDomElement CreateLaunchPadElement(ScenarioLaunchPad* e, QDomDocument& doc);
QDomElement CreateGroundStationElement(ScenarioGroundStation* e, QDomDocument& doc);
QDomElement CreateEuler123Element(ScenarioEulerType* e, QDomDocument& doc);
QDomElement CreateSCMissionElement(ScenarioSCMission* e, QDomDocument& doc);
QDomElement CreateEnvironmentElement(ScenarioEnvironmentType* e, QDomDocument& doc);
QDomElement CreateStateVectorElement(ScenarioStateVectorType* e, QDomDocument& doc);
QDomElement CreateDeltaVElement(ScenarioDeltaVType* e, QDomDocument& doc);
QDomElement CreateSpaceScenarioElement(SpaceScenario* e, QDomDocument& doc);
QDomElement CreateQuaternionESAElement(ScenarioQuaternionType* e, QDomDocument& doc);
QDomElement CreatePropagationPositionElement(ScenarioPropagationPositionType* e, QDomDocument& doc);
QDomElement CreateSCElement(ScenarioSC* e, QDomDocument& doc);
QDomElement CreateState14DOFElement(ScenarioState14DOF* e, QDomDocument& doc);
QDomElement CreateSCProgramElement(ScenarioSCProgram* e, QDomDocument& doc);
QDomElement CreateFlyByElement(ScenarioFlyByType* e, QDomDocument& doc);
QDomElement CreateLagrangianElement(ScenarioLagrangianType* e, QDomDocument& doc);
QDomElement CreatePropagationElement(ScenarioPropagation* e, QDomDocument& doc);
QDomElement CreateEuler313Element(ScenarioEulerType* e, QDomDocument& doc);
QDomElement CreateTelescopeElement(ScenarioTelescopeType* e, QDomDocument& doc);

#endif // _STASCHEMA_H_
